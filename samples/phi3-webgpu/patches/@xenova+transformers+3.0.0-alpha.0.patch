diff --git a/node_modules/@xenova/transformers/src/models.js b/node_modules/@xenova/transformers/src/models.js
index 0064bb3..bc19f8d 100644
--- a/node_modules/@xenova/transformers/src/models.js
+++ b/node_modules/@xenova/transformers/src/models.js
@@ -37,7 +37,7 @@
  *
  * @module models
  */
-
+import {env} from "./env.js"
 import {
     AutoConfig,
     getKeyValueShapes,
@@ -182,7 +182,10 @@ async function getSession(pretrained_model_name_or_path, fileName, options) {
 
     // Construct the model file name
     const suffix = DEFAULT_DTYPE_SUFFIX_MAPPING[dtype];
-    const modelFileName = `${options.subfolder ?? ''}/${fileName}${suffix}.onnx`;
+    let modelFileName = `${options.subfolder ?? ''}/${fileName}${suffix}.onnx`;
+    if (env.remoteHost === "https://modelscope.cn") {
+        modelFileName = `${options.subfolder ?? ''}%2F${fileName}${suffix}.onnx`
+    }
 
     const session_options = { ...options.session_options } ?? {};
 
@@ -199,8 +202,14 @@ async function getSession(pretrained_model_name_or_path, fileName, options) {
         if (apis.IS_NODE_ENV) {
             throw new Error('External data format is not yet supported in Node.js');
         }
+
         const path = `${fileName}${suffix}.onnx_data`;
-        const fullPath = `${options.subfolder ?? ''}/${path}`;
+        let fullPath = `${options.subfolder ?? ''}/${path}`;
+
+        if (env.remoteHost === "https://modelscope.cn") {
+            fullPath = `${options.subfolder ?? ''}%2F${path}`;
+        }
+
         externalDataPromises.push(new Promise(async (resolve, reject) => {
             const data = await getModelFile(pretrained_model_name_or_path, fullPath, true, options);
             resolve({ path, data })
diff --git a/node_modules/@xenova/transformers/src/utils/hub.js b/node_modules/@xenova/transformers/src/utils/hub.js
index b825697..8b12a30 100644
--- a/node_modules/@xenova/transformers/src/utils/hub.js
+++ b/node_modules/@xenova/transformers/src/utils/hub.js
@@ -408,9 +408,10 @@ export async function getModelFile(path_or_repo_id, filename, fatal = true, opti
         env.remoteHost,
         env.remotePathTemplate
             .replaceAll('{model}', path_or_repo_id)
-            .replaceAll('{revision}', encodeURIComponent(revision)),
-        filename
-    );
+            .replaceAll('{revision}', encodeURIComponent(revision))
+    ) + "&FilePath=" + filename;
+
+
 
     // Choose cache key for filesystem cache
     // When using the main revision (default), we use the request URL as the cache key.
