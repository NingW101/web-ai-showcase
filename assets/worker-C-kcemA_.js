const d="this.document={currentScript:{src:this.location.href}},function(){"use strict";var bi=typeof document<"u"?document.currentScript:null;(async()=>{function zr(t,e){t&&t(e)}function pg(t){return Object.fromEntries(Object.entries(t).map(([e,r])=>[r,e]))}function go(t){return t.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")}const yt=class{constructor(){let t=function(...e){return t._call(...e)};return Object.setPrototypeOf(t,new.target.prototype)}_call(...t){throw Error("Must implement _call method in subclass")}};function hg(t){return t?.prototype?.__proto__?.constructor?.name==="TypedArray"}function _o(t){return Number.isInteger(t)||typeof t=="bigint"}function fg(t){return t!=null}function yo(t){const e=[];let r=t;for(;Array.isArray(r);)e.push(r.length),r=r[0];return e}function wo(t,e,r=void 0){const n=t[e];if(n!==void 0)return delete t[e],n;if(r===void 0)throw Error(`Key ${e} does not exist in object.`);return r}function lt(...t){return Array.prototype.concat.apply([],t)}function mg(...t){return t.reduce((e,r)=>e.flatMap(n=>r.map(a=>[n,a])))}function ua(t,e){return Math.abs((t+e)%(2*e)-e)}var Ke={},gg=Object.freeze({__proto__:null,default:Ke});const _g="3.0.0-alpha.0",vo=typeof self<"u",yg=vo&&"caches"in self,$i=!$o(Ke),wg=!$o(Ke),xi=$i&&wg,Si=xi?Ke.dirname(Ke.dirname(Ke.fileURLToPath(bi&&bi.tagName.toUpperCase()==="SCRIPT"&&bi.src||new URL("assets/worker-Diat09BX.js",document.baseURI).href))):"./",vg=xi?Ke.join(Si,"/.cache/"):null,bo="/models/",bg=xi?Ke.join(Si,bo):bo,tt={backends:{onnx:{},tfjs:{}},__dirname:Si,version:_g,allowRemoteModels:!0,remoteHost:"https://huggingface.co/",remotePathTemplate:"{model}/resolve/{revision}/",allowLocalModels:!vo,localModelPath:bg,useFS:$i,useBrowserCache:yg,useFSCache:$i,cacheDir:vg,useCustomCache:!1,customCache:null};function $o(t){return Object.keys(t).length===0}var ki={};class da{_CONTENT_TYPE_MAP={txt:"text/plain",html:"text/html",css:"text/css",js:"text/javascript",json:"application/json",png:"image/png",jpg:"image/jpeg",jpeg:"image/jpeg",gif:"image/gif"};constructor(e){if(this.filePath=e,this.headers=new Headers,this.exists=Ke.existsSync(e),this.exists){this.status=200,this.statusText="OK";let r=Ke.statSync(e);this.headers.set("content-length",r.size.toString()),this.updateContentType();let n=this;this.body=new ReadableStream({start(a){n.arrayBuffer().then(i=>{a.enqueue(new Uint8Array(i)),a.close()})}})}else this.status=404,this.statusText="Not Found",this.body=null}updateContentType(){const e=this.filePath.toString().split(".").pop().toLowerCase();this.headers.set("content-type",this._CONTENT_TYPE_MAP[e]??"application/octet-stream")}clone(){let e=new da(this.filePath);return e.exists=this.exists,e.status=this.status,e.statusText=this.statusText,e.headers=new Headers(this.headers),e}async arrayBuffer(){return(await Ke.promises.readFile(this.filePath)).buffer}async blob(){const e=await Ke.promises.readFile(this.filePath);return new Blob([e],{type:this.headers.get("content-type")})}async text(){return await Ke.promises.readFile(this.filePath,"utf8")}async json(){return JSON.parse(await this.text())}}function Ei(t,e=null){let r;try{r=new URL(t)}catch{return!1}return e&&!e.includes(r.hostname)?!1:r.protocol==="http:"||r.protocol==="https:"}async function ca(t){if(tt.useFS&&!Ei(t))return new da(t);if(typeof process<"u"&&process?.release?.name==="node"){const e=!!ki?.TESTING_REMOTELY,r=tt.version,n=new Headers;if(n.set("User-Agent",`transformers.js/${r}; is_ci/${e};`),Ei(t,["huggingface.co","hf.co"])){const a=ki?.HF_TOKEN??ki?.HF_ACCESS_TOKEN;a&&n.set("Authorization",`Bearer ${a}`)}return fetch(t,{headers:n})}else return fetch(t)}const $g={400:"Bad request error occurred while trying to load file",401:"Unauthorized access to file",403:"Forbidden access to file",404:"Could not locate file",408:"Request timeout error occurred while trying to load file",500:"Internal server error error occurred while trying to load file",502:"Bad gateway error occurred while trying to load file",503:"Service unavailable error occurred while trying to load file",504:"Gateway timeout error occurred while trying to load file"};function xg(t,e,r){if(!r)return null;const n=$g[t]??`Error (${t}) occurred while trying to load file`;throw Error(`${n}: "${e}".`)}class xo{constructor(e){this.path=e}async match(e){let r=Ke.join(this.path,e),n=new da(r);if(n.exists)return n}async put(e,r){const n=Buffer.from(await r.arrayBuffer());let a=Ke.join(this.path,e);try{await Ke.promises.mkdir(Ke.dirname(a),{recursive:!0}),await Ke.promises.writeFile(a,n)}catch(i){console.warn("An error occurred while writing the file to cache:",i)}}}async function Sg(t,...e){for(let r of e)try{let n=await t.match(r);if(n)return n}catch{continue}}async function Ci(t,e,r=!0,n={}){if(!tt.allowLocalModels){if(n.local_files_only)throw Error("Invalid configuration detected: local models are disabled (`env.allowLocalModels=false`) but you have requested to only use local models (`local_files_only=true`).");if(!tt.allowRemoteModels)throw Error("Invalid configuration detected: both local and remote models are disabled. Fix by setting `env.allowLocalModels` or `env.allowRemoteModels` to `true`.")}zr(n.progress_callback,{status:"initiate",name:t,file:e});let a;if(!a&&tt.useBrowserCache){if(typeof caches>"u")throw Error("Browser cache is not available in this environment.");try{a=await caches.open("transformers-cache")}catch(v){console.warn("An error occurred while opening the browser cache:",v)}}if(!a&&tt.useFSCache&&(a=new xo(n.cache_dir??tt.cacheDir)),!a&&tt.useCustomCache)throw Error("`env.useCustomCache=true`, but `env.customCache` is not defined.");const i=n.revision??"main";let s=pa(t,e),o=pa(tt.localModelPath,s),l=pa(tt.remoteHost,tt.remotePathTemplate.replaceAll("{model}",t).replaceAll("{revision}",encodeURIComponent(i)),e),d=i==="main"?s:pa(t,i,e),c,u=a instanceof xo?d:l,h=!1,f;a&&(f=await Sg(a,o,u));const g=f!==void 0;if(f===void 0){if(tt.allowLocalModels)if(Ei(s)){if(n.local_files_only)throw new Error(`\`local_files_only=true\`, but attempted to load a remote file from: ${s}.`);if(!tt.allowRemoteModels)throw new Error(`\`env.allowRemoteModels=false\`, but attempted to load a remote file from: ${s}.`)}else try{f=await ca(o),c=o}catch(v){console.warn(`Unable to load from local path "${o}": "${v}"`)}if(f===void 0||f.status===404){if(n.local_files_only||!tt.allowRemoteModels){if(r)throw Error(`\`local_files_only=true\` or \`env.allowRemoteModels=false\` and file was not found locally at "${o}".`);return null}if(f=await ca(l),f.status!==200)return xg(f.status,l,r);c=u}h=a&&typeof Response<"u"&&f instanceof Response&&f.status===200}zr(n.progress_callback,{status:"download",name:t,file:e});const y={status:"progress",name:t,file:e};let w;return n.progress_callback?g&&typeof navigator<"u"&&/firefox/i.test(navigator.userAgent)?(w=new Uint8Array(await f.arrayBuffer()),zr(n.progress_callback,{...y,progress:100,loaded:w.length,total:w.length})):w=await kg(f,v=>{zr(n.progress_callback,{...y,...v})}):w=new Uint8Array(await f.arrayBuffer()),h&&c&&await a.match(c)===void 0&&await a.put(c,new Response(w,{headers:f.headers})).catch(v=>{console.warn(`Unable to add response to browser cache: ${v}.`)}),zr(n.progress_callback,{status:"done",name:t,file:e}),w}async function Br(t,e,r=!0,n={}){let a=await Ci(t,e,r,n);if(a===null)return{};let i=new TextDecoder("utf-8").decode(a);return JSON.parse(i)}async function kg(t,e){const r=t.headers.get("Content-Length");r===null&&console.warn("Unable to determine content-length from response headers. Will expand buffer when needed.");let n=parseInt(r??"0"),a=new Uint8Array(n),i=0;const s=t.body.getReader();async function o(){const{done:l,value:d}=await s.read();if(l)return;let c=i+d.length;if(c>n){n=c;let h=new Uint8Array(n);h.set(a),a=h}a.set(d,i),i=c;const u=i/n*100;return e({progress:u,loaded:i,total:n}),o()}return await o(),a}function pa(...t){return t=t.map((e,r)=>(r&&(e=e.replace(new RegExp("^/"),"")),r!==t.length-1&&(e=e.replace(new RegExp("/$"),"")),e)),t.join("/")}function Eg(t,[e,r,n],[a,i],s="bilinear",o=!1){const l=i/n,d=a/r,c=new t.constructor(a*i*e),u=r*n,h=a*i;for(let f=0;f<a;++f)for(let g=0;g<i;++g){const y=f*i+g,w=(g+.5)/l-.5,v=(f+.5)/d-.5;let S=Math.floor(w),E=Math.floor(v);const x=Math.min(S+1,n-1),A=Math.min(E+1,r-1);S=Math.max(S,0),E=Math.max(E,0);const T=w-S,B=v-E,U=(1-T)*(1-B),H=T*(1-B),K=(1-T)*B,O=T*B,G=E*n,ne=A*n,q=G+S,D=G+x,L=ne+S,V=ne+x;for(let te=0;te<e;++te){const X=te*u;c[te*h+y]=U*t[X+q]+H*t[X+D]+K*t[X+L]+O*t[X+V]}}return c}function Cg(t,e,r){const n=new Array(r.length),a=new Array(r.length);for(let o=r.length-1,l=1;o>=0;--o)a[o]=l,n[o]=e[r[o]],l*=n[o];const i=r.map((o,l)=>a[r.indexOf(l)]),s=new t.constructor(t.length);for(let o=0;o<t.length;++o){let l=0;for(let d=e.length-1,c=o;d>=0;--d)l+=c%e[d]*i[d],c=Math.floor(c/e[d]);s[l]=t[o]}return[s,n]}function dt(t){const e=Et(t)[0],r=t.map(a=>Math.exp(a-e)),n=r.reduce((a,i)=>a+i,0);return r.map(a=>a/n)}function Ag(t){return dt(t).map(e=>Math.log(e))}function Rr(t,e=0){return t=Array.from(t).map((r,n)=>[n,r]).sort((r,n)=>n[1]-r[1]),e!==null&&e>0&&(t=t.slice(0,e)),t}function So(t){if(t.length===0)throw Error("Array must not be empty");let e=t[0],r=0;for(let n=1;n<t.length;++n)t[n]<e&&(e=t[n],r=n);return[e,r]}function Et(t){if(t.length===0)throw Error("Array must not be empty");let e=t[0],r=0;for(let n=1;n<t.length;++n)t[n]>e&&(e=t[n],r=n);return[Number(e),r]}function ko(t){return t>0&&(t&t-1)===0}class Eo{constructor(e){if(this.size=e|0,this.size<=1||!ko(this.size))throw new Error("FFT size must be a power of two larger than 1");this._csize=e<<1,this.table=new Float64Array(this.size*2);for(let n=0;n<this.table.length;n+=2){const a=Math.PI*n/this.size;this.table[n]=Math.cos(a),this.table[n+1]=-Math.sin(a)}let r=0;for(let n=1;this.size>n;n<<=1)++r;this._width=r%2===0?r-1:r,this._bitrev=new Int32Array(1<<this._width);for(let n=0;n<this._bitrev.length;++n){this._bitrev[n]=0;for(let a=0;a<this._width;a+=2){const i=this._width-a-2;this._bitrev[n]|=(n>>>a&3)<<i}}}createComplexArray(){return new Float64Array(this._csize)}fromComplexArray(e,r){const n=r||new Array(e.length>>>1);for(let a=0;a<e.length;a+=2)n[a>>>1]=e[a];return n}toComplexArray(e,r){const n=r||this.createComplexArray();for(let a=0;a<n.length;a+=2)n[a]=e[a>>>1],n[a+1]=0;return n}completeSpectrum(e){const r=this._csize,n=r>>>1;for(let a=2;a<n;a+=2)e[r-a]=e[a],e[r-a+1]=-e[a+1]}transform(e,r){if(e===r)throw new Error("Input and output buffers must be different");this._transform4(e,r,1)}realTransform(e,r){if(e===r)throw new Error("Input and output buffers must be different");this._realTransform4(e,r,1)}inverseTransform(e,r){if(e===r)throw new Error("Input and output buffers must be different");this._transform4(e,r,-1);for(let n=0;n<e.length;++n)e[n]/=this.size}_transform4(e,r,n){const a=this._csize;let i=1<<this._width,s=a/i<<1,o,l;const d=this._bitrev;if(s===4)for(o=0,l=0;o<a;o+=s,++l){const c=d[l];this._singleTransform2(r,e,o,c,i)}else for(o=0,l=0;o<a;o+=s,++l){const c=d[l];this._singleTransform4(r,e,o,c,i,n)}for(i>>=2;i>=2;i>>=2){s=a/i<<1;const c=s>>>2;for(o=0;o<a;o+=s){const u=o+c-1;for(let h=o,f=0;h<u;h+=2,f+=i){const g=h,y=g+c,w=y+c,v=w+c,S=e[g],E=e[g+1],x=e[y],A=e[y+1],T=e[w],B=e[w+1],U=e[v],H=e[v+1],K=this.table[f],O=n*this.table[f+1],G=x*K-A*O,ne=x*O+A*K,q=this.table[2*f],D=n*this.table[2*f+1],L=T*q-B*D,V=T*D+B*q,te=this.table[3*f],X=n*this.table[3*f+1],ue=U*te-H*X,F=U*X+H*te,oe=S+L,$e=E+V,Ue=S-L,De=E-V,Ve=G+ue,St=ne+F,We=n*(G-ue),He=n*(ne-F);e[g]=oe+Ve,e[g+1]=$e+St,e[y]=Ue+He,e[y+1]=De-We,e[w]=oe-Ve,e[w+1]=$e-St,e[v]=Ue-He,e[v+1]=De+We}}}}_singleTransform2(e,r,n,a,i){const s=e[a],o=e[a+1],l=e[a+i],d=e[a+i+1];r[n]=s+l,r[n+1]=o+d,r[n+2]=s-l,r[n+3]=o-d}_singleTransform4(e,r,n,a,i,s){const o=i*2,l=i*3,d=e[a],c=e[a+1],u=e[a+i],h=e[a+i+1],f=e[a+o],g=e[a+o+1],y=e[a+l],w=e[a+l+1],v=d+f,S=c+g,E=d-f,x=c-g,A=u+y,T=h+w,B=s*(u-y),U=s*(h-w);r[n]=v+A,r[n+1]=S+T,r[n+2]=E+U,r[n+3]=x-B,r[n+4]=v-A,r[n+5]=S-T,r[n+6]=E-U,r[n+7]=x+B}_realTransform4(e,r,n){const a=this._csize;let i=1<<this._width,s=a/i<<1,o,l;const d=this._bitrev;if(s===4)for(o=0,l=0;o<a;o+=s,++l){const c=d[l];this._singleRealTransform2(r,e,o,c>>>1,i>>>1)}else for(o=0,l=0;o<a;o+=s,++l){const c=d[l];this._singleRealTransform4(r,e,o,c>>>1,i>>>1,n)}for(i>>=2;i>=2;i>>=2){s=a/i<<1;const c=s>>>2;for(o=0;o<a;o+=s){const u=o+c-1;for(let h=o,f=0;h<u;h+=2,f+=i){const g=h,y=g+c,w=y+c,v=w+c,S=e[g],E=e[g+1],x=e[y],A=e[y+1],T=e[w],B=e[w+1],U=e[v],H=e[v+1],K=this.table[f],O=n*this.table[f+1],G=x*K-A*O,ne=x*O+A*K,q=this.table[2*f],D=n*this.table[2*f+1],L=T*q-B*D,V=T*D+B*q,te=this.table[3*f],X=n*this.table[3*f+1],ue=U*te-H*X,F=U*X+H*te,oe=S+L,$e=E+V,Ue=S-L,De=E-V,Ve=G+ue,St=ne+F,We=n*(G-ue),He=n*(ne-F);e[g]=oe+Ve,e[g+1]=$e+St,e[y]=Ue+He,e[y+1]=De-We,e[w]=oe-Ve,e[w+1]=$e-St,e[v]=Ue-He,e[v+1]=De+We}}}}_singleRealTransform2(e,r,n,a,i){const s=e[a],o=e[a+i];r[n]=s+o,r[n+1]=0,r[n+2]=s-o,r[n+3]=0}_singleRealTransform4(e,r,n,a,i,s){const o=i*2,l=i*3,d=e[a],c=e[a+i],u=e[a+o],h=e[a+l],f=d+u,g=d-u,y=c+h,w=s*(c-h);r[n]=f+y,r[n+1]=0,r[n+2]=g,r[n+3]=-w,r[n+4]=f-y,r[n+5]=0,r[n+6]=g,r[n+7]=w}}class Ig{constructor(e){const r=2*(e-1),n=2*(2*e-1),a=2**Math.ceil(Math.log2(n));this.bufferSize=a,this._a=r;const i=new Float64Array(n),s=new Float64Array(a);this._chirpBuffer=new Float64Array(a),this._buffer1=new Float64Array(a),this._buffer2=new Float64Array(a),this._outBuffer1=new Float64Array(a),this._outBuffer2=new Float64Array(a);const o=-2*Math.PI/e,l=Math.cos(o),d=Math.sin(o);for(let c=0;c<n>>1;++c){const u=(c+1-e)**2/2,h=Math.sqrt(l**2+d**2)**u,f=u*Math.atan2(d,l),g=2*c;i[g]=h*Math.cos(f),i[g+1]=h*Math.sin(f),s[g]=i[g],s[g+1]=-i[g+1]}this._slicedChirpBuffer=i.subarray(r,n),this._f=new Eo(a>>1),this._f.transform(this._chirpBuffer,s)}_transform(e,r,n){const a=this._buffer1,i=this._buffer2,s=this._outBuffer1,o=this._outBuffer2,l=this._chirpBuffer,d=this._slicedChirpBuffer,c=this._a;if(n)for(let u=0;u<d.length;u+=2){const h=u+1,f=u>>1,g=r[f];a[u]=g*d[u],a[h]=g*d[h]}else for(let u=0;u<d.length;u+=2){const h=u+1;a[u]=r[u]*d[u]-r[h]*d[h],a[h]=r[u]*d[h]+r[h]*d[u]}this._f.transform(s,a);for(let u=0;u<l.length;u+=2){const h=u+1;i[u]=s[u]*l[u]-s[h]*l[h],i[h]=s[u]*l[h]+s[h]*l[u]}this._f.inverseTransform(o,i);for(let u=0;u<o.length;u+=2){const h=o[u+c],f=o[u+c+1],g=d[u],y=d[u+1];e[u]=h*g-f*y,e[u+1]=h*y+f*g}}transform(e,r){this._transform(e,r,!1)}realTransform(e,r){this._transform(e,r,!0)}}class Tg{constructor(e){this.fft_length=e,this.isPowerOfTwo=ko(e),this.isPowerOfTwo?(this.fft=new Eo(e),this.outputBufferSize=2*e):(this.fft=new Ig(e),this.outputBufferSize=this.fft.bufferSize)}realTransform(e,r){this.fft.realTransform(e,r)}transform(e,r){this.fft.transform(e,r)}}function Og(t,e){if(e%2===0||e<=0)throw new Error("Window size must be a positive odd number");const r=new t.constructor(t.length),n=new t.constructor(e),a=Math.floor(e/2);for(let i=0;i<t.length;++i){let s=0;for(let o=-a;o<=a;++o){let l=i+o;l<0?l=Math.abs(l):l>=t.length&&(l=2*(t.length-1)-l),n[s++]=t[l]}n.sort(),r[i]=n[a]}return r}function nn(t,e){const r=Math.pow(10,e);return Math.round(t*r)/r}function Mg(t){const e=Math.round(t);return Math.abs(t)%1===.5?e%2===0?e:e-1:e}var Ai=Object.defineProperty,zg=Object.getOwnPropertyDescriptor,Bg=Object.getOwnPropertyNames,Rg=Object.prototype.hasOwnProperty,Q=(t,e)=>()=>(t&&(e=t(t=0)),e),Dr=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),Pr=(t,e)=>{for(var r in e)Ai(t,r,{get:e[r],enumerable:!0})},Dg=(t,e,r,n)=>{if(e&&typeof e=="object"||typeof e=="function")for(let a of Bg(e))!Rg.call(t,a)&&a!==r&&Ai(t,a,{get:()=>e[a],enumerable:!(n=zg(e,a))||n.enumerable});return t},yr=t=>Dg(Ai({},"__esModule",{value:!0}),t),an,lr,Nr,Ii,Ti=Q(()=>{an=new Map,lr=[],Nr=(t,e,r)=>{if(e&&typeof e.init=="function"&&typeof e.createInferenceSessionHandler=="function"){let n=an.get(t);if(n===void 0)an.set(t,{backend:e,priority:r});else{if(n.priority>r)return;if(n.priority===r&&n.backend!==e)throw new Error(`cannot register backend "${t}" using priority ${r}`)}if(r>=0){let a=lr.indexOf(t);a!==-1&&lr.splice(a,1);for(let i=0;i<lr.length;i++)if(an.get(lr[i]).priority<=r){lr.splice(i,0,t);return}lr.push(t)}return}throw new TypeError("not a valid backend")},Ii=async t=>{let e=t.length===0?lr:t,r=[];for(let n of e){let a=an.get(n);if(a){if(a.initialized)return a.backend;if(a.aborted)continue;let i=!!a.initPromise;try{return i||(a.initPromise=a.backend.init(n)),await a.initPromise,a.initialized=!0,a.backend}catch(s){i||r.push({name:n,err:s}),a.aborted=!0}finally{delete a.initPromise}}}throw new Error(`no available backend found. ERR: ${r.map(n=>`[${n.name}] ${n.err}`).join(", ")}`)}}),Pg=Q(()=>{Ti()}),Co,Ng=Q(()=>{Co="1.17.1"}),Oi,Ur,Ao=Q(()=>{Ng(),Oi="warning",Ur={wasm:{},webgl:{},webgpu:{},versions:{common:Co},set logLevel(t){if(t!==void 0){if(typeof t!="string"||["verbose","info","warning","error","fatal"].indexOf(t)===-1)throw new Error(`Unsupported logging level: ${t}`);Oi=t}},get logLevel(){return Oi}},Object.defineProperty(Ur,"logLevel",{enumerable:!0})}),Pe,Ug=Q(()=>{Ao(),Pe=Ur}),Io,To,Wg=Q(()=>{Io=(t,e)=>{let r=typeof document<"u"?document.createElement("canvas"):new OffscreenCanvas(1,1);r.width=t.dims[3],r.height=t.dims[2];let n=r.getContext("2d");if(n!=null){let a,i;e?.tensorLayout!==void 0&&e.tensorLayout==="NHWC"?(a=t.dims[2],i=t.dims[3]):(a=t.dims[3],i=t.dims[2]);let s=e?.format!==void 0?e.format:"RGB",o=e?.norm,l,d;o===void 0||o.mean===void 0?l=[255,255,255,255]:typeof o.mean=="number"?l=[o.mean,o.mean,o.mean,o.mean]:(l=[o.mean[0],o.mean[1],o.mean[2],0],o.mean[3]!==void 0&&(l[3]=o.mean[3])),o===void 0||o.bias===void 0?d=[0,0,0,0]:typeof o.bias=="number"?d=[o.bias,o.bias,o.bias,o.bias]:(d=[o.bias[0],o.bias[1],o.bias[2],0],o.bias[3]!==void 0&&(d[3]=o.bias[3]));let c=i*a,u=0,h=c,f=c*2,g=-1;s==="RGBA"?(u=0,h=c,f=c*2,g=c*3):s==="RGB"?(u=0,h=c,f=c*2):s==="RBG"&&(u=0,f=c,h=c*2);for(let y=0;y<i;y++)for(let w=0;w<a;w++){let v=(t.data[u++]-d[0])*l[0],S=(t.data[h++]-d[1])*l[1],E=(t.data[f++]-d[2])*l[2],x=g===-1?255:(t.data[g++]-d[3])*l[3];n.fillStyle="rgba("+v+","+S+","+E+","+x+")",n.fillRect(w,y,1,1)}if("toDataURL"in r)return r.toDataURL();throw new Error("toDataURL is not supported")}else throw new Error("Can not access image data")},To=(t,e)=>{let r=typeof document<"u"?document.createElement("canvas").getContext("2d"):new OffscreenCanvas(1,1).getContext("2d"),n;if(r!=null){let a,i,s;e?.tensorLayout!==void 0&&e.tensorLayout==="NHWC"?(a=t.dims[2],i=t.dims[1],s=t.dims[3]):(a=t.dims[3],i=t.dims[2],s=t.dims[1]);let o=e!==void 0&&e.format!==void 0?e.format:"RGB",l=e?.norm,d,c;l===void 0||l.mean===void 0?d=[255,255,255,255]:typeof l.mean=="number"?d=[l.mean,l.mean,l.mean,l.mean]:(d=[l.mean[0],l.mean[1],l.mean[2],255],l.mean[3]!==void 0&&(d[3]=l.mean[3])),l===void 0||l.bias===void 0?c=[0,0,0,0]:typeof l.bias=="number"?c=[l.bias,l.bias,l.bias,l.bias]:(c=[l.bias[0],l.bias[1],l.bias[2],0],l.bias[3]!==void 0&&(c[3]=l.bias[3]));let u=i*a;if(e!==void 0&&(e.format!==void 0&&s===4&&e.format!=="RGBA"||s===3&&e.format!=="RGB"&&e.format!=="BGR"))throw new Error("Tensor format doesn't match input tensor dims");let h=4,f=0,g=1,y=2,w=3,v=0,S=u,E=u*2,x=-1;o==="RGBA"?(v=0,S=u,E=u*2,x=u*3):o==="RGB"?(v=0,S=u,E=u*2):o==="RBG"&&(v=0,E=u,S=u*2),n=r.createImageData(a,i);for(let A=0;A<i*a;f+=h,g+=h,y+=h,w+=h,A++)n.data[f]=(t.data[v++]-c[0])*d[0],n.data[g]=(t.data[S++]-c[1])*d[1],n.data[y]=(t.data[E++]-c[2])*d[2],n.data[w]=x===-1?255:(t.data[x++]-c[3])*d[3]}else throw new Error("Can not access image data");return n}}),ha,Oo,Mo,zo,Bo,Lg=Q(()=>{zi(),ha=(t,e)=>{if(t===void 0)throw new Error("Image buffer must be defined");if(e.height===void 0||e.width===void 0)throw new Error("Image height and width must be defined");if(e.tensorLayout==="NHWC")throw new Error("NHWC Tensor layout is not supported yet");let{height:r,width:n}=e,a=e.norm??{mean:255,bias:0},i,s;typeof a.mean=="number"?i=[a.mean,a.mean,a.mean,a.mean]:i=[a.mean[0],a.mean[1],a.mean[2],a.mean[3]??255],typeof a.bias=="number"?s=[a.bias,a.bias,a.bias,a.bias]:s=[a.bias[0],a.bias[1],a.bias[2],a.bias[3]??0];let o=e.format!==void 0?e.format:"RGBA",l=e.tensorFormat!==void 0&&e.tensorFormat!==void 0?e.tensorFormat:"RGB",d=r*n,c=l==="RGBA"?new Float32Array(d*4):new Float32Array(d*3),u=4,h=0,f=1,g=2,y=3,w=0,v=d,S=d*2,E=-1;o==="RGB"&&(u=3,h=0,f=1,g=2,y=-1),l==="RGBA"?E=d*3:l==="RBG"?(w=0,S=d,v=d*2):l==="BGR"&&(S=0,v=d,w=d*2);for(let x=0;x<d;x++,h+=u,g+=u,f+=u,y+=u)c[w++]=(t[h]+s[0])/i[0],c[v++]=(t[f]+s[1])/i[1],c[S++]=(t[g]+s[2])/i[2],E!==-1&&y!==-1&&(c[E++]=(t[y]+s[3])/i[3]);return l==="RGBA"?new zt("float32",c,[1,4,r,n]):new zt("float32",c,[1,3,r,n])},Oo=async(t,e)=>{let r=typeof HTMLImageElement<"u"&&t instanceof HTMLImageElement,n=typeof ImageData<"u"&&t instanceof ImageData,a=typeof ImageBitmap<"u"&&t instanceof ImageBitmap,i=typeof t=="string",s,o=e??{},l=()=>{if(typeof document<"u")return document.createElement("canvas");if(typeof OffscreenCanvas<"u")return new OffscreenCanvas(1,1);throw new Error("Canvas is not supported")},d=c=>c instanceof HTMLCanvasElement||c instanceof OffscreenCanvas?c.getContext("2d"):null;if(r){let c=l();c.width=t.width,c.height=t.height;let u=d(c);if(u!=null){let h=t.height,f=t.width;if(e!==void 0&&e.resizedHeight!==void 0&&e.resizedWidth!==void 0&&(h=e.resizedHeight,f=e.resizedWidth),e!==void 0){if(o=e,e.tensorFormat!==void 0)throw new Error("Image input config format must be RGBA for HTMLImageElement");o.tensorFormat="RGBA",o.height=h,o.width=f}else o.tensorFormat="RGBA",o.height=h,o.width=f;u.drawImage(t,0,0),s=u.getImageData(0,0,f,h).data}else throw new Error("Can not access image data")}else if(n){let c,u;if(e!==void 0&&e.resizedWidth!==void 0&&e.resizedHeight!==void 0?(c=e.resizedHeight,u=e.resizedWidth):(c=t.height,u=t.width),e!==void 0&&(o=e),o.format="RGBA",o.height=c,o.width=u,e!==void 0){let h=l();h.width=u,h.height=c;let f=d(h);if(f!=null)f.putImageData(t,0,0),s=f.getImageData(0,0,u,c).data;else throw new Error("Can not access image data")}else s=t.data}else if(a){if(e===void 0)throw new Error("Please provide image config with format for Imagebitmap");let c=l();c.width=t.width,c.height=t.height;let u=d(c);if(u!=null){let h=t.height,f=t.width;return u.drawImage(t,0,0,f,h),s=u.getImageData(0,0,f,h).data,o.height=h,o.width=f,ha(s,o)}else throw new Error("Can not access image data")}else{if(i)return new Promise((c,u)=>{let h=l(),f=d(h);if(!t||!f)return u();let g=new Image;g.crossOrigin="Anonymous",g.src=t,g.onload=()=>{h.width=g.width,h.height=g.height,f.drawImage(g,0,0,h.width,h.height);let y=f.getImageData(0,0,h.width,h.height);o.height=h.height,o.width=h.width,c(ha(y.data,o))}});throw new Error("Input data provided is not supported - aborted tensor creation")}if(s!==void 0)return ha(s,o);throw new Error("Input data provided is not supported - aborted tensor creation")},Mo=(t,e)=>{let{width:r,height:n,download:a,dispose:i}=e,s=[1,n,r,4];return new zt({location:"texture",type:"float32",texture:t,dims:s,download:a,dispose:i})},zo=(t,e)=>{let{dataType:r,dims:n,download:a,dispose:i}=e;return new zt({location:"gpu-buffer",type:r??"float32",gpuBuffer:t,dims:n,download:a,dispose:i})},Bo=(t,e,r)=>new zt({location:"cpu-pinned",type:t,data:e,dims:r??[e.length]})}),sn,fa,Mi,Ro,Fg=Q(()=>{sn=new Map([["float32",Float32Array],["uint8",Uint8Array],["int8",Int8Array],["uint16",Uint16Array],["float16",Uint16Array],["int16",Int16Array],["int32",Int32Array],["bool",Uint8Array],["float64",Float64Array],["uint32",Uint32Array]]),fa=new Map([[Float32Array,"float32"],[Uint8Array,"uint8"],[Int8Array,"int8"],[Uint16Array,"uint16"],[Int16Array,"int16"],[Int32Array,"int32"],[Float64Array,"float64"],[Uint32Array,"uint32"]]),Mi=!1,Ro=()=>{if(!Mi){Mi=!0;let t=typeof BigInt64Array<"u"&&typeof BigInt64Array.from=="function",e=typeof BigUint64Array<"u"&&typeof BigUint64Array.from=="function";t&&(sn.set("int64",BigInt64Array),fa.set(BigInt64Array,"int64")),e&&(sn.set("uint64",BigUint64Array),fa.set(BigUint64Array,"uint64"))}}}),Do,Po,Vg=Q(()=>{zi(),Do=t=>{let e=1;for(let r=0;r<t.length;r++){let n=t[r];if(typeof n!="number"||!Number.isSafeInteger(n))throw new TypeError(`dims[${r}] must be an integer, got: ${n}`);if(n<0)throw new RangeError(`dims[${r}] must be a non-negative integer, got: ${n}`);e*=n}return e},Po=(t,e)=>{switch(t.location){case"cpu":return new zt(t.type,t.data,e);case"cpu-pinned":return new zt({location:"cpu-pinned",data:t.data,type:t.type,dims:e});case"texture":return new zt({location:"texture",texture:t.texture,type:t.type,dims:e});case"gpu-buffer":return new zt({location:"gpu-buffer",gpuBuffer:t.gpuBuffer,type:t.type,dims:e});default:throw new Error(`tensorReshape: tensor location ${t.location} is not supported`)}}}),zt,zi=Q(()=>{Wg(),Lg(),Fg(),Vg(),zt=class{constructor(t,e,r){Ro();let n,a;if(typeof t=="object"&&"location"in t)switch(this.dataLocation=t.location,n=t.type,a=t.dims,t.location){case"cpu-pinned":{let s=sn.get(n);if(!s)throw new TypeError(`unsupported type "${n}" to create tensor from pinned buffer`);if(!(t.data instanceof s))throw new TypeError(`buffer should be of type ${s.name}`);this.cpuData=t.data;break}case"texture":{if(n!=="float32")throw new TypeError(`unsupported type "${n}" to create tensor from texture`);this.gpuTextureData=t.texture,this.downloader=t.download,this.disposer=t.dispose;break}case"gpu-buffer":{if(n!=="float32"&&n!=="float16"&&n!=="int32"&&n!=="int64"&&n!=="uint32"&&n!=="bool")throw new TypeError(`unsupported type "${n}" to create tensor from gpu buffer`);this.gpuBufferData=t.gpuBuffer,this.downloader=t.download,this.disposer=t.dispose;break}default:throw new Error(`Tensor constructor: unsupported location '${this.dataLocation}'`)}else{let s,o;if(typeof t=="string")if(n=t,o=r,t==="string"){if(!Array.isArray(e))throw new TypeError("A string tensor's data must be a string array.");s=e}else{let l=sn.get(t);if(l===void 0)throw new TypeError(`Unsupported tensor type: ${t}.`);if(Array.isArray(e)){if(t==="float16")throw new TypeError("Creating a float16 tensor from number array is not supported. Please use Uint16Array as data.");t==="uint64"||t==="int64"?s=l.from(e,BigInt):s=l.from(e)}else if(e instanceof l)s=e;else throw new TypeError(`A ${n} tensor's data must be type of ${l}`)}else if(o=e,Array.isArray(t)){if(t.length===0)throw new TypeError("Tensor type cannot be inferred from an empty array.");let l=typeof t[0];if(l==="string")n="string",s=t;else if(l==="boolean")n="bool",s=Uint8Array.from(t);else throw new TypeError(`Invalid element type of data array: ${l}.`)}else{let l=fa.get(t.constructor);if(l===void 0)throw new TypeError(`Unsupported type for tensor data: ${t.constructor}.`);n=l,s=t}if(o===void 0)o=[s.length];else if(!Array.isArray(o))throw new TypeError("A tensor's dims must be a number array");a=o,this.cpuData=s,this.dataLocation="cpu"}let i=Do(a);if(this.cpuData&&i!==this.cpuData.length)throw new Error(`Tensor's size(${i}) does not match data length(${this.cpuData.length}).`);this.type=n,this.dims=a,this.size=i}static async fromImage(t,e){return Oo(t,e)}static fromTexture(t,e){return Mo(t,e)}static fromGpuBuffer(t,e){return zo(t,e)}static fromPinnedBuffer(t,e,r){return Bo(t,e,r)}toDataURL(t){return Io(this,t)}toImageData(t){return To(this,t)}get data(){if(this.ensureValid(),!this.cpuData)throw new Error("The data is not on CPU. Use `getData()` to download GPU data to CPU, or use `texture` or `gpuBuffer` property to access the GPU data directly.");return this.cpuData}get location(){return this.dataLocation}get texture(){if(this.ensureValid(),!this.gpuTextureData)throw new Error("The data is not stored as a WebGL texture.");return this.gpuTextureData}get gpuBuffer(){if(this.ensureValid(),!this.gpuBufferData)throw new Error("The data is not stored as a WebGPU buffer.");return this.gpuBufferData}async getData(t){switch(this.ensureValid(),this.dataLocation){case"cpu":case"cpu-pinned":return this.data;case"texture":case"gpu-buffer":{if(!this.downloader)throw new Error("The current tensor is not created with a specified data downloader.");if(this.isDownloading)throw new Error("The current tensor is being downloaded.");try{this.isDownloading=!0;let e=await this.downloader();return this.downloader=void 0,this.dataLocation="cpu",this.cpuData=e,t&&this.disposer&&(this.disposer(),this.disposer=void 0),e}finally{this.isDownloading=!1}}default:throw new Error(`cannot get data from location: ${this.dataLocation}`)}}dispose(){if(this.isDownloading)throw new Error("The current tensor is being downloaded.");this.disposer&&(this.disposer(),this.disposer=void 0),this.cpuData=void 0,this.gpuTextureData=void 0,this.gpuBufferData=void 0,this.downloader=void 0,this.isDownloading=void 0,this.dataLocation="none"}ensureValid(){if(this.dataLocation==="none")throw new Error("The tensor is disposed.")}reshape(t){if(this.ensureValid(),this.downloader||this.disposer)throw new Error("Cannot reshape a tensor that owns GPU resource.");return Po(this,t)}}}),ht,Bi=Q(()=>{zi(),ht=zt}),on,Ri,Bt,Rt,No=Q(()=>{Ao(),on=(t,e)=>{Ur.wasm.trace&&console.timeStamp(`${t}::ORT::${e}`)},Ri=(t,e)=>{let r=new Error().stack?.split(/\r\n|\r|\n/g)||[],n=!1;for(let a=0;a<r.length;a++){if(n&&!r[a].includes("TRACE_FUNC")){let i=`FUNC_${t}::${r[a].trim().split(" ")[1]}`;e&&(i+=`::${e}`),on("CPU",i);return}r[a].includes("TRACE_FUNC")&&(n=!0)}},Bt=t=>{Ur.wasm.trace&&Ri("BEGIN",t)},Rt=t=>{Ur.wasm.trace&&Ri("END",t)}}),Uo,Hg=Q(()=>{Ti(),Bi(),No(),Uo=class ug{constructor(e){this.handler=e}async run(e,r,n){Bt();let a={},i={};if(typeof e!="object"||e===null||e instanceof ht||Array.isArray(e))throw new TypeError("'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.");let s=!0;if(typeof r=="object"){if(r===null)throw new TypeError("Unexpected argument[1]: cannot be null.");if(r instanceof ht)throw new TypeError("'fetches' cannot be a Tensor");if(Array.isArray(r)){if(r.length===0)throw new TypeError("'fetches' cannot be an empty array.");s=!1;for(let d of r){if(typeof d!="string")throw new TypeError("'fetches' must be a string array or an object.");if(this.outputNames.indexOf(d)===-1)throw new RangeError(`'fetches' contains invalid output name: ${d}.`);a[d]=null}if(typeof n=="object"&&n!==null)i=n;else if(typeof n<"u")throw new TypeError("'options' must be an object.")}else{let d=!1,c=Object.getOwnPropertyNames(r);for(let u of this.outputNames)if(c.indexOf(u)!==-1){let h=r[u];(h===null||h instanceof ht)&&(d=!0,s=!1,a[u]=h)}if(d){if(typeof n=="object"&&n!==null)i=n;else if(typeof n<"u")throw new TypeError("'options' must be an object.")}else i=r}}else if(typeof r<"u")throw new TypeError("Unexpected argument[1]: must be 'fetches' or 'options'.");for(let d of this.inputNames)if(typeof e[d]>"u")throw new Error(`input '${d}' is missing in 'feeds'.`);if(s)for(let d of this.outputNames)a[d]=null;let o=await this.handler.run(e,a,i),l={};for(let d in o)if(Object.hasOwnProperty.call(o,d)){let c=o[d];c instanceof ht?l[d]=c:l[d]=new ht(c.type,c.data,c.dims)}return Rt(),l}async release(){return this.handler.dispose()}static async create(e,r,n,a){Bt();let i,s={};if(typeof e=="string"){if(i=e,typeof r=="object"&&r!==null)s=r;else if(typeof r<"u")throw new TypeError("'options' must be an object.")}else if(e instanceof Uint8Array){if(i=e,typeof r=="object"&&r!==null)s=r;else if(typeof r<"u")throw new TypeError("'options' must be an object.")}else if(e instanceof ArrayBuffer||typeof SharedArrayBuffer<"u"&&e instanceof SharedArrayBuffer){let d=e,c=0,u=e.byteLength;if(typeof r=="object"&&r!==null)s=r;else if(typeof r=="number"){if(c=r,!Number.isSafeInteger(c))throw new RangeError("'byteOffset' must be an integer.");if(c<0||c>=d.byteLength)throw new RangeError(`'byteOffset' is out of range [0, ${d.byteLength}).`);if(u=e.byteLength-c,typeof n=="number"){if(u=n,!Number.isSafeInteger(u))throw new RangeError("'byteLength' must be an integer.");if(u<=0||c+u>d.byteLength)throw new RangeError(`'byteLength' is out of range (0, ${d.byteLength-c}].`);if(typeof a=="object"&&a!==null)s=a;else if(typeof a<"u")throw new TypeError("'options' must be an object.")}else if(typeof n<"u")throw new TypeError("'byteLength' must be a number.")}else if(typeof r<"u")throw new TypeError("'options' must be an object.");i=new Uint8Array(d,c,u)}else throw new TypeError("Unexpected argument[0]: must be 'path' or 'buffer'.");let o=(s.executionProviders||[]).map(d=>typeof d=="string"?d:d.name),l=await(await Ii(o)).createInferenceSessionHandler(i,s);return Rt(),new ug(l)}startProfiling(){this.handler.startProfiling()}endProfiling(){this.handler.endProfiling()}get inputNames(){return this.handler.inputNames}get outputNames(){return this.handler.outputNames}}}),Di,Gg=Q(()=>{Hg(),Di=Uo}),qg=Q(()=>{}),Wo,Lo,jg=Q(()=>{Ti(),Bi(),Wo="Training backend could not be resolved. Make sure you're using the correct configuration & WebAssembly files.",Lo=class dg{constructor(e,r,n){this.handler=e,this.hasOptimizerModel=r,this.hasEvalModel=n}get trainingInputNames(){return this.handler.inputNames}get trainingOutputNames(){return this.handler.outputNames}get evalInputNames(){if(this.hasEvalModel)return this.handler.evalInputNames;throw new Error("This training session has no evalModel loaded.")}get evalOutputNames(){if(this.hasEvalModel)return this.handler.evalOutputNames;throw new Error("This training session has no evalModel loaded.")}static async create(e,r){let n=e.evalModel||"",a=e.optimizerModel||"",i=r||{},s=(i.executionProviders||[]).map(l=>typeof l=="string"?l:l.name),o=await Ii(s);if(o.createTrainingSessionHandler){let l=await o.createTrainingSessionHandler(e.checkpointState,e.trainModel,n,a,i);return new dg(l,!!e.optimizerModel,!!e.evalModel)}else throw new Error(Wo)}typeNarrowingForRunStep(e,r,n,a,i){let s={},o={};if(typeof n!="object"||n===null||n instanceof ht||Array.isArray(n))throw new TypeError("'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.");let l=!0;if(typeof a=="object"){if(a===null)throw new TypeError("Unexpected argument[1]: cannot be null.");if(a instanceof ht)throw new TypeError("'fetches' cannot be a Tensor");if(Array.isArray(a)){if(a.length===0)throw new TypeError("'fetches' cannot be an empty array.");l=!1;for(let d of a){if(typeof d!="string")throw new TypeError("'fetches' must be a string array or an object.");if(r.indexOf(d)===-1)throw new RangeError(`'fetches' contains invalid output name: ${d}.`);s[d]=null}if(typeof i=="object"&&i!==null)o=i;else if(typeof i<"u")throw new TypeError("'options' must be an object.")}else{let d=!1,c=Object.getOwnPropertyNames(a);for(let u of r)if(c.indexOf(u)!==-1){let h=a[u];(h===null||h instanceof ht)&&(d=!0,l=!1,s[u]=h)}if(d){if(typeof i=="object"&&i!==null)o=i;else if(typeof i<"u")throw new TypeError("'options' must be an object.")}else o=a}}else if(typeof a<"u")throw new TypeError("Unexpected argument[1]: must be 'fetches' or 'options'.");for(let d of e)if(typeof n[d]>"u")throw new Error(`input '${d}' is missing in 'feeds'.`);if(l)for(let d of r)s[d]=null;return[s,o]}convertHandlerReturnTypeToMapOfTensors(e){let r={};for(let n in e)if(Object.hasOwnProperty.call(e,n)){let a=e[n];a instanceof ht?r[n]=a:r[n]=new ht(a.type,a.data,a.dims)}return r}async lazyResetGrad(){await this.handler.lazyResetGrad()}async runTrainStep(e,r,n){let[a,i]=this.typeNarrowingForRunStep(this.trainingInputNames,this.trainingOutputNames,e,r,n),s=await this.handler.runTrainStep(e,a,i);return this.convertHandlerReturnTypeToMapOfTensors(s)}async runOptimizerStep(e){if(this.hasOptimizerModel)await this.handler.runOptimizerStep(e||{});else throw new Error("This TrainingSession has no OptimizerModel loaded.")}async runEvalStep(e,r,n){if(this.hasEvalModel){let[a,i]=this.typeNarrowingForRunStep(this.evalInputNames,this.evalOutputNames,e,r,n),s=await this.handler.runEvalStep(e,a,i);return this.convertHandlerReturnTypeToMapOfTensors(s)}else throw new Error("This TrainingSession has no EvalModel loaded.")}async getParametersSize(e=!0){return this.handler.getParametersSize(e)}async loadParametersBuffer(e,r=!0){let n=await this.getParametersSize(r);if(e.length!==4*n)throw new Error("Size of the buffer passed into loadParametersBuffer must match the number of parameters in the model. Please use getParametersSize method to check.");return this.handler.loadParametersBuffer(e,r)}async getContiguousParameters(e=!0){return this.handler.getContiguousParameters(e)}async release(){return this.handler.dispose()}}}),Pi,Kg=Q(()=>{jg(),Pi=Lo}),Fo={};Pr(Fo,{InferenceSession:()=>Di,TRACE:()=>on,TRACE_FUNC_BEGIN:()=>Bt,TRACE_FUNC_END:()=>Rt,Tensor:()=>ht,TrainingSession:()=>Pi,env:()=>Pe,registerBackend:()=>Nr});var Dt=Q(()=>{Pg(),Ug(),Gg(),Bi(),No(),qg(),Kg()}),Ni={};Pr(Ni,{createReadStream:()=>Go,readFile:()=>Vo,readFileSync:()=>Ho});var Vo,Ho,Go,qo=Q(()=>{Vo=void 0,Ho=void 0,Go=void 0}),Ui={};Pr(Ui,{join:()=>jo});var jo,Ko=Q(()=>{jo=void 0}),Yg=Dr((t,e)=>{var r=(()=>{var n=typeof document<"u"&&document.currentScript?document.currentScript.src:void 0;return typeof __filename<"u"&&(n=n||__filename),function(a={}){var i=a,s,o;i.ready=new Promise((m,b)=>{s=m,o=b}),i.mountExternalData=(m,b)=>{(i.Fa||(i.Fa=new Map)).set(m,b)},i.unmountExternalData=()=>{delete i.Fa},i.jsepInit=(m,b,k,I,P,Y,ae,ye)=>{i.ab=m,i.Qa=b,i.Sa=k,i.La=I,i.Ra=P,i.sa=Y,i.Ta=ae,i.Ua=ye,b=(le,de,ge)=>(...Ee)=>{let ze=kt,z=de?.();Ee=le(...Ee);let _e=de?.();return z!==_e&&(le=_e,ge(z),de=ge=null),kt!=ze?ui():Ee},k=le=>async(...de)=>{try{if(i.Ea)throw Error("Session already started");let ge=i.Ea={Va:de[0],errors:[]},Ee=await le(...de);if(i.Ea!==ge)throw Error("Session mismatch");m.flush();let ze=ge.errors;if(0<ze.length){let z=await Promise.all(ze);if(z=z.filter(_e=>_e),0<z.length)throw Error(z.join(`
`))}return Ee}finally{i.Ea=null}},i._OrtRun=k(b(i._OrtRun,()=>i._OrtRun,le=>i._OrtRun=le)),i._OrtRunWithBinding=k(b(i._OrtRunWithBinding,()=>i._OrtRunWithBinding,le=>i._OrtRunWithBinding=le)),i._OrtBindInput=b(i._OrtBindInput,()=>i._OrtBindInput,le=>i._OrtBindInput=le),i.jsepRegisterBuffer=(le,de,ge,Ee)=>m.registerBuffer(le,de,ge,Ee),i.jsepUnregisterBuffers=le=>{m.unregisterBuffers(le)},i.jsepGetBuffer=le=>m.getBuffer(le),i.jsepCreateDownloader=(le,de,ge)=>m.createDownloader(le,de,ge)};var l=Object.assign({},i),d="./this.program",c=(m,b)=>{throw b},u=typeof window=="object",h=typeof importScripts=="function",f=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string",g="",y,w,v;if(f){var S=(qo(),yr(Ni)),E=(Ko(),yr(Ui));g=h?E.dirname(g)+"/":__dirname+"/",y=(m,b)=>(m=$e(m)?new URL(m):E.normalize(m),S.readFileSync(m,b?void 0:"utf8")),v=m=>(m=y(m,!0),m.buffer||(m=new Uint8Array(m)),m),w=(m,b,k,I=!0)=>{m=$e(m)?new URL(m):E.normalize(m),S.readFile(m,I?void 0:"utf8",(P,Y)=>{P?k(P):b(I?Y.buffer:Y)})},!i.thisProgram&&1<process.argv.length&&(d=process.argv[1].replace(/\\/g,"/")),process.argv.slice(2),c=(m,b)=>{throw process.exitCode=m,b},i.inspect=()=>"[Emscripten Module object]"}else(u||h)&&(h?g=self.location.href:typeof document<"u"&&document.currentScript&&(g=document.currentScript.src),n&&(g=n),g.indexOf("blob:")!==0?g=g.substr(0,g.replace(/[?#].*/,"").lastIndexOf("/")+1):g="",y=m=>{var b=new XMLHttpRequest;return b.open("GET",m,!1),b.send(null),b.responseText},h&&(v=m=>{var b=new XMLHttpRequest;return b.open("GET",m,!1),b.responseType="arraybuffer",b.send(null),new Uint8Array(b.response)}),w=(m,b,k)=>{var I=new XMLHttpRequest;I.open("GET",m,!0),I.responseType="arraybuffer",I.onload=()=>{I.status==200||I.status==0&&I.response?b(I.response):k()},I.onerror=k,I.send(null)});var x=console.log.bind(console),A=console.error.bind(console);Object.assign(i,l),l=null,typeof WebAssembly!="object"&&F("no native wasm support detected");var T,B=!1,U,H,K,O,G,ne,q;function D(){var m=T.buffer;i.HEAP8=H=new Int8Array(m),i.HEAP16=new Int16Array(m),i.HEAPU8=K=new Uint8Array(m),i.HEAPU16=new Uint16Array(m),i.HEAP32=O=new Int32Array(m),i.HEAPU32=G=new Uint32Array(m),i.HEAPF32=ne=new Float32Array(m),i.HEAPF64=q=new Float64Array(m)}var L=[],V=[],te=[],X=0,ue=null;function F(m){throw m="Aborted("+m+")",A(m),B=!0,U=1,m=new WebAssembly.RuntimeError(m+". Build with -sASSERTIONS for more info."),o(m),m}var oe=m=>m.startsWith("data:application/octet-stream;base64,"),$e=m=>m.startsWith("file://"),Ue;if(Ue="ort-wasm-simd.wasm",!oe(Ue)){var De=Ue;Ue=i.locateFile?i.locateFile(De,g):g+De}function Ve(m){if(v)return v(m);throw"both async and sync fetching of the wasm failed"}function St(m){if(u||h){if(typeof fetch=="function"&&!$e(m))return fetch(m,{credentials:"same-origin"}).then(b=>{if(!b.ok)throw"failed to load wasm binary file at '"+m+"'";return b.arrayBuffer()}).catch(()=>Ve(m));if(w)return new Promise((b,k)=>{w(m,I=>b(new Uint8Array(I)),k)})}return Promise.resolve().then(()=>Ve(m))}function We(m,b,k){return St(m).then(I=>WebAssembly.instantiate(I,b)).then(I=>I).then(k,I=>{A(`failed to asynchronously prepare wasm: ${I}`),F(I)})}function He(m,b){var k=Ue;return typeof WebAssembly.instantiateStreaming!="function"||oe(k)||$e(k)||f||typeof fetch!="function"?We(k,m,b):fetch(k,{credentials:"same-origin"}).then(I=>WebAssembly.instantiateStreaming(I,m).then(b,function(P){return A(`wasm streaming compile failed: ${P}`),A("falling back to ArrayBuffer instantiation"),We(k,m,b)}))}var Ot,Mt={931056:(m,b,k,I)=>{if(typeof i>"u"||!i.Fa)return 1;if(m=et(m>>>0),m.startsWith("./")&&(m=m.substring(2)),m=i.Fa.get(m),!m)return 2;if(b>>>=0,k>>>=0,b+k>m.byteLength)return 3;try{return K.set(m.subarray(b,b+k),I>>>0>>>0),0}catch{return 4}},931557:m=>i.Qa(m),931590:m=>i.Sa(m),931622:(m,b,k)=>{i.La(m,b,k,!0)},931661:(m,b,k)=>{i.La(m,b,k)},931694:m=>{i.sa("Abs",m,void 0)},931745:m=>{i.sa("Neg",m,void 0)},931796:m=>{i.sa("Floor",m,void 0)},931849:m=>{i.sa("Ceil",m,void 0)},931901:m=>{i.sa("Reciprocal",m,void 0)},931959:m=>{i.sa("Sqrt",m,void 0)},932011:m=>{i.sa("Exp",m,void 0)},932062:m=>{i.sa("Erf",m,void 0)},932113:m=>{i.sa("Sigmoid",m,void 0)},932168:m=>{i.sa("Log",m,void 0)},932219:m=>{i.sa("Sin",m,void 0)},932270:m=>{i.sa("Cos",m,void 0)},932321:m=>{i.sa("Tan",m,void 0)},932372:m=>{i.sa("Asin",m,void 0)},932424:m=>{i.sa("Acos",m,void 0)},932476:m=>{i.sa("Atan",m,void 0)},932528:m=>{i.sa("Sinh",m,void 0)},932580:m=>{i.sa("Cosh",m,void 0)},932632:m=>{i.sa("Asinh",m,void 0)},932685:m=>{i.sa("Acosh",m,void 0)},932738:m=>{i.sa("Atanh",m,void 0)},932791:m=>{i.sa("Tanh",m,void 0)},932843:m=>{i.sa("Not",m,void 0)},932894:(m,b,k)=>{i.sa("Clip",m,{min:b,max:k})},932963:m=>{i.sa("Clip",m,void 0)},933015:(m,b)=>{i.sa("Elu",m,{alpha:b})},933073:m=>{i.sa("Relu",m,void 0)},933125:(m,b)=>{i.sa("LeakyRelu",m,{alpha:b})},933189:(m,b)=>{i.sa("ThresholdedRelu",m,{alpha:b})},933259:(m,b)=>{i.sa("Cast",m,{to:b})},933317:m=>{i.sa("Add",m,void 0)},933368:m=>{i.sa("Sub",m,void 0)},933419:m=>{i.sa("Mul",m,void 0)},933470:m=>{i.sa("Div",m,void 0)},933521:m=>{i.sa("Pow",m,void 0)},933572:m=>{i.sa("Equal",m,void 0)},933625:m=>{i.sa("Greater",m,void 0)},933680:m=>{i.sa("GreaterOrEqual",m,void 0)},933742:m=>{i.sa("Less",m,void 0)},933794:m=>{i.sa("LessOrEqual",m,void 0)},933853:(m,b,k,I,P)=>{i.sa("ReduceMean",m,{keepDims:!!b,noopWithEmptyAxes:!!k,axes:I?Array.from(O.subarray(I>>>0,P>>>0)):[]})},934012:(m,b,k,I,P)=>{i.sa("ReduceMax",m,{keepDims:!!b,noopWithEmptyAxes:!!k,axes:I?Array.from(O.subarray(I>>>0,P>>>0)):[]})},934170:(m,b,k,I,P)=>{i.sa("ReduceMin",m,{keepDims:!!b,noopWithEmptyAxes:!!k,axes:I?Array.from(O.subarray(I>>>0,P>>>0)):[]})},934328:(m,b,k,I,P)=>{i.sa("ReduceProd",m,{keepDims:!!b,noopWithEmptyAxes:!!k,axes:I?Array.from(O.subarray(I>>>0,P>>>0)):[]})},934487:(m,b,k,I,P)=>{i.sa("ReduceSum",m,{keepDims:!!b,noopWithEmptyAxes:!!k,axes:I?Array.from(O.subarray(I>>>0,P>>>0)):[]})},934645:(m,b,k,I,P)=>{i.sa("ReduceL1",m,{keepDims:!!b,noopWithEmptyAxes:!!k,axes:I?Array.from(O.subarray(I>>>0,P>>>0)):[]})},934802:(m,b,k,I,P)=>{i.sa("ReduceL2",m,{keepDims:!!b,noopWithEmptyAxes:!!k,axes:I?Array.from(O.subarray(I>>>0,P>>>0)):[]})},934959:(m,b,k,I,P)=>{i.sa("ReduceLogSum",m,{keepDims:!!b,noopWithEmptyAxes:!!k,axes:I?Array.from(O.subarray(I>>>0,P>>>0)):[]})},935120:(m,b,k,I,P)=>{i.sa("ReduceSumSquare",m,{keepDims:!!b,noopWithEmptyAxes:!!k,axes:I?Array.from(O.subarray(I>>>0,P>>>0)):[]})},935284:(m,b,k,I,P)=>{i.sa("ReduceLogSumExp",m,{keepDims:!!b,noopWithEmptyAxes:!!k,axes:I?Array.from(O.subarray(I>>>0,P>>>0)):[]})},935448:m=>{i.sa("Where",m,void 0)},935501:(m,b,k)=>{i.sa("Transpose",m,{perm:b?Array.from(O.subarray(b>>>0,k>>>0)):[]})},935609:(m,b,k,I,P,Y,ae,ye,le,de,ge,Ee,ze,z,_e)=>{i.sa("ConvTranspose",m,{format:le?"NHWC":"NCHW",autoPad:b,dilations:[k],group:I,kernel_shape:[P],pads:[Y,ae],strides:[ye],wIsConst:()=>!!H[de>>>0],outputPadding:ge?Array.from(O.subarray(ge>>>0,Ee>>>0)):[],outputShape:ze?Array.from(O.subarray(ze>>>0,z>>>0)):[],activation:et(_e)})},936011:(m,b,k,I,P,Y,ae,ye,le,de,ge,Ee,ze,z)=>{i.sa("ConvTranspose",m,{format:ye?"NHWC":"NCHW",autoPad:b,dilations:Array.from(O.subarray(k>>>0,(k>>>0)+2>>>0)),group:I,kernelShape:Array.from(O.subarray(P>>>0,(P>>>0)+2>>>0)),pads:Array.from(O.subarray(Y>>>0,(Y>>>0)+4>>>0)),strides:Array.from(O.subarray(ae>>>0,(ae>>>0)+2>>>0)),wIsConst:()=>!!H[le>>>0],outputPadding:de?Array.from(O.subarray(de>>>0,ge>>>0)):[],outputShape:Ee?Array.from(O.subarray(Ee>>>0,ze>>>0)):[],activation:et(z)})},936576:(m,b,k,I,P,Y,ae,ye,le,de,ge,Ee,ze,z,_e)=>{i.sa("ConvTranspose",m,{format:le?"NHWC":"NCHW",autoPad:b,dilations:[k],group:I,kernel_shape:[P],pads:[Y,ae],strides:[ye],wIsConst:()=>!!H[de>>>0],outputPadding:ge?Array.from(O.subarray(ge>>>0,Ee>>>0)):[],outputShape:ze?Array.from(O.subarray(ze>>>0,z>>>0)):[],activation:et(_e)})},936978:(m,b,k,I,P,Y,ae,ye,le,de,ge,Ee,ze,z)=>{i.sa("ConvTranspose",m,{format:ye?"NHWC":"NCHW",autoPad:b,dilations:Array.from(O.subarray(k>>>0,(k>>>0)+2>>>0)),group:I,kernelShape:Array.from(O.subarray(P>>>0,(P>>>0)+2>>>0)),pads:Array.from(O.subarray(Y>>>0,(Y>>>0)+4>>>0)),strides:Array.from(O.subarray(ae>>>0,(ae>>>0)+2>>>0)),wIsConst:()=>!!H[le>>>0],outputPadding:de?Array.from(O.subarray(de>>>0,ge>>>0)):[],outputShape:Ee?Array.from(O.subarray(Ee>>>0,ze>>>0)):[],activation:et(z)})},937543:(m,b)=>{i.sa("GlobalAveragePool",m,{format:b?"NHWC":"NCHW"})},937634:(m,b,k,I,P,Y,ae,ye,le,de,ge,Ee,ze,z,_e,Ie)=>{i.sa("AveragePool",m,{format:Ie?"NHWC":"NCHW",auto_pad:b,ceil_mode:k,count_include_pad:I,storage_order:P,dilations:[Y,ae],kernel_shape:[ye,le],pads:[de,ge,Ee,ze],strides:[z,_e]})},937918:(m,b)=>{i.sa("GlobalAveragePool",m,{format:b?"NHWC":"NCHW"})},938009:(m,b,k,I,P,Y,ae,ye,le,de,ge,Ee,ze,z,_e,Ie)=>{i.sa("AveragePool",m,{format:Ie?"NHWC":"NCHW",auto_pad:b,ceil_mode:k,count_include_pad:I,storage_order:P,dilations:[Y,ae],kernel_shape:[ye,le],pads:[de,ge,Ee,ze],strides:[z,_e]})},938293:(m,b)=>{i.sa("GlobalMaxPool",m,{format:b?"NHWC":"NCHW"})},938380:(m,b,k,I,P,Y,ae,ye,le,de,ge,Ee,ze,z,_e,Ie)=>{i.sa("MaxPool",m,{format:Ie?"NHWC":"NCHW",auto_pad:b,ceil_mode:k,count_include_pad:I,storage_order:P,dilations:[Y,ae],kernel_shape:[ye,le],pads:[de,ge,Ee,ze],strides:[z,_e]})},938660:(m,b)=>{i.sa("GlobalMaxPool",m,{format:b?"NHWC":"NCHW"})},938747:(m,b,k,I,P,Y,ae,ye,le,de,ge,Ee,ze,z,_e,Ie)=>{i.sa("MaxPool",m,{format:Ie?"NHWC":"NCHW",auto_pad:b,ceil_mode:k,count_include_pad:I,storage_order:P,dilations:[Y,ae],kernel_shape:[ye,le],pads:[de,ge,Ee,ze],strides:[z,_e]})},939027:(m,b,k,I,P)=>{i.sa("Gemm",m,{alpha:b,beta:k,transA:I,transB:P})},939131:m=>{i.sa("MatMul",m,void 0)},939185:(m,b,k,I)=>{i.sa("ArgMax",m,{keepDims:!!b,selectLastIndex:!!k,axis:I})},939293:(m,b,k,I)=>{i.sa("ArgMin",m,{keepDims:!!b,selectLastIndex:!!k,axis:I})},939401:(m,b)=>{i.sa("Softmax",m,{axis:b})},939464:(m,b)=>{i.sa("Concat",m,{axis:b})},939524:(m,b,k,I,P)=>{i.sa("Split",m,{axis:b,numOutputs:k,splitSizes:I?Array.from(O.subarray(I>>>0,P>>>0)):[]})},939664:m=>{i.sa("Expand",m,void 0)},939718:(m,b)=>{i.sa("Gather",m,{axis:Number(b)})},939789:(m,b)=>{i.sa("GatherElements",m,{axis:Number(b)})},939868:(m,b,k,I,P,Y,ae,ye,le,de,ge)=>{i.sa("Resize",m,{antialias:b,axes:k?Array.from(O.subarray(k>>>0,I>>>0)):[],coordinateTransformMode:et(P),cubicCoeffA:Y,excludeOutside:ae,extrapolationValue:ye,keepAspectRatioPolicy:et(le),mode:et(de),nearestMode:et(ge)})},940214:(m,b,k,I,P,Y,ae)=>{i.sa("Slice",m,{starts:b?Array.from(O.subarray(b>>>0,k>>>0)):[],ends:I?Array.from(O.subarray(I>>>0,P>>>0)):[],axes:Y?Array.from(O.subarray(Y>>>0,ae>>>0)):[]})},940430:m=>{i.sa("Tile",m,void 0)},940482:(m,b,k)=>{i.sa("LayerNormalization",m,{axis:Number(b),epsilon:Number(k)})},940589:(m,b,k)=>{i.sa("InstanceNormalization",m,{epsilon:b,format:k?"NHWC":"NCHW"})},940703:(m,b,k)=>{i.sa("InstanceNormalization",m,{epsilon:b,format:k?"NHWC":"NCHW"})},940817:m=>{i.sa("Range",m,void 0)},940870:(m,b)=>{i.sa("Einsum",m,{equation:et(b)})},940951:(m,b,k,I,P)=>{i.sa("Pad",m,{mode:b,value:k,pads:I?Array.from(O.subarray(I>>>0,P>>>0)):[]})},941078:(m,b,k,I,P,Y)=>{i.sa("BatchNormalization",m,{epsilon:b,momentum:k,spatial:!!P,trainingMode:!!I,format:Y?"NHWC":"NCHW"})},941247:(m,b,k,I,P,Y)=>{i.sa("BatchNormalization",m,{epsilon:b,momentum:k,spatial:!!P,trainingMode:!!I,format:Y?"NHWC":"NCHW"})},941416:(m,b,k)=>{i.sa("CumSum",m,{exclusive:Number(b),reverse:Number(k)})},941513:(m,b,k,I,P,Y,ae,ye,le)=>{i.sa("Attention",m,{numHeads:b,isUnidirectional:k,maskFilterValue:I,scale:P,doRotary:Y,qkvHiddenSizes:ae?Array.from(O.subarray(Number(ye)>>>0,Number(ye)+ae>>>0)):[],pastPresentShareBuffer:!!le})},941785:m=>{i.sa("Gelu",m,void 0)},941837:(m,b,k,I,P,Y)=>{i.sa("MultiHeadAttention",m,{numHeads:b,isUnidirectional:k,maskFilterValue:I,scale:P,doRotary:Y})},941996:m=>{i.sa("BiasAdd",m,void 0)},942051:m=>{i.sa("BiasSplitGelu",m,void 0)},942112:(m,b)=>{i.sa("SkipLayerNormalization",m,{epsilon:b})},942193:(m,b,k,I,P,Y,ae,ye,le,de,ge,Ee,ze)=>{i.sa("Conv",m,{format:le?"NHWC":"NCHW",auto_pad:b,dilations:[k],group:I,kernel_shape:[P],pads:Y?Array.from(O.subarray(Y>>>0,ae>>>0)):[],strides:[ye],w_is_const:()=>!!H[de>>>0],activation:et(ge),activation_params:Ee?Array.from(ne.subarray(Ee>>>0,ze>>>0)):[]})},942563:(m,b,k,I,P,Y,ae,ye,le,de,ge,Ee,ze,z,_e,Ie)=>{i.sa("Conv",m,{format:Ee?"NHWC":"NCHW",auto_pad:b,dilations:[k,I],group:P,kernel_shape:[Y,ae],pads:ye?Array.from(O.subarray(ye>>>0,le>>>0)):[],strides:[de,ge],w_is_const:()=>!!H[ze>>>0],activation:et(z),activation_params:_e?Array.from(ne.subarray(_e>>>0,Ie>>>0)):[]})},942954:m=>{i.Ta(m)},942988:(m,b)=>i.Ua(m,b,i.Ea.Va,i.Ea.errors)};function Gt(m){this.name="ExitStatus",this.message=`Program terminated with exit(${m})`,this.status=m}function ni(m){this.Ja=m-24,this.Oa=function(b){G[this.Ja+4>>>2>>>0]=b},this.Na=function(b){G[this.Ja+8>>>2>>>0]=b},this.$a=function(b,k){this.Ma(),this.Oa(b),this.Na(k)},this.Ma=function(){G[this.Ja+16>>>2>>>0]=0}}var fr=0,qn=typeof TextDecoder<"u"?new TextDecoder("utf8"):void 0,Ar=(m,b,k)=>{b>>>=0;var I=b+k;for(k=b;m[k]&&!(k>=I);)++k;if(16<k-b&&m.buffer&&qn)return qn.decode(m.subarray(b,k));for(I="";b<k;){var P=m[b++];if(P&128){var Y=m[b++]&63;if((P&224)==192)I+=String.fromCharCode((P&31)<<6|Y);else{var ae=m[b++]&63;P=(P&240)==224?(P&15)<<12|Y<<6|ae:(P&7)<<18|Y<<12|ae<<6|m[b++]&63,65536>P?I+=String.fromCharCode(P):(P-=65536,I+=String.fromCharCode(55296|P>>10,56320|P&1023))}}else I+=String.fromCharCode(P)}return I},et=(m,b)=>(m>>>=0)?Ar(K,m,b):"",Xr=m=>{for(var b=0,k=0;k<m.length;++k){var I=m.charCodeAt(k);127>=I?b++:2047>=I?b+=2:55296<=I&&57343>=I?(b+=4,++k):b+=3}return b},jn=(m,b,k,I)=>{if(k>>>=0,!(0<I))return 0;var P=k;I=k+I-1;for(var Y=0;Y<m.length;++Y){var ae=m.charCodeAt(Y);if(55296<=ae&&57343>=ae){var ye=m.charCodeAt(++Y);ae=65536+((ae&1023)<<10)|ye&1023}if(127>=ae){if(k>=I)break;b[k++>>>0]=ae}else{if(2047>=ae){if(k+1>=I)break;b[k++>>>0]=192|ae>>6}else{if(65535>=ae){if(k+2>=I)break;b[k++>>>0]=224|ae>>12}else{if(k+3>=I)break;b[k++>>>0]=240|ae>>18,b[k++>>>0]=128|ae>>12&63}b[k++>>>0]=128|ae>>6&63}b[k++>>>0]=128|ae&63}}return b[k>>>0]=0,k-P},sr=m=>m%4===0&&(m%100!==0||m%400===0),ai=[0,31,60,91,121,152,182,213,244,274,305,335],or=[0,31,59,90,120,151,181,212,243,273,304,334],Qr=m=>{var b=Xr(m)+1,k=rn(b);return k&&jn(m,K,k,b),k},Ir=[],Zr=(m,b)=>{Ir.length=0;for(var k;k=K[m++>>>0];){var I=k!=105;I&=k!=112,b+=I&&b%8?4:0,Ir.push(k==112?G[b>>>2>>>0]:k==105?O[b>>>2>>>0]:q[b>>>3>>>0]),b+=I?8:4}return Ir},Jr={},Zt=()=>{if(!en){var m={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:(typeof navigator=="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:d||"./this.program"},b;for(b in Jr)Jr[b]===void 0?delete m[b]:m[b]=Jr[b];var k=[];for(b in m)k.push(`${b}=${m[b]}`);en=k}return en},en,ii=[null,[],[]],ot=[31,29,31,30,31,30,31,31,30,31,30,31],si=[31,28,31,30,31,30,31,31,30,31,30,31];function Le(m){var b=Array(Xr(m)+1);return jn(m,b,0,b.length),b}function Kn(m,b,k,I){function P(z,_e,Ie){for(z=typeof z=="number"?z.toString():z||"";z.length<_e;)z=Ie[0]+z;return z}function Y(z,_e){return P(z,_e,"0")}function ae(z,_e){function Ie(fi){return 0>fi?-1:0<fi?1:0}var er;return(er=Ie(z.getFullYear()-_e.getFullYear()))===0&&(er=Ie(z.getMonth()-_e.getMonth()))===0&&(er=Ie(z.getDate()-_e.getDate())),er}function ye(z){switch(z.getDay()){case 0:return new Date(z.getFullYear()-1,11,29);case 1:return z;case 2:return new Date(z.getFullYear(),0,3);case 3:return new Date(z.getFullYear(),0,2);case 4:return new Date(z.getFullYear(),0,1);case 5:return new Date(z.getFullYear()-1,11,31);case 6:return new Date(z.getFullYear()-1,11,30)}}function le(z){var _e=z.Ca;for(z=new Date(new Date(z.Da+1900,0,1).getTime());0<_e;){var Ie=z.getMonth(),er=(sr(z.getFullYear())?ot:si)[Ie];if(_e>er-z.getDate())_e-=er-z.getDate()+1,z.setDate(1),11>Ie?z.setMonth(Ie+1):(z.setMonth(0),z.setFullYear(z.getFullYear()+1));else{z.setDate(z.getDate()+_e);break}}return Ie=new Date(z.getFullYear()+1,0,4),_e=ye(new Date(z.getFullYear(),0,4)),Ie=ye(Ie),0>=ae(_e,z)?0>=ae(Ie,z)?z.getFullYear()+1:z.getFullYear():z.getFullYear()-1}m>>>=0,b>>>=0,k>>>=0,I>>>=0;var de=G[I+40>>>2>>>0];I={Ya:O[I>>>2>>>0],Xa:O[I+4>>>2>>>0],Ga:O[I+8>>>2>>>0],Ka:O[I+12>>>2>>>0],Ha:O[I+16>>>2>>>0],Da:O[I+20>>>2>>>0],xa:O[I+24>>>2>>>0],Ca:O[I+28>>>2>>>0],bb:O[I+32>>>2>>>0],Wa:O[I+36>>>2>>>0],Za:de?et(de):""},k=et(k),de={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(var ge in de)k=k.replace(new RegExp(ge,"g"),de[ge]);var Ee="Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),ze="January February March April May June July August September October November December".split(" ");de={"%a":z=>Ee[z.xa].substring(0,3),"%A":z=>Ee[z.xa],"%b":z=>ze[z.Ha].substring(0,3),"%B":z=>ze[z.Ha],"%C":z=>Y((z.Da+1900)/100|0,2),"%d":z=>Y(z.Ka,2),"%e":z=>P(z.Ka,2," "),"%g":z=>le(z).toString().substring(2),"%G":z=>le(z),"%H":z=>Y(z.Ga,2),"%I":z=>(z=z.Ga,z==0?z=12:12<z&&(z-=12),Y(z,2)),"%j":z=>{for(var _e=0,Ie=0;Ie<=z.Ha-1;_e+=(sr(z.Da+1900)?ot:si)[Ie++]);return Y(z.Ka+_e,3)},"%m":z=>Y(z.Ha+1,2),"%M":z=>Y(z.Xa,2),"%n":()=>`
`,"%p":z=>0<=z.Ga&&12>z.Ga?"AM":"PM","%S":z=>Y(z.Ya,2),"%t":()=>"	","%u":z=>z.xa||7,"%U":z=>Y(Math.floor((z.Ca+7-z.xa)/7),2),"%V":z=>{var _e=Math.floor((z.Ca+7-(z.xa+6)%7)/7);if(2>=(z.xa+371-z.Ca-2)%7&&_e++,_e)_e==53&&(Ie=(z.xa+371-z.Ca)%7,Ie==4||Ie==3&&sr(z.Da)||(_e=1));else{_e=52;var Ie=(z.xa+7-z.Ca-1)%7;(Ie==4||Ie==5&&sr(z.Da%400-1))&&_e++}return Y(_e,2)},"%w":z=>z.xa,"%W":z=>Y(Math.floor((z.Ca+7-(z.xa+6)%7)/7),2),"%y":z=>(z.Da+1900).toString().substring(2),"%Y":z=>z.Da+1900,"%z":z=>{z=z.Wa;var _e=0<=z;return z=Math.abs(z)/60,(_e?"+":"-")+("0000"+(z/60*100+z%60)).slice(-4)},"%Z":z=>z.Za,"%%":()=>"%"},k=k.replace(/%%/g,"\0\0");for(ge in de)k.includes(ge)&&(k=k.replace(new RegExp(ge,"g"),de[ge](I)));return k=k.replace(/\0\0/g,"%"),ge=Le(k),ge.length>b?0:(H.set(ge,m>>>0),ge.length-1)}var mr=m=>{try{m()}catch(b){F(b)}};function Yn(){var m=he,b={};for(let[k,I]of Object.entries(m))b[k]=typeof I=="function"?function(){me.push(k);try{return I.apply(null,arguments)}finally{B||(me.pop(),kt&&Jt===1&&me.length===0&&(Jt=0,mr(ia),typeof Fibers<"u"&&Fibers.cb()))}}:I;return b}var Jt=0,kt=null,oi=0,me=[],Tr={},Xn={},lo=0,tn=null,li=[];function ui(){return new Promise((m,b)=>{tn={resolve:m,reject:b}})}function di(){var m=rn(65548),b=m+12;G[m>>>2>>>0]=b,G[m+4>>>2>>>0]=b+65536,b=me[0];var k=Tr[b];return k===void 0&&(k=lo++,Tr[b]=k,Xn[k]=b),O[m+8>>>2>>>0]=k,m}function ci(m){if(!B){if(Jt===0){var b=!1,k=!1;m((I=0)=>{if(!B&&(oi=I,b=!0,k)){Jt=2,mr(()=>sa(kt)),typeof Browser<"u"&&Browser.Ia.Pa&&Browser.Ia.resume(),I=!1;try{var P=(0,he[Xn[O[kt+8>>>2>>>0]]])()}catch(ye){P=ye,I=!0}var Y=!1;if(!kt){var ae=tn;ae&&(tn=null,(I?ae.reject:ae.resolve)(P),Y=!0)}if(I&&!Y)throw P}}),k=!0,b||(Jt=1,kt=di(),typeof Browser<"u"&&Browser.Ia.Pa&&Browser.Ia.pause(),mr(()=>aa(kt)))}else Jt===2?(Jt=0,mr(oa),Jn(kt),kt=null,li.forEach(I=>{if(!B)try{I();try{U=U=I=U,i.onExit?.(I),B=!0,c(I,new Gt(I))}catch(P){P instanceof Gt||P=="unwind"||c(1,P)}}catch(P){P instanceof Gt||P=="unwind"||c(1,P)}})):F(`invalid state: ${Jt}`);return oi}}function Qn(m){return ci(b=>{m().then(b)})}var pi={n:function(m,b,k){return Qn(async()=>{await i.Ra(m,b,k)})},a:function(m,b,k){throw m>>>=0,new ni(m).$a(b>>>0,k>>>0),fr=m,fr},g:function(){return 0},J:function(){},A:function(){},C:function(){},L:function(){return 0},H:function(){},D:function(){},G:function(){},l:function(){},B:function(){},y:function(){},I:function(){},z:function(){},m:()=>1,q:function(m,b,k){m=b+2097152>>>0<4194305-!!m?(m>>>0)+4294967296*b:NaN,k>>>=0,m=new Date(1e3*m),O[k>>>2>>>0]=m.getUTCSeconds(),O[k+4>>>2>>>0]=m.getUTCMinutes(),O[k+8>>>2>>>0]=m.getUTCHours(),O[k+12>>>2>>>0]=m.getUTCDate(),O[k+16>>>2>>>0]=m.getUTCMonth(),O[k+20>>>2>>>0]=m.getUTCFullYear()-1900,O[k+24>>>2>>>0]=m.getUTCDay(),O[k+28>>>2>>>0]=(m.getTime()-Date.UTC(m.getUTCFullYear(),0,1,0,0,0,0))/864e5|0},r:function(m,b,k){m=b+2097152>>>0<4194305-!!m?(m>>>0)+4294967296*b:NaN,k>>>=0,m=new Date(1e3*m),O[k>>>2>>>0]=m.getSeconds(),O[k+4>>>2>>>0]=m.getMinutes(),O[k+8>>>2>>>0]=m.getHours(),O[k+12>>>2>>>0]=m.getDate(),O[k+16>>>2>>>0]=m.getMonth(),O[k+20>>>2>>>0]=m.getFullYear()-1900,O[k+24>>>2>>>0]=m.getDay(),O[k+28>>>2>>>0]=(sr(m.getFullYear())?ai:or)[m.getMonth()]+m.getDate()-1|0,O[k+36>>>2>>>0]=-(60*m.getTimezoneOffset()),b=new Date(m.getFullYear(),6,1).getTimezoneOffset();var I=new Date(m.getFullYear(),0,1).getTimezoneOffset();O[k+32>>>2>>>0]=(b!=I&&m.getTimezoneOffset()==Math.min(I,b))|0},s:function(m){m>>>=0;var b=new Date(O[m+20>>>2>>>0]+1900,O[m+16>>>2>>>0],O[m+12>>>2>>>0],O[m+8>>>2>>>0],O[m+4>>>2>>>0],O[m>>>2>>>0],0),k=O[m+32>>>2>>>0],I=b.getTimezoneOffset(),P=new Date(b.getFullYear(),6,1).getTimezoneOffset(),Y=new Date(b.getFullYear(),0,1).getTimezoneOffset(),ae=Math.min(Y,P);return 0>k?O[m+32>>>2>>>0]=+(P!=Y&&ae==I):0<k!=(ae==I)&&(P=Math.max(Y,P),b.setTime(b.getTime()+6e4*((0<k?ae:P)-I))),O[m+24>>>2>>>0]=b.getDay(),O[m+28>>>2>>>0]=(sr(b.getFullYear())?ai:or)[b.getMonth()]+b.getDate()-1|0,O[m>>>2>>>0]=b.getSeconds(),O[m+4>>>2>>>0]=b.getMinutes(),O[m+8>>>2>>>0]=b.getHours(),O[m+12>>>2>>>0]=b.getDate(),O[m+16>>>2>>>0]=b.getMonth(),O[m+20>>>2>>>0]=b.getYear(),m=b.getTime(),isNaN(m)?(O[Zn()>>>2>>>0]=61,m=-1):m/=1e3,ea((Ot=m,1<=+Math.abs(Ot)?0<Ot?+Math.floor(Ot/4294967296)>>>0:~~+Math.ceil((Ot-+(~~Ot>>>0))/4294967296)>>>0:0)),m>>>0},o:function(){return-52},p:function(){},w:function(m,b,k){function I(le){return(le=le.toTimeString().match(/\(([A-Za-z ]+)\)$/))?le[1]:"GMT"}k>>>=0;var P=new Date().getFullYear(),Y=new Date(P,0,1),ae=new Date(P,6,1);P=Y.getTimezoneOffset();var ye=ae.getTimezoneOffset();G[m>>>0>>>2>>>0]=60*Math.max(P,ye),O[b>>>0>>>2>>>0]=+(P!=ye),m=I(Y),b=I(ae),m=Qr(m),b=Qr(b),ye<P?(G[k>>>2>>>0]=m,G[k+4>>>2>>>0]=b):(G[k>>>2>>>0]=b,G[k+4>>>2>>>0]=m)},e:()=>{F("")},b:function(m,b,k){return m>>>=0,b=Zr(b>>>0,k>>>0),Mt[m].apply(null,b)},i:function(m,b,k){return m>>>=0,b=Zr(b>>>0,k>>>0),Mt[m].apply(null,b)},h:()=>Date.now(),x:function(){return 4294901760},c:()=>performance.now(),K:function(m,b,k){return b>>>=0,K.copyWithin(m>>>0>>>0,b>>>0,b+(k>>>0)>>>0)},u:function(m){m>>>=0;var b=K.length;if(4294901760<m)return!1;for(var k=1;4>=k;k*=2){var I=b*(1+.2/k);I=Math.min(I,m+100663296);var P=Math;I=Math.max(m,I);e:{P=(P.min.call(P,4294901760,I+(65536-I%65536)%65536)-T.buffer.byteLength+65535)/65536;try{T.grow(P),D();var Y=1;break e}catch{}Y=void 0}if(Y)return!0}return!1},E:function(m,b){m>>>=0,b>>>=0;var k=0;return Zt().forEach((I,P)=>{var Y=b+k;for(P=G[m+4*P>>>2>>>0]=Y,Y=0;Y<I.length;++Y)H[P++>>>0>>>0]=I.charCodeAt(Y);H[P>>>0>>>0]=0,k+=I.length+1}),0},F:function(m,b){m>>>=0,b>>>=0;var k=Zt();G[m>>>2>>>0]=k.length;var I=0;return k.forEach(P=>I+=P.length+1),G[b>>>2>>>0]=I,0},f:()=>52,k:function(){return 52},t:function(){return 70},j:function(m,b,k,I){b>>>=0,k>>>=0,I>>>=0;for(var P=0,Y=0;Y<k;Y++){var ae=G[b>>>2>>>0],ye=G[b+4>>>2>>>0];b+=8;for(var le=0;le<ye;le++){var de=K[ae+le>>>0],ge=ii[m];de===0||de===10?((m===1?x:A)(Ar(ge,0)),ge.length=0):ge.push(de)}P+=ye}return G[I>>>2>>>0]=P,0},v:Kn,d:function(m,b,k,I){return Kn(m>>>0,b>>>0,k>>>0,I>>>0)}},he=function(){function m(k){return he=k.exports,he=Yn(),he=hi(),T=he.M,D(),V.unshift(he.N),X--,X==0&&ue&&(k=ue,ue=null,k()),he}var b={a:pi};if(X++,i.instantiateWasm)try{return i.instantiateWasm(b,m)}catch(k){A(`Module.instantiateWasm callback failed with error: ${k}`),o(k)}return He(b,function(k){m(k.instance)}).catch(o),{}}();i._OrtInit=(m,b)=>(i._OrtInit=he.O)(m,b),i._OrtGetLastError=(m,b)=>(i._OrtGetLastError=he.P)(m,b),i._OrtCreateSessionOptions=(m,b,k,I,P,Y,ae,ye,le,de)=>(i._OrtCreateSessionOptions=he.Q)(m,b,k,I,P,Y,ae,ye,le,de),i._OrtAppendExecutionProvider=(m,b)=>(i._OrtAppendExecutionProvider=he.R)(m,b),i._OrtAddFreeDimensionOverride=(m,b,k)=>(i._OrtAddFreeDimensionOverride=he.S)(m,b,k),i._OrtAddSessionConfigEntry=(m,b,k)=>(i._OrtAddSessionConfigEntry=he.T)(m,b,k),i._OrtReleaseSessionOptions=m=>(i._OrtReleaseSessionOptions=he.U)(m),i._OrtCreateSession=(m,b,k)=>(i._OrtCreateSession=he.V)(m,b,k),i._OrtReleaseSession=m=>(i._OrtReleaseSession=he.W)(m),i._OrtGetInputOutputCount=(m,b,k)=>(i._OrtGetInputOutputCount=he.X)(m,b,k),i._OrtGetInputName=(m,b)=>(i._OrtGetInputName=he.Y)(m,b),i._OrtGetOutputName=(m,b)=>(i._OrtGetOutputName=he.Z)(m,b),i._OrtFree=m=>(i._OrtFree=he._)(m),i._OrtCreateTensor=(m,b,k,I,P,Y)=>(i._OrtCreateTensor=he.$)(m,b,k,I,P,Y),i._OrtGetTensorData=(m,b,k,I,P)=>(i._OrtGetTensorData=he.aa)(m,b,k,I,P),i._OrtReleaseTensor=m=>(i._OrtReleaseTensor=he.ba)(m),i._OrtCreateRunOptions=(m,b,k,I)=>(i._OrtCreateRunOptions=he.ca)(m,b,k,I),i._OrtAddRunConfigEntry=(m,b,k)=>(i._OrtAddRunConfigEntry=he.da)(m,b,k),i._OrtReleaseRunOptions=m=>(i._OrtReleaseRunOptions=he.ea)(m),i._OrtCreateBinding=m=>(i._OrtCreateBinding=he.fa)(m),i._OrtBindInput=(m,b,k)=>(i._OrtBindInput=he.ga)(m,b,k),i._OrtBindOutput=(m,b,k,I)=>(i._OrtBindOutput=he.ha)(m,b,k,I),i._OrtClearBoundOutputs=m=>(i._OrtClearBoundOutputs=he.ia)(m),i._OrtReleaseBinding=m=>(i._OrtReleaseBinding=he.ja)(m),i._OrtRunWithBinding=(m,b,k,I,P)=>(i._OrtRunWithBinding=he.ka)(m,b,k,I,P),i._OrtRun=(m,b,k,I,P,Y,ae,ye)=>(i._OrtRun=he.la)(m,b,k,I,P,Y,ae,ye),i._OrtEndProfiling=m=>(i._OrtEndProfiling=he.ma)(m),i._JsepOutput=(m,b,k)=>(i._JsepOutput=he.na)(m,b,k),i._JsepGetNodeName=m=>(i._JsepGetNodeName=he.oa)(m);var Zn=()=>(Zn=he.pa)(),rn=i._malloc=m=>(rn=i._malloc=he.qa)(m),Jn=i._free=m=>(Jn=i._free=he.ra)(m),ea=m=>(ea=he.ta)(m),ta=()=>(ta=he.ua)(),ra=m=>(ra=he.va)(m),na=m=>(na=he.wa)(m),aa=m=>(aa=he.ya)(m),ia=()=>(ia=he.za)(),sa=m=>(sa=he.Aa)(m),oa=()=>(oa=he.Ba)();i.___start_em_js=943100,i.___stop_em_js=943261;function hi(){var m=he;m=Object.assign({},m);var b=I=>()=>I()>>>0,k=I=>P=>I(P)>>>0;return m.pa=b(m.pa),m.qa=k(m.qa),m.ua=b(m.ua),m.wa=k(m.wa),m}i.stackAlloc=na,i.stackSave=ta,i.stackRestore=ra,i.UTF8ToString=et,i.stringToUTF8=(m,b,k)=>jn(m,K,b,k),i.lengthBytesUTF8=Xr;var gr;ue=function m(){gr||Or(),gr||(ue=m)};function Or(){if(!(0<X)){if(i.preRun)for(typeof i.preRun=="function"&&(i.preRun=[i.preRun]);i.preRun.length;){var m=i.preRun.shift();L.unshift(m)}for(;0<L.length;)L.shift()(i);if(!(0<X||gr||(gr=!0,i.calledRun=!0,B))){for(;0<V.length;)V.shift()(i);for(s(i);0<te.length;)te.shift()(i)}}}return Or(),a.ready}})();typeof t=="object"&&typeof e=="object"?e.exports=r:typeof define=="function"&&define.amd&&define([],()=>r)}),Xg=Dr(()=>{}),Qg=Dr(()=>{}),Yo={};Pr(Yo,{cpus:()=>Xo});var Xo,Zg=Q(()=>{Xo=void 0}),Jg=Dr((t,e)=>{var r=(()=>{var n=typeof document<"u"&&document.currentScript?document.currentScript.src:void 0;return typeof __filename<"u"&&(n=n||__filename),function(a={}){function i(){return L.buffer!=ue.buffer&&Ve(),ue}function s(){return L.buffer!=ue.buffer&&Ve(),F}function o(){return L.buffer!=ue.buffer&&Ve(),oe}function l(){return L.buffer!=ue.buffer&&Ve(),$e}function d(){return L.buffer!=ue.buffer&&Ve(),Ue}function c(){return L.buffer!=ue.buffer&&Ve(),De}var u=a,h,f;u.ready=new Promise((p,_)=>{h=p,f=_}),u.mountExternalData=(p,_)=>{(u.cb||(u.cb=new Map)).set(p,_)},u.unmountExternalData=()=>{delete u.cb},u.jsepInit=(p,_,$,C,M,W,j,fe)=>{u.Mb=p,u.wb=_,u.yb=$,u.kb=C,u.xb=M,u.Ea=W,u.zb=j,u.Ab=fe,_=(ce,pe,we)=>(...Me)=>{let Ne=tr,R=pe?.();Me=ce(...Me);let be=pe?.();return R!==be&&(ce=be,we(R),pe=we=null),tr!=Ne?p3():Me},$=ce=>async(...pe)=>{try{if(u.bb)throw Error("Session already started");let we=u.bb={Cb:pe[0],errors:[]},Me=await ce(...pe);if(u.bb!==we)throw Error("Session mismatch");p.flush();let Ne=we.errors;if(0<Ne.length){let R=await Promise.all(Ne);if(R=R.filter(be=>be),0<R.length)throw Error(R.join(`
`))}return Me}finally{u.bb=null}},u._OrtRun=$(_(u._OrtRun,()=>u._OrtRun,ce=>u._OrtRun=ce)),u._OrtRunWithBinding=$(_(u._OrtRunWithBinding,()=>u._OrtRunWithBinding,ce=>u._OrtRunWithBinding=ce)),u._OrtBindInput=_(u._OrtBindInput,()=>u._OrtBindInput,ce=>u._OrtBindInput=ce),u.jsepRegisterBuffer=(ce,pe,we,Me)=>p.registerBuffer(ce,pe,we,Me),u.jsepUnregisterBuffers=ce=>{p.unregisterBuffers(ce)},u.jsepGetBuffer=ce=>p.getBuffer(ce),u.jsepCreateDownloader=(ce,pe,we)=>p.createDownloader(ce,pe,we)};var g=Object.assign({},u),y="./this.program",w=(p,_)=>{throw _},v=typeof window=="object",S=typeof importScripts=="function",E=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string",x=u.ENVIRONMENT_IS_PTHREAD||!1,A="";function T(p){return u.locateFile?u.locateFile(p,A):A+p}var B,U,H;if(E){var K=(qo(),yr(Ni)),O=(Ko(),yr(Ui));A=S?O.dirname(A)+"/":__dirname+"/",B=(_,$)=>(_=Ar(_)?new URL(_):O.normalize(_),K.readFileSync(_,$?void 0:"utf8")),H=_=>(_=B(_,!0),_.buffer||(_=new Uint8Array(_)),_),U=(_,$,C,M=!0)=>{_=Ar(_)?new URL(_):O.normalize(_),K.readFile(_,M?void 0:"utf8",(W,j)=>{W?C(W):$(M?j.buffer:j)})},!u.thisProgram&&1<process.argv.length&&(y=process.argv[1].replace(/\\/g,"/")),process.argv.slice(2),w=(_,$)=>{throw process.exitCode=_,$},u.inspect=()=>"[Emscripten Module object]";let p;try{p=Xg()}catch(_){throw console.error('The "worker_threads" module is not supported in this node.js build - perhaps a newer version is needed?'),_}global.Worker=p.Worker}else(v||S)&&(S?A=self.location.href:typeof document<"u"&&document.currentScript&&(A=document.currentScript.src),typeof n<"u"&&n&&(A=n),A.indexOf("blob:")!==0?A=A.substr(0,A.replace(/[?#].*/,"").lastIndexOf("/")+1):A="",E||(B=p=>{var _=new XMLHttpRequest;return _.open("GET",p,!1),_.send(null),_.responseText},S&&(H=p=>{var _=new XMLHttpRequest;return _.open("GET",p,!1),_.responseType="arraybuffer",_.send(null),new Uint8Array(_.response)}),U=(p,_,$)=>{var C=new XMLHttpRequest;C.open("GET",p,!0),C.responseType="arraybuffer",C.onload=()=>{C.status==200||C.status==0&&C.response?_(C.response):$()},C.onerror=$,C.send(null)}));E&&typeof performance>"u"&&(global.performance=Qg().performance);var G=console.log.bind(console),ne=console.error.bind(console);E&&(G=(...p)=>K.writeSync(1,p.join(" ")+`
`),ne=(...p)=>K.writeSync(2,p.join(" ")+`
`));var q=G,D=ne;Object.assign(u,g),g=null,typeof WebAssembly!="object"&&fr("no native wasm support detected");var L,V,te=!1,X,ue,F,oe,$e,Ue,De;function Ve(){var p=L.buffer;u.HEAP8=ue=new Int8Array(p),u.HEAP16=new Int16Array(p),u.HEAPU8=F=new Uint8Array(p),u.HEAPU16=new Uint16Array(p),u.HEAP32=oe=new Int32Array(p),u.HEAPU32=$e=new Uint32Array(p),u.HEAPF32=Ue=new Float32Array(p),u.HEAPF64=De=new Float64Array(p)}var St=16777216;if(x)L=u.wasmMemory;else if(u.wasmMemory)L=u.wasmMemory;else if(L=new WebAssembly.Memory({initial:St/65536,maximum:65536,shared:!0}),!(L.buffer instanceof SharedArrayBuffer))throw D("requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag"),E&&D("(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and/or recent version)"),Error("bad memory");Ve(),St=L.buffer.byteLength;var We=[],He=[],Ot=[],Mt=0,Gt=null;function ni(){if(Mt--,Mt==0&&Gt){var p=Gt;Gt=null,p()}}function fr(p){throw p="Aborted("+p+")",D(p),te=!0,X=1,p=new WebAssembly.RuntimeError(p+". Build with -sASSERTIONS for more info."),f(p),p}var qn=p=>p.startsWith("data:application/octet-stream;base64,"),Ar=p=>p.startsWith("file://"),et;et="ort-wasm-simd-threaded.wasm",qn(et)||(et=T(et));function Xr(p){if(H)return H(p);throw"both async and sync fetching of the wasm failed"}function jn(p){if(v||S){if(typeof fetch=="function"&&!Ar(p))return fetch(p,{credentials:"same-origin"}).then(_=>{if(!_.ok)throw"failed to load wasm binary file at '"+p+"'";return _.arrayBuffer()}).catch(()=>Xr(p));if(U)return new Promise((_,$)=>{U(p,C=>_(new Uint8Array(C)),$)})}return Promise.resolve().then(()=>Xr(p))}function sr(p,_,$){return jn(p).then(C=>WebAssembly.instantiate(C,_)).then(C=>C).then($,C=>{D(`failed to asynchronously prepare wasm: ${C}`),fr(C)})}function ai(p,_){var $=et;return typeof WebAssembly.instantiateStreaming!="function"||qn($)||Ar($)||E||typeof fetch!="function"?sr($,p,_):fetch($,{credentials:"same-origin"}).then(C=>WebAssembly.instantiateStreaming(C,p).then(_,function(M){return D(`wasm streaming compile failed: ${M}`),D("falling back to ArrayBuffer instantiation"),sr($,p,_)}))}var or,Qr={932428:(p,_,$,C)=>{if(typeof u>"u"||!u.cb)return 1;if(p=ot(p>>>0),p.startsWith("./")&&(p=p.substring(2)),p=u.cb.get(p),!p)return 2;if(_>>>=0,$>>>=0,C>>>=0,_+$>p.byteLength)return 3;try{return s().set(p.subarray(_,_+$),C>>>0),0}catch{return 4}},932929:p=>u.wb(p),932962:p=>u.yb(p),932994:(p,_,$)=>{u.kb(p,_,$,!0)},933033:(p,_,$)=>{u.kb(p,_,$)},933066:p=>{u.Ea("Abs",p,void 0)},933117:p=>{u.Ea("Neg",p,void 0)},933168:p=>{u.Ea("Floor",p,void 0)},933221:p=>{u.Ea("Ceil",p,void 0)},933273:p=>{u.Ea("Reciprocal",p,void 0)},933331:p=>{u.Ea("Sqrt",p,void 0)},933383:p=>{u.Ea("Exp",p,void 0)},933434:p=>{u.Ea("Erf",p,void 0)},933485:p=>{u.Ea("Sigmoid",p,void 0)},933540:p=>{u.Ea("Log",p,void 0)},933591:p=>{u.Ea("Sin",p,void 0)},933642:p=>{u.Ea("Cos",p,void 0)},933693:p=>{u.Ea("Tan",p,void 0)},933744:p=>{u.Ea("Asin",p,void 0)},933796:p=>{u.Ea("Acos",p,void 0)},933848:p=>{u.Ea("Atan",p,void 0)},933900:p=>{u.Ea("Sinh",p,void 0)},933952:p=>{u.Ea("Cosh",p,void 0)},934004:p=>{u.Ea("Asinh",p,void 0)},934057:p=>{u.Ea("Acosh",p,void 0)},934110:p=>{u.Ea("Atanh",p,void 0)},934163:p=>{u.Ea("Tanh",p,void 0)},934215:p=>{u.Ea("Not",p,void 0)},934266:(p,_,$)=>{u.Ea("Clip",p,{min:_,max:$})},934335:p=>{u.Ea("Clip",p,void 0)},934387:(p,_)=>{u.Ea("Elu",p,{alpha:_})},934445:p=>{u.Ea("Relu",p,void 0)},934497:(p,_)=>{u.Ea("LeakyRelu",p,{alpha:_})},934561:(p,_)=>{u.Ea("ThresholdedRelu",p,{alpha:_})},934631:(p,_)=>{u.Ea("Cast",p,{to:_})},934689:p=>{u.Ea("Add",p,void 0)},934740:p=>{u.Ea("Sub",p,void 0)},934791:p=>{u.Ea("Mul",p,void 0)},934842:p=>{u.Ea("Div",p,void 0)},934893:p=>{u.Ea("Pow",p,void 0)},934944:p=>{u.Ea("Equal",p,void 0)},934997:p=>{u.Ea("Greater",p,void 0)},935052:p=>{u.Ea("GreaterOrEqual",p,void 0)},935114:p=>{u.Ea("Less",p,void 0)},935166:p=>{u.Ea("LessOrEqual",p,void 0)},935225:(p,_,$,C,M)=>{u.Ea("ReduceMean",p,{keepDims:!!_,noopWithEmptyAxes:!!$,axes:C?Array.from(o().subarray(C>>>0,M>>>0)):[]})},935384:(p,_,$,C,M)=>{u.Ea("ReduceMax",p,{keepDims:!!_,noopWithEmptyAxes:!!$,axes:C?Array.from(o().subarray(C>>>0,M>>>0)):[]})},935542:(p,_,$,C,M)=>{u.Ea("ReduceMin",p,{keepDims:!!_,noopWithEmptyAxes:!!$,axes:C?Array.from(o().subarray(C>>>0,M>>>0)):[]})},935700:(p,_,$,C,M)=>{u.Ea("ReduceProd",p,{keepDims:!!_,noopWithEmptyAxes:!!$,axes:C?Array.from(o().subarray(C>>>0,M>>>0)):[]})},935859:(p,_,$,C,M)=>{u.Ea("ReduceSum",p,{keepDims:!!_,noopWithEmptyAxes:!!$,axes:C?Array.from(o().subarray(C>>>0,M>>>0)):[]})},936017:(p,_,$,C,M)=>{u.Ea("ReduceL1",p,{keepDims:!!_,noopWithEmptyAxes:!!$,axes:C?Array.from(o().subarray(C>>>0,M>>>0)):[]})},936174:(p,_,$,C,M)=>{u.Ea("ReduceL2",p,{keepDims:!!_,noopWithEmptyAxes:!!$,axes:C?Array.from(o().subarray(C>>>0,M>>>0)):[]})},936331:(p,_,$,C,M)=>{u.Ea("ReduceLogSum",p,{keepDims:!!_,noopWithEmptyAxes:!!$,axes:C?Array.from(o().subarray(C>>>0,M>>>0)):[]})},936492:(p,_,$,C,M)=>{u.Ea("ReduceSumSquare",p,{keepDims:!!_,noopWithEmptyAxes:!!$,axes:C?Array.from(o().subarray(C>>>0,M>>>0)):[]})},936656:(p,_,$,C,M)=>{u.Ea("ReduceLogSumExp",p,{keepDims:!!_,noopWithEmptyAxes:!!$,axes:C?Array.from(o().subarray(C>>>0,M>>>0)):[]})},936820:p=>{u.Ea("Where",p,void 0)},936873:(p,_,$)=>{u.Ea("Transpose",p,{perm:_?Array.from(o().subarray(_>>>0,$>>>0)):[]})},936981:(p,_,$,C,M,W,j,fe,ce,pe,we,Me,Ne,R,be)=>{u.Ea("ConvTranspose",p,{format:ce?"NHWC":"NCHW",autoPad:_,dilations:[$],group:C,kernel_shape:[M],pads:[W,j],strides:[fe],wIsConst:()=>!!i()[pe>>>0],outputPadding:we?Array.from(o().subarray(we>>>0,Me>>>0)):[],outputShape:Ne?Array.from(o().subarray(Ne>>>0,R>>>0)):[],activation:ot(be)})},937383:(p,_,$,C,M,W,j,fe,ce,pe,we,Me,Ne,R)=>{u.Ea("ConvTranspose",p,{format:fe?"NHWC":"NCHW",autoPad:_,dilations:Array.from(o().subarray($>>>0,($>>>0)+2>>>0)),group:C,kernelShape:Array.from(o().subarray(M>>>0,(M>>>0)+2>>>0)),pads:Array.from(o().subarray(W>>>0,(W>>>0)+4>>>0)),strides:Array.from(o().subarray(j>>>0,(j>>>0)+2>>>0)),wIsConst:()=>!!i()[ce>>>0],outputPadding:pe?Array.from(o().subarray(pe>>>0,we>>>0)):[],outputShape:Me?Array.from(o().subarray(Me>>>0,Ne>>>0)):[],activation:ot(R)})},937948:(p,_,$,C,M,W,j,fe,ce,pe,we,Me,Ne,R,be)=>{u.Ea("ConvTranspose",p,{format:ce?"NHWC":"NCHW",autoPad:_,dilations:[$],group:C,kernel_shape:[M],pads:[W,j],strides:[fe],wIsConst:()=>!!i()[pe>>>0],outputPadding:we?Array.from(o().subarray(we>>>0,Me>>>0)):[],outputShape:Ne?Array.from(o().subarray(Ne>>>0,R>>>0)):[],activation:ot(be)})},938350:(p,_,$,C,M,W,j,fe,ce,pe,we,Me,Ne,R)=>{u.Ea("ConvTranspose",p,{format:fe?"NHWC":"NCHW",autoPad:_,dilations:Array.from(o().subarray($>>>0,($>>>0)+2>>>0)),group:C,kernelShape:Array.from(o().subarray(M>>>0,(M>>>0)+2>>>0)),pads:Array.from(o().subarray(W>>>0,(W>>>0)+4>>>0)),strides:Array.from(o().subarray(j>>>0,(j>>>0)+2>>>0)),wIsConst:()=>!!i()[ce>>>0],outputPadding:pe?Array.from(o().subarray(pe>>>0,we>>>0)):[],outputShape:Me?Array.from(o().subarray(Me>>>0,Ne>>>0)):[],activation:ot(R)})},938915:(p,_)=>{u.Ea("GlobalAveragePool",p,{format:_?"NHWC":"NCHW"})},939006:(p,_,$,C,M,W,j,fe,ce,pe,we,Me,Ne,R,be,Be)=>{u.Ea("AveragePool",p,{format:Be?"NHWC":"NCHW",auto_pad:_,ceil_mode:$,count_include_pad:C,storage_order:M,dilations:[W,j],kernel_shape:[fe,ce],pads:[pe,we,Me,Ne],strides:[R,be]})},939290:(p,_)=>{u.Ea("GlobalAveragePool",p,{format:_?"NHWC":"NCHW"})},939381:(p,_,$,C,M,W,j,fe,ce,pe,we,Me,Ne,R,be,Be)=>{u.Ea("AveragePool",p,{format:Be?"NHWC":"NCHW",auto_pad:_,ceil_mode:$,count_include_pad:C,storage_order:M,dilations:[W,j],kernel_shape:[fe,ce],pads:[pe,we,Me,Ne],strides:[R,be]})},939665:(p,_)=>{u.Ea("GlobalMaxPool",p,{format:_?"NHWC":"NCHW"})},939752:(p,_,$,C,M,W,j,fe,ce,pe,we,Me,Ne,R,be,Be)=>{u.Ea("MaxPool",p,{format:Be?"NHWC":"NCHW",auto_pad:_,ceil_mode:$,count_include_pad:C,storage_order:M,dilations:[W,j],kernel_shape:[fe,ce],pads:[pe,we,Me,Ne],strides:[R,be]})},940032:(p,_)=>{u.Ea("GlobalMaxPool",p,{format:_?"NHWC":"NCHW"})},940119:(p,_,$,C,M,W,j,fe,ce,pe,we,Me,Ne,R,be,Be)=>{u.Ea("MaxPool",p,{format:Be?"NHWC":"NCHW",auto_pad:_,ceil_mode:$,count_include_pad:C,storage_order:M,dilations:[W,j],kernel_shape:[fe,ce],pads:[pe,we,Me,Ne],strides:[R,be]})},940399:(p,_,$,C,M)=>{u.Ea("Gemm",p,{alpha:_,beta:$,transA:C,transB:M})},940503:p=>{u.Ea("MatMul",p,void 0)},940557:(p,_,$,C)=>{u.Ea("ArgMax",p,{keepDims:!!_,selectLastIndex:!!$,axis:C})},940665:(p,_,$,C)=>{u.Ea("ArgMin",p,{keepDims:!!_,selectLastIndex:!!$,axis:C})},940773:(p,_)=>{u.Ea("Softmax",p,{axis:_})},940836:(p,_)=>{u.Ea("Concat",p,{axis:_})},940896:(p,_,$,C,M)=>{u.Ea("Split",p,{axis:_,numOutputs:$,splitSizes:C?Array.from(o().subarray(C>>>0,M>>>0)):[]})},941036:p=>{u.Ea("Expand",p,void 0)},941090:(p,_)=>{u.Ea("Gather",p,{axis:Number(_)})},941161:(p,_)=>{u.Ea("GatherElements",p,{axis:Number(_)})},941240:(p,_,$,C,M,W,j,fe,ce,pe,we)=>{u.Ea("Resize",p,{antialias:_,axes:$?Array.from(o().subarray($>>>0,C>>>0)):[],coordinateTransformMode:ot(M),cubicCoeffA:W,excludeOutside:j,extrapolationValue:fe,keepAspectRatioPolicy:ot(ce),mode:ot(pe),nearestMode:ot(we)})},941586:(p,_,$,C,M,W,j)=>{u.Ea("Slice",p,{starts:_?Array.from(o().subarray(_>>>0,$>>>0)):[],ends:C?Array.from(o().subarray(C>>>0,M>>>0)):[],axes:W?Array.from(o().subarray(W>>>0,j>>>0)):[]})},941802:p=>{u.Ea("Tile",p,void 0)},941854:(p,_,$)=>{u.Ea("LayerNormalization",p,{axis:Number(_),epsilon:Number($)})},941961:(p,_,$)=>{u.Ea("InstanceNormalization",p,{epsilon:_,format:$?"NHWC":"NCHW"})},942075:(p,_,$)=>{u.Ea("InstanceNormalization",p,{epsilon:_,format:$?"NHWC":"NCHW"})},942189:p=>{u.Ea("Range",p,void 0)},942242:(p,_)=>{u.Ea("Einsum",p,{equation:ot(_)})},942323:(p,_,$,C,M)=>{u.Ea("Pad",p,{mode:_,value:$,pads:C?Array.from(o().subarray(C>>>0,M>>>0)):[]})},942450:(p,_,$,C,M,W)=>{u.Ea("BatchNormalization",p,{epsilon:_,momentum:$,spatial:!!M,trainingMode:!!C,format:W?"NHWC":"NCHW"})},942619:(p,_,$,C,M,W)=>{u.Ea("BatchNormalization",p,{epsilon:_,momentum:$,spatial:!!M,trainingMode:!!C,format:W?"NHWC":"NCHW"})},942788:(p,_,$)=>{u.Ea("CumSum",p,{exclusive:Number(_),reverse:Number($)})},942885:(p,_,$,C,M,W,j,fe,ce)=>{u.Ea("Attention",p,{numHeads:_,isUnidirectional:$,maskFilterValue:C,scale:M,doRotary:W,qkvHiddenSizes:j?Array.from(o().subarray(Number(fe)>>>0,Number(fe)+j>>>0)):[],pastPresentShareBuffer:!!ce})},943157:p=>{u.Ea("Gelu",p,void 0)},943209:(p,_,$,C,M,W)=>{u.Ea("MultiHeadAttention",p,{numHeads:_,isUnidirectional:$,maskFilterValue:C,scale:M,doRotary:W})},943368:p=>{u.Ea("BiasAdd",p,void 0)},943423:p=>{u.Ea("BiasSplitGelu",p,void 0)},943484:(p,_)=>{u.Ea("SkipLayerNormalization",p,{epsilon:_})},943565:(p,_,$,C,M,W,j,fe,ce,pe,we,Me,Ne)=>{u.Ea("Conv",p,{format:ce?"NHWC":"NCHW",auto_pad:_,dilations:[$],group:C,kernel_shape:[M],pads:W?Array.from(o().subarray(W>>>0,j>>>0)):[],strides:[fe],w_is_const:()=>!!i()[pe>>>0],activation:ot(we),activation_params:Me?Array.from(d().subarray(Me>>>0,Ne>>>0)):[]})},943935:(p,_,$,C,M,W,j,fe,ce,pe,we,Me,Ne,R,be,Be)=>{u.Ea("Conv",p,{format:Me?"NHWC":"NCHW",auto_pad:_,dilations:[$,C],group:M,kernel_shape:[W,j],pads:fe?Array.from(o().subarray(fe>>>0,ce>>>0)):[],strides:[pe,we],w_is_const:()=>!!i()[Ne>>>0],activation:ot(R),activation_params:be?Array.from(d().subarray(be>>>0,Be>>>0)):[]})},944326:p=>{u.zb(p)},944360:(p,_)=>u.Ab(p,_,u.bb.Cb,u.bb.errors)};function Ir(p){this.name="ExitStatus",this.message=`Program terminated with exit(${p})`,this.status=p}var Zr=p=>{p.terminate(),p.onmessage=()=>{}},Jr=p=>{me.Ya.length==0&&(kt(),me.lb(me.Ya[0]));var _=me.Ya.pop();if(!_)return 6;me.Za.push(_),me.Qa[p.Xa]=_,_.Xa=p.Xa;var $={cmd:"run",start_routine:p.Db,arg:p.tb,pthread_ptr:p.Xa};return E&&_.unref(),_.postMessage($,p.Jb),0},Zt=0,en=typeof TextDecoder<"u"?new TextDecoder("utf8"):void 0,ii=(p,_,$)=>{_>>>=0;var C=_+$;for($=_;p[$]&&!($>=C);)++$;if(16<$-_&&p.buffer&&en)return en.decode(p.buffer instanceof SharedArrayBuffer?p.slice(_,$):p.subarray(_,$));for(C="";_<$;){var M=p[_++];if(M&128){var W=p[_++]&63;if((M&224)==192)C+=String.fromCharCode((M&31)<<6|W);else{var j=p[_++]&63;M=(M&240)==224?(M&15)<<12|W<<6|j:(M&7)<<18|W<<12|j<<6|p[_++]&63,65536>M?C+=String.fromCharCode(M):(M-=65536,C+=String.fromCharCode(55296|M>>10,56320|M&1023))}}else C+=String.fromCharCode(M)}return C},ot=(p,_)=>(p>>>=0)?ii(s(),p,_):"",si=p=>{var _=fo();return p=p(),yi(_),p};function Le(p,_){var $=arguments.length-2,C=arguments;return si(()=>{for(var M=mo(8*$),W=M>>>3,j=0;j<$;j++){var fe=C[2+j];c()[W+j>>>0]=fe}return Zm(p,$,M,_)})}function Kn(p){if(x)return Le(0,1,p);X=p,0<Zt||(me.Eb(),u.onExit?.(p),te=!0),w(p,new Ir(p))}var mr=p=>{if(X=p,x)throw Xn(p),"unwind";Kn(p)},Yn=p=>{p instanceof Ir||p=="unwind"||w(1,p)};function Jt(){for(var p=u.numThreads;p--;)kt();We.unshift(()=>{Mt++,oi(()=>ni())})}function kt(){var p=T("ort-wasm-simd-threaded.worker.js");p=new Worker(p),me.Ya.push(p)}function oi(p){x?p():Promise.all(me.Ya.map(me.lb)).then(p)}var me={Ya:[],Za:[],pb:[],Qa:{},hb(){x?(me.receiveObjectTransfer=me.Bb,me.threadInitTLS=me.ob,me.setExitStatus=me.nb):Jt()},nb:p=>X=p,Nb:["$terminateWorker"],Eb:()=>{for(var p of me.Za)Zr(p);for(p of me.Ya)Zr(p);me.Ya=[],me.Za=[],me.Qa=[]},mb:p=>{var _=p.Xa;delete me.Qa[_],me.Ya.push(p),me.Za.splice(me.Za.indexOf(p),1),p.Xa=0,po(_)},Bb(){},ob(){me.pb.forEach(p=>p())},lb:p=>new Promise(_=>{p.onmessage=W=>{W=W.data;var j=W.cmd;if(W.targetThread&&W.targetThread!=_i()){var fe=me.Qa[W.targetThread];fe?fe.postMessage(W,W.transferList):D(`Internal error! Worker sent a message "${j}" to target pthread ${W.targetThread}, but that thread no longer exists!`)}else j==="checkMailbox"?Or():j==="spawnThread"?Jr(W):j==="cleanupThread"?me.mb(me.Qa[W.thread]):j==="killThread"?(W=W.thread,j=me.Qa[W],delete me.Qa[W],Zr(j),po(W),me.Za.splice(me.Za.indexOf(j),1),j.Xa=0):j==="cancelThread"?me.Qa[W.thread].postMessage({cmd:"cancel"}):j==="loaded"?(p.loaded=!0,E&&!p.Xa&&p.unref(),_(p)):j==="alert"?alert(`Thread ${W.threadId}: ${W.text}`):W.target==="setimmediate"?p.postMessage(W):j==="callHandler"?u[W.handler](...W.args):j&&D(`worker sent an unknown command ${j}`)},p.onerror=W=>{throw D(`worker sent an error! ${W.filename}:${W.lineno}: ${W.message}`),W},E&&(p.on("message",W=>p.onmessage({data:W})),p.on("error",W=>p.onerror(W)));var $=[],C=["onExit"],M;for(M of C)u.hasOwnProperty(M)&&$.push(M);p.postMessage({cmd:"load",handlers:$,urlOrBlob:u.mainScriptUrlOrBlob||n,wasmMemory:L,wasmModule:V})})};u.PThread=me;var Tr=p=>{for(;0<p.length;)p.shift()(u)};u.establishStackSpace=()=>{var p=_i(),_=l()[p+52>>>2>>>0];p=l()[p+56>>>2>>>0],tg(_,_-p),yi(_)};function Xn(p){if(x)return Le(1,0,p);mr(p)}u.invokeEntryPoint=(p,_)=>{p=rg.apply(null,[p,_]),0<Zt?me.nb(p):ho(p)};function lo(p){this.gb=p-24,this.sb=function(_){l()[this.gb+4>>>2>>>0]=_},this.rb=function(_){l()[this.gb+8>>>2>>>0]=_},this.hb=function(_,$){this.qb(),this.sb(_),this.rb($)},this.qb=function(){l()[this.gb+16>>>2>>>0]=0}}var tn=0;function li(p,_,$,C){return x?Le(2,1,p,_,$,C):ui(p,_,$,C)}function ui(p,_,$,C){if(p>>>=0,_>>>=0,$>>>=0,C>>>=0,typeof SharedArrayBuffer>"u")return D("Current environment does not support SharedArrayBuffer, pthreads are not available!"),6;var M=[];return x&&M.length===0?li(p,_,$,C):(p={Db:$,Xa:p,tb:C,Jb:M},x?(p.Lb="spawnThread",postMessage(p,M),0):Jr(p))}function di(p,_,$){return x?Le(3,1,p,_,$):0}function ci(p,_){if(x)return Le(4,1,p,_)}var Qn=p=>{for(var _=0,$=0;$<p.length;++$){var C=p.charCodeAt($);127>=C?_++:2047>=C?_+=2:55296<=C&&57343>=C?(_+=4,++$):_+=3}return _},pi=(p,_,$,C)=>{if($>>>=0,!(0<C))return 0;var M=$;C=$+C-1;for(var W=0;W<p.length;++W){var j=p.charCodeAt(W);if(55296<=j&&57343>=j){var fe=p.charCodeAt(++W);j=65536+((j&1023)<<10)|fe&1023}if(127>=j){if($>=C)break;_[$++>>>0]=j}else{if(2047>=j){if($+1>=C)break;_[$++>>>0]=192|j>>6}else{if(65535>=j){if($+2>=C)break;_[$++>>>0]=224|j>>12}else{if($+3>=C)break;_[$++>>>0]=240|j>>18,_[$++>>>0]=128|j>>12&63}_[$++>>>0]=128|j>>6&63}_[$++>>>0]=128|j&63}}return _[$>>>0]=0,$-M},he=(p,_,$)=>pi(p,s(),_,$);function Zn(p,_){if(x)return Le(5,1,p,_)}function rn(p,_,$){if(x)return Le(6,1,p,_,$)}function Jn(p,_,$){return x?Le(7,1,p,_,$):0}function ea(p,_){if(x)return Le(8,1,p,_)}function ta(p,_,$){if(x)return Le(9,1,p,_,$)}function ra(p,_,$,C){if(x)return Le(10,1,p,_,$,C)}function na(p,_,$,C){if(x)return Le(11,1,p,_,$,C)}function aa(p,_,$,C){if(x)return Le(12,1,p,_,$,C)}function ia(p){if(x)return Le(13,1,p)}function sa(p,_){if(x)return Le(14,1,p,_)}function oa(p,_,$){if(x)return Le(15,1,p,_,$)}var hi=()=>{if(!(0<Zt))try{x?ho(X):mr(X)}catch(p){Yn(p)}};function gr(p){p>>>=0,typeof Atomics.Kb=="function"&&(Atomics.Kb(o(),p>>>2,p).value.then(Or),p+=128,Atomics.store(o(),p>>>2,1))}u.__emscripten_thread_mailbox_await=gr;var Or=()=>{var p=_i();if(p&&(gr(p),!te))try{Jm(),hi()}catch(_){Yn(_)}};u.checkMailbox=Or;var m=[],b=p=>p%4===0&&(p%100!==0||p%400===0),k=[0,31,60,91,121,152,182,213,244,274,305,335],I=[0,31,59,90,120,151,181,212,243,273,304,334];function P(p,_,$,C,M,W,j,fe){return x?Le(16,1,p,_,$,C,M,W,j,fe):-52}function Y(p,_,$,C,M,W,j){if(x)return Le(17,1,p,_,$,C,M,W,j)}var ae=p=>{var _=Qn(p)+1,$=co(_);return $&&he(p,$,_),$},ye=[],le=(p,_)=>{ye.length=0;for(var $;$=s()[p++>>>0];){var C=$!=105;C&=$!=112,_+=C&&_%8?4:0,ye.push($==112?l()[_>>>2>>>0]:$==105?o()[_>>>2>>>0]:c()[_>>>3>>>0]),_+=C?8:4}return ye},de={},ge=()=>{if(!Ee){var p={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:(typeof navigator=="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:y||"./this.program"},_;for(_ in de)de[_]===void 0?delete p[_]:p[_]=de[_];var $=[];for(_ in p)$.push(`${_}=${p[_]}`);Ee=$}return Ee},Ee;function ze(p,_){if(x)return Le(18,1,p,_);p>>>=0,_>>>=0;var $=0;return ge().forEach((C,M)=>{var W=_+$;for(M=l()[p+4*M>>>2>>>0]=W,W=0;W<C.length;++W)i()[M++>>>0>>>0]=C.charCodeAt(W);i()[M>>>0>>>0]=0,$+=C.length+1}),0}function z(p,_){if(x)return Le(19,1,p,_);p>>>=0,_>>>=0;var $=ge();l()[p>>>2>>>0]=$.length;var C=0;return $.forEach(M=>C+=M.length+1),l()[_>>>2>>>0]=C,0}function _e(p){return x?Le(20,1,p):52}function Ie(p,_,$,C){return x?Le(21,1,p,_,$,C):52}function er(p,_,$,C,M){return x?Le(22,1,p,_,$,C,M):70}var fi=[null,[],[]];function Fm(p,_,$,C){if(x)return Le(23,1,p,_,$,C);_>>>=0,$>>>=0,C>>>=0;for(var M=0,W=0;W<$;W++){var j=l()[_>>>2>>>0],fe=l()[_+4>>>2>>>0];_+=8;for(var ce=0;ce<fe;ce++){var pe=s()[j+ce>>>0],we=fi[p];pe===0||pe===10?((p===1?q:D)(ii(we,0)),we.length=0):we.push(pe)}M+=fe}return l()[C>>>2>>>0]=M,0}var Vm=[31,29,31,30,31,30,31,31,30,31,30,31],Hm=[31,28,31,30,31,30,31,31,30,31,30,31];function o3(p){var _=Array(Qn(p)+1);return pi(p,_,0,_.length),_}var l3=(p,_)=>{i().set(p,_>>>0)};function Gm(p,_,$,C){function M(R,be,Be){for(R=typeof R=="number"?R.toString():R||"";R.length<be;)R=Be[0]+R;return R}function W(R,be){return M(R,be,"0")}function j(R,be){function Be(lg){return 0>lg?-1:0<lg?1:0}var Mr;return(Mr=Be(R.getFullYear()-be.getFullYear()))===0&&(Mr=Be(R.getMonth()-be.getMonth()))===0&&(Mr=Be(R.getDate()-be.getDate())),Mr}function fe(R){switch(R.getDay()){case 0:return new Date(R.getFullYear()-1,11,29);case 1:return R;case 2:return new Date(R.getFullYear(),0,3);case 3:return new Date(R.getFullYear(),0,2);case 4:return new Date(R.getFullYear(),0,1);case 5:return new Date(R.getFullYear()-1,11,31);case 6:return new Date(R.getFullYear()-1,11,30)}}function ce(R){var be=R.$a;for(R=new Date(new Date(R.ab+1900,0,1).getTime());0<be;){var Be=R.getMonth(),Mr=(b(R.getFullYear())?Vm:Hm)[Be];if(be>Mr-R.getDate())be-=Mr-R.getDate()+1,R.setDate(1),11>Be?R.setMonth(Be+1):(R.setMonth(0),R.setFullYear(R.getFullYear()+1));else{R.setDate(R.getDate()+be);break}}return Be=new Date(R.getFullYear()+1,0,4),be=fe(new Date(R.getFullYear(),0,4)),Be=fe(Be),0>=j(be,R)?0>=j(Be,R)?R.getFullYear()+1:R.getFullYear():R.getFullYear()-1}p>>>=0,_>>>=0,$>>>=0,C>>>=0;var pe=l()[C+40>>>2>>>0];C={Hb:o()[C>>>2>>>0],Gb:o()[C+4>>>2>>>0],eb:o()[C+8>>>2>>>0],jb:o()[C+12>>>2>>>0],fb:o()[C+16>>>2>>>0],ab:o()[C+20>>>2>>>0],Wa:o()[C+24>>>2>>>0],$a:o()[C+28>>>2>>>0],Ob:o()[C+32>>>2>>>0],Fb:o()[C+36>>>2>>>0],Ib:pe?ot(pe):""},$=ot($),pe={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(var we in pe)$=$.replace(new RegExp(we,"g"),pe[we]);var Me="Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),Ne="January February March April May June July August September October November December".split(" ");pe={"%a":R=>Me[R.Wa].substring(0,3),"%A":R=>Me[R.Wa],"%b":R=>Ne[R.fb].substring(0,3),"%B":R=>Ne[R.fb],"%C":R=>W((R.ab+1900)/100|0,2),"%d":R=>W(R.jb,2),"%e":R=>M(R.jb,2," "),"%g":R=>ce(R).toString().substring(2),"%G":R=>ce(R),"%H":R=>W(R.eb,2),"%I":R=>(R=R.eb,R==0?R=12:12<R&&(R-=12),W(R,2)),"%j":R=>{for(var be=0,Be=0;Be<=R.fb-1;be+=(b(R.ab+1900)?Vm:Hm)[Be++]);return W(R.jb+be,3)},"%m":R=>W(R.fb+1,2),"%M":R=>W(R.Gb,2),"%n":()=>`
`,"%p":R=>0<=R.eb&&12>R.eb?"AM":"PM","%S":R=>W(R.Hb,2),"%t":()=>"	","%u":R=>R.Wa||7,"%U":R=>W(Math.floor((R.$a+7-R.Wa)/7),2),"%V":R=>{var be=Math.floor((R.$a+7-(R.Wa+6)%7)/7);if(2>=(R.Wa+371-R.$a-2)%7&&be++,be)be==53&&(Be=(R.Wa+371-R.$a)%7,Be==4||Be==3&&b(R.ab)||(be=1));else{be=52;var Be=(R.Wa+7-R.$a-1)%7;(Be==4||Be==5&&b(R.ab%400-1))&&be++}return W(be,2)},"%w":R=>R.Wa,"%W":R=>W(Math.floor((R.$a+7-(R.Wa+6)%7)/7),2),"%y":R=>(R.ab+1900).toString().substring(2),"%Y":R=>R.ab+1900,"%z":R=>{R=R.Fb;var be=0<=R;return R=Math.abs(R)/60,(be?"+":"-")+("0000"+(R/60*100+R%60)).slice(-4)},"%Z":R=>R.Ib,"%%":()=>"%"},$=$.replace(/%%/g,"\0\0");for(we in pe)$.includes(we)&&($=$.replace(new RegExp(we,"g"),pe[we](C)));return $=$.replace(/\0\0/g,"%"),we=o3($),we.length>_?0:(l3(we,p),we.length-1)}var mi=p=>{try{p()}catch(_){fr(_)}};function u3(){var p=se,_={};for(let[$,C]of Object.entries(p))_[$]=typeof C=="function"?function(){gi.push($);try{return C.apply(null,arguments)}finally{te||(gi.pop(),tr&&_r===1&&gi.length===0&&(_r=0,Zt+=1,mi(ag),typeof Fibers<"u"&&Fibers.Pb()))}}:C;return _}var _r=0,tr=null,qm=0,gi=[],jm={},Km={},d3=0,uo=null,c3=[];function p3(){return new Promise((p,_)=>{uo={resolve:p,reject:_}})}function h3(){var p=co(65548),_=p+12;l()[p>>>2>>>0]=_,l()[p+4>>>2>>>0]=_+65536,_=gi[0];var $=jm[_];return $===void 0&&($=d3++,jm[_]=$,Km[$]=_),_=$,o()[p+8>>>2>>>0]=_,p}function f3(){var p=o()[tr+8>>>2>>>0];return p=se[Km[p]],--Zt,p()}function m3(p){if(!te){if(_r===0){var _=!1,$=!1;p((C=0)=>{if(!te&&(qm=C,_=!0,$)){_r=2,mi(()=>ig(tr)),typeof Browser<"u"&&Browser.ib.vb&&Browser.ib.resume(),C=!1;try{var M=f3()}catch(fe){M=fe,C=!0}var W=!1;if(!tr){var j=uo;j&&(uo=null,(C?j.reject:j.resolve)(M),W=!0)}if(C&&!W)throw M}}),$=!0,_||(_r=1,tr=h3(),typeof Browser<"u"&&Browser.ib.vb&&Browser.ib.pause(),mi(()=>ng(tr)))}else _r===2?(_r=0,mi(sg),Xm(tr),tr=null,c3.forEach(C=>{if(!te)try{C(),hi()}catch(M){Yn(M)}})):fr(`invalid state: ${_r}`);return qm}}function g3(p){return m3(_=>{p().then(_)})}me.hb();var _3=[Kn,Xn,li,di,ci,Zn,rn,Jn,ea,ta,ra,na,aa,ia,sa,oa,P,Y,ze,z,_e,Ie,er,Fm],y3={r:function(p,_,$){return g3(async()=>{await u.xb(p,_,$)})},b:function(p,_,$){throw p>>>=0,new lo(p).hb(_>>>0,$>>>0),tn=p,tn},N:function(p){Qm(p>>>0,!S,1,!v,131072,!1),me.ob()},l:function(p){p>>>=0,x?postMessage({cmd:"cleanupThread",thread:p}):me.mb(me.Qa[p])},J:ui,i:di,T:ci,F:Zn,H:rn,U:Jn,R:ea,L:ta,Q:ra,p:na,G:aa,D:ia,S:sa,E:oa,q:()=>1,B:function(p,_){p>>>=0,p==_>>>0?setTimeout(()=>Or()):x?postMessage({targetThread:p,cmd:"checkMailbox"}):(p=me.Qa[p])&&p.postMessage({cmd:"checkMailbox"})},K:function(p,_,$,C){_>>>=0,m.length=$,C=C>>>0>>>3;for(var M=0;M<$;M++)m[M]=c()[C+M>>>0];return p=0>p?Qr[-p-1]:_3[p],me.ub=_,_=p.apply(null,m),me.ub=0,_},M:gr,W:function(p){E&&me.Qa[p>>>0].ref()},u:function(p,_,$){p=_+2097152>>>0<4194305-!!p?(p>>>0)+4294967296*_:NaN,$>>>=0,p=new Date(1e3*p),o()[$>>>2>>>0]=p.getUTCSeconds(),o()[$+4>>>2>>>0]=p.getUTCMinutes(),o()[$+8>>>2>>>0]=p.getUTCHours(),o()[$+12>>>2>>>0]=p.getUTCDate(),o()[$+16>>>2>>>0]=p.getUTCMonth(),o()[$+20>>>2>>>0]=p.getUTCFullYear()-1900,o()[$+24>>>2>>>0]=p.getUTCDay(),p=(p.getTime()-Date.UTC(p.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,o()[$+28>>>2>>>0]=p},v:function(p,_,$){p=_+2097152>>>0<4194305-!!p?(p>>>0)+4294967296*_:NaN,$>>>=0,p=new Date(1e3*p),o()[$>>>2>>>0]=p.getSeconds(),o()[$+4>>>2>>>0]=p.getMinutes(),o()[$+8>>>2>>>0]=p.getHours(),o()[$+12>>>2>>>0]=p.getDate(),o()[$+16>>>2>>>0]=p.getMonth(),o()[$+20>>>2>>>0]=p.getFullYear()-1900,o()[$+24>>>2>>>0]=p.getDay(),_=(b(p.getFullYear())?k:I)[p.getMonth()]+p.getDate()-1|0,o()[$+28>>>2>>>0]=_,o()[$+36>>>2>>>0]=-(60*p.getTimezoneOffset()),_=new Date(p.getFullYear(),6,1).getTimezoneOffset();var C=new Date(p.getFullYear(),0,1).getTimezoneOffset();p=(_!=C&&p.getTimezoneOffset()==Math.min(C,_))|0,o()[$+32>>>2>>>0]=p},w:function(p){p>>>=0;var _=new Date(o()[p+20>>>2>>>0]+1900,o()[p+16>>>2>>>0],o()[p+12>>>2>>>0],o()[p+8>>>2>>>0],o()[p+4>>>2>>>0],o()[p>>>2>>>0],0),$=o()[p+32>>>2>>>0],C=_.getTimezoneOffset(),M=new Date(_.getFullYear(),6,1).getTimezoneOffset(),W=new Date(_.getFullYear(),0,1).getTimezoneOffset(),j=Math.min(W,M);return 0>$?o()[p+32>>>2>>>0]=+(M!=W&&j==C):0<$!=(j==C)&&(M=Math.max(W,M),_.setTime(_.getTime()+6e4*((0<$?j:M)-C))),o()[p+24>>>2>>>0]=_.getDay(),$=(b(_.getFullYear())?k:I)[_.getMonth()]+_.getDate()-1|0,o()[p+28>>>2>>>0]=$,o()[p>>>2>>>0]=_.getSeconds(),o()[p+4>>>2>>>0]=_.getMinutes(),o()[p+8>>>2>>>0]=_.getHours(),o()[p+12>>>2>>>0]=_.getDate(),o()[p+16>>>2>>>0]=_.getMonth(),o()[p+20>>>2>>>0]=_.getYear(),p=_.getTime(),isNaN(p)?(o()[Ym()>>>2>>>0]=61,p=-1):p/=1e3,eg((or=p,1<=+Math.abs(or)?0<or?+Math.floor(or/4294967296)>>>0:~~+Math.ceil((or-+(~~or>>>0))/4294967296)>>>0:0)),p>>>0},s:P,t:Y,A:function(p,_,$){function C(pe){return(pe=pe.toTimeString().match(/\(([A-Za-z ]+)\)$/))?pe[1]:"GMT"}p>>>=0,_>>>=0,$>>>=0;var M=new Date().getFullYear(),W=new Date(M,0,1),j=new Date(M,6,1);M=W.getTimezoneOffset();var fe=j.getTimezoneOffset(),ce=Math.max(M,fe);l()[p>>>2>>>0]=60*ce,o()[_>>>2>>>0]=+(M!=fe),p=C(W),_=C(j),p=ae(p),_=ae(_),fe<M?(l()[$>>>2>>>0]=p,l()[$+4>>>2>>>0]=_):(l()[$>>>2>>>0]=_,l()[$+4>>>2>>>0]=p)},d:()=>{fr("")},c:function(p,_,$){return p>>>=0,_=le(_>>>0,$>>>0),Qr[p].apply(null,_)},k:function(p,_,$){return p>>>=0,_=le(_>>>0,$>>>0),Qr[p].apply(null,_)},m:()=>{},j:()=>Date.now(),V:()=>{throw Zt+=1,"unwind"},C:function(){return 4294901760},f:()=>performance.timeOrigin+performance.now(),g:()=>E?(Zg(),yr(Yo)).cpus().length:navigator.hardwareConcurrency,y:function(p){p>>>=0;var _=s().length;if(p<=_||4294901760<p)return!1;for(var $=1;4>=$;$*=2){var C=_*(1+.2/$);C=Math.min(C,p+100663296);var M=Math;C=Math.max(p,C);e:{M=(M.min.call(M,4294901760,C+(65536-C%65536)%65536)-L.buffer.byteLength+65535)/65536;try{L.grow(M),Ve();var W=1;break e}catch{}W=void 0}if(W)return!0}return!1},O:ze,P:z,I:mr,h:_e,o:Ie,x:er,n:Fm,a:L||u.wasmMemory,z:Gm,e:function(p,_,$,C){return Gm(p>>>0,_>>>0,$>>>0,C>>>0)}},se=function(){function p($,C){return se=$.exports,se=u3(),se=w3(),me.pb.push(se.Da),He.unshift(se.X),V=C,ni(),se}var _={a:y3};if(Mt++,u.instantiateWasm)try{return u.instantiateWasm(_,p)}catch($){D(`Module.instantiateWasm callback failed with error: ${$}`),f($)}return ai(_,function($){p($.instance,$.module)}).catch(f),{}}();u._OrtInit=(p,_)=>(u._OrtInit=se.Y)(p,_),u._OrtGetLastError=(p,_)=>(u._OrtGetLastError=se.Z)(p,_),u._OrtCreateSessionOptions=(p,_,$,C,M,W,j,fe,ce,pe)=>(u._OrtCreateSessionOptions=se._)(p,_,$,C,M,W,j,fe,ce,pe),u._OrtAppendExecutionProvider=(p,_)=>(u._OrtAppendExecutionProvider=se.$)(p,_),u._OrtAddFreeDimensionOverride=(p,_,$)=>(u._OrtAddFreeDimensionOverride=se.aa)(p,_,$),u._OrtAddSessionConfigEntry=(p,_,$)=>(u._OrtAddSessionConfigEntry=se.ba)(p,_,$),u._OrtReleaseSessionOptions=p=>(u._OrtReleaseSessionOptions=se.ca)(p),u._OrtCreateSession=(p,_,$)=>(u._OrtCreateSession=se.da)(p,_,$),u._OrtReleaseSession=p=>(u._OrtReleaseSession=se.ea)(p),u._OrtGetInputOutputCount=(p,_,$)=>(u._OrtGetInputOutputCount=se.fa)(p,_,$),u._OrtGetInputName=(p,_)=>(u._OrtGetInputName=se.ga)(p,_),u._OrtGetOutputName=(p,_)=>(u._OrtGetOutputName=se.ha)(p,_),u._OrtFree=p=>(u._OrtFree=se.ia)(p),u._OrtCreateTensor=(p,_,$,C,M,W)=>(u._OrtCreateTensor=se.ja)(p,_,$,C,M,W),u._OrtGetTensorData=(p,_,$,C,M)=>(u._OrtGetTensorData=se.ka)(p,_,$,C,M),u._OrtReleaseTensor=p=>(u._OrtReleaseTensor=se.la)(p),u._OrtCreateRunOptions=(p,_,$,C)=>(u._OrtCreateRunOptions=se.ma)(p,_,$,C),u._OrtAddRunConfigEntry=(p,_,$)=>(u._OrtAddRunConfigEntry=se.na)(p,_,$),u._OrtReleaseRunOptions=p=>(u._OrtReleaseRunOptions=se.oa)(p),u._OrtCreateBinding=p=>(u._OrtCreateBinding=se.pa)(p),u._OrtBindInput=(p,_,$)=>(u._OrtBindInput=se.qa)(p,_,$),u._OrtBindOutput=(p,_,$,C)=>(u._OrtBindOutput=se.ra)(p,_,$,C),u._OrtClearBoundOutputs=p=>(u._OrtClearBoundOutputs=se.sa)(p),u._OrtReleaseBinding=p=>(u._OrtReleaseBinding=se.ta)(p),u._OrtRunWithBinding=(p,_,$,C,M)=>(u._OrtRunWithBinding=se.ua)(p,_,$,C,M),u._OrtRun=(p,_,$,C,M,W,j,fe)=>(u._OrtRun=se.va)(p,_,$,C,M,W,j,fe),u._OrtEndProfiling=p=>(u._OrtEndProfiling=se.wa)(p),u._JsepOutput=(p,_,$)=>(u._JsepOutput=se.xa)(p,_,$),u._JsepGetNodeName=p=>(u._JsepGetNodeName=se.ya)(p);var Ym=()=>(Ym=se.za)(),_i=u._pthread_self=()=>(_i=u._pthread_self=se.Aa)(),co=u._malloc=p=>(co=u._malloc=se.Ba)(p),Xm=u._free=p=>(Xm=u._free=se.Ca)(p);u.__emscripten_tls_init=()=>(u.__emscripten_tls_init=se.Da)();var Qm=u.__emscripten_thread_init=(p,_,$,C,M,W)=>(Qm=u.__emscripten_thread_init=se.Fa)(p,_,$,C,M,W);u.__emscripten_thread_crashed=()=>(u.__emscripten_thread_crashed=se.Ga)();var Zm=(p,_,$,C)=>(Zm=se.Ha)(p,_,$,C),po=p=>(po=se.Ia)(p),ho=u.__emscripten_thread_exit=p=>(ho=u.__emscripten_thread_exit=se.Ja)(p),Jm=()=>(Jm=se.Ka)(),eg=p=>(eg=se.La)(p),tg=(p,_)=>(tg=se.Ma)(p,_),fo=()=>(fo=se.Na)(),yi=p=>(yi=se.Oa)(p),mo=p=>(mo=se.Pa)(p),rg=u.dynCall_ii=(p,_)=>(rg=u.dynCall_ii=se.Ra)(p,_),ng=p=>(ng=se.Sa)(p),ag=()=>(ag=se.Ta)(),ig=p=>(ig=se.Ua)(p),sg=()=>(sg=se.Va)();u.___start_em_js=944472,u.___stop_em_js=944633;function w3(){var p=se;p=Object.assign({},p);var _=C=>()=>C()>>>0,$=C=>M=>C(M)>>>0;return p.za=_(p.za),p.Aa=_(p.Aa),p.Ba=$(p.Ba),p.emscripten_main_runtime_thread_id=_(p.emscripten_main_runtime_thread_id),p.Na=_(p.Na),p.Pa=$(p.Pa),p}u.wasmMemory=L,u.stackAlloc=mo,u.stackSave=fo,u.stackRestore=yi,u.keepRuntimeAlive=()=>0<Zt,u.UTF8ToString=ot,u.stringToUTF8=he,u.lengthBytesUTF8=Qn,u.ExitStatus=Ir,u.PThread=me;var wi;Gt=function p(){wi||og(),wi||(Gt=p)};function og(){if(!(0<Mt))if(x)h(u),x||Tr(He),startWorker(u);else{if(u.preRun)for(typeof u.preRun=="function"&&(u.preRun=[u.preRun]);u.preRun.length;)We.unshift(u.preRun.shift());Tr(We),0<Mt||wi||(wi=!0,u.calledRun=!0,te||(x||Tr(He),h(u),x||Tr(Ot)))}}return og(),a.ready}})();typeof t=="object"&&typeof e=="object"?e.exports=r:typeof define=="function"&&define.amd&&define([],()=>r)}),e_=Dr((t,e)=>{e.exports='"use strict";var Module={},ENVIRONMENT_IS_NODE=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string";if(ENVIRONMENT_IS_NODE){var nodeWorkerThreads=require("worker_threads"),parentPort=nodeWorkerThreads.parentPort;parentPort.on("message",e=>onmessage({data:e}));var fs=require("fs"),vm=require("vm");Object.assign(global,{self:global,require,Module,location:{href:__filename},Worker:nodeWorkerThreads.Worker,importScripts:e=>vm.runInThisContext(fs.readFileSync(e,"utf8"),{filename:e}),postMessage:e=>parentPort.postMessage(e),performance:global.performance||{now:Date.now}})}var initializedJS=!1;function threadPrintErr(){var e=Array.prototype.slice.call(arguments).join(" ");if(ENVIRONMENT_IS_NODE){fs.writeSync(2,e+`\n`);return}console.error(e)}function threadAlert(){var e=Array.prototype.slice.call(arguments).join(" ");postMessage({cmd:"alert",text:e,threadId:Module._pthread_self()})}var err=threadPrintErr;self.alert=threadAlert,Module.instantiateWasm=(e,t)=>{var a=Module.wasmModule;Module.wasmModule=null;var r=new WebAssembly.Instance(a,e);return t(r)},self.onunhandledrejection=e=>{throw e.reason||e};function handleMessage(e){try{if(e.data.cmd==="load"){let a=[];self.onmessage=r=>a.push(r),self.startWorker=r=>{Module=r,postMessage({cmd:"loaded"});for(let s of a)handleMessage(s);self.onmessage=handleMessage},Module.wasmModule=e.data.wasmModule;for(const r of e.data.handlers)Module[r]=(...s)=>{postMessage({cmd:"callHandler",handler:r,args:s})};if(Module.wasmMemory=e.data.wasmMemory,Module.buffer=Module.wasmMemory.buffer,Module.ENVIRONMENT_IS_PTHREAD=!0,typeof e.data.urlOrBlob=="string")importScripts(e.data.urlOrBlob);else{var t=URL.createObjectURL(e.data.urlOrBlob);importScripts(t),URL.revokeObjectURL(t)}ortWasmThreaded(Module)}else if(e.data.cmd==="run"){Module.__emscripten_thread_init(e.data.pthread_ptr,0,0,1),Module.__emscripten_thread_mailbox_await(e.data.pthread_ptr),Module.establishStackSpace(),Module.PThread.receiveObjectTransfer(e.data),Module.PThread.threadInitTLS(),initializedJS||(initializedJS=!0);try{Module.invokeEntryPoint(e.data.start_routine,e.data.arg)}catch(a){if(a!="unwind")throw a}}else e.data.cmd==="cancel"?Module._pthread_self()&&Module.__emscripten_thread_exit(-1):e.data.target==="setimmediate"||(e.data.cmd==="checkMailbox"?initializedJS&&Module.checkMailbox():e.data.cmd&&(err(`worker.js received unknown command ${e.data.cmd}`),err(e.data)))}catch(a){throw Module.__emscripten_thread_crashed?.(),a}}self.onmessage=handleMessage;\n'}),Qo,Zo,Wi,ma,ln,Li,Jo,el,tl,rl,rt,un=Q(()=>{Qo=Yg(),Zo=Jg(),ma=!1,ln=!1,Li=!1,Jo=t=>{if(t===1)return!1;if(typeof SharedArrayBuffer>"u")return typeof self<"u"&&!self.crossOriginIsolated&&console.warn("env.wasm.numThreads is set to "+t+", but this will not work unless you enable crossOriginIsolated mode. See https://web.dev/cross-origin-isolation-guide/ for more info."),!1;typeof process<"u"&&process.versions&&process.versions.node&&console.warn("env.wasm.numThreads is set to "+t+", however, currently onnxruntime-web does not support multi-threads in Node.js. Please consider using onnxruntime-node for performance critical scenarios.");try{return typeof MessageChannel<"u"&&new MessageChannel().port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11]))}catch{return!1}},el=()=>{try{return WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,30,1,28,0,65,0,253,15,253,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,186,1,26,11]))}catch{return!1}},tl=(t,e)=>t?e?"ort-wasm-simd-threaded.wasm":"ort-wasm-simd.wasm":e?"ort-wasm-threaded.wasm":"ort-wasm.wasm",rl=async t=>{if(ma)return Promise.resolve();if(ln)throw new Error("multiple calls to 'initializeWebAssembly()' detected.");if(Li)throw new Error("previous call to 'initializeWebAssembly()' failed.");ln=!0;let e=t.initTimeout,r=t.numThreads,n=t.simd,a=Jo(r),i=n&&el(),s=t.wasmPaths,o=typeof s=="string"?s:void 0,l=tl(i,a),d=typeof s=="object"?s[l]:void 0,c=!1,u=[];if(e>0&&u.push(new Promise(h=>{setTimeout(()=>{c=!0,h()},e)})),u.push(new Promise((h,f)=>{let g=a?Zo:Qo,y={locateFile:(w,v)=>{if(a&&w.endsWith(".worker.js")&&typeof Blob<"u")return URL.createObjectURL(new Blob([e_()],{type:"text/javascript"}));if(w.endsWith(".wasm")){if(d)return d;let S=o??v;return l==="ort-wasm-simd.wasm"?S+"ort-wasm-simd.jsep.wasm":l==="ort-wasm-simd-threaded.wasm"?S+"ort-wasm-simd-threaded.jsep.wasm":S+l}return v+w}};if(a)if(y.numThreads=r,typeof Blob>"u")y.mainScriptUrlOrBlob=(void 0)(__dirname,"ort-wasm-threaded.js");else{let w=`var ortWasmThreaded=${g.toString()};`;y.mainScriptUrlOrBlob=new Blob([w],{type:"text/javascript"})}g(y).then(w=>{ln=!1,ma=!0,Wi=w,h()},w=>{ln=!1,Li=!0,f(w)})})),await Promise.race(u),c)throw new Error(`WebAssembly backend initializing failed due to timeout: ${e}ms`)},rt=()=>{if(ma&&Wi)return Wi;throw new Error("WebAssembly is not initialized yet.")}}),nt,ga,Ge,Fi=Q(()=>{un(),nt=(t,e)=>{let r=rt(),n=r.lengthBytesUTF8(t)+1,a=r._malloc(n);return r.stringToUTF8(t,a,n),e.push(a),a},ga=(t,e,r,n)=>{if(typeof t=="object"&&t!==null){if(r.has(t))throw new Error("Circular reference in options");r.add(t)}Object.entries(t).forEach(([a,i])=>{let s=e?e+a:a;if(typeof i=="object")ga(i,s+".",r,n);else if(typeof i=="string"||typeof i=="number")n(s,i.toString());else if(typeof i=="boolean")n(s,i?"1":"0");else throw new Error(`Can't handle extra config type: ${typeof i}`)})},Ge=t=>{let e=rt(),r=e.stackSave();try{let n=e.stackAlloc(8);e._OrtGetLastError(n,n+4);let a=e.HEAP32[n/4],i=e.HEAPU32[n/4+1],s=i?e.UTF8ToString(i):"";throw new Error(`${t} ERROR_CODE: ${a}, ERROR_MESSAGE: ${s}`)}finally{e.stackRestore(r)}}}),nl,t_=Q(()=>{un(),Fi(),nl=t=>{let e=rt(),r=0,n=[],a=t||{};try{if(t?.logSeverityLevel===void 0)a.logSeverityLevel=2;else if(typeof t.logSeverityLevel!="number"||!Number.isInteger(t.logSeverityLevel)||t.logSeverityLevel<0||t.logSeverityLevel>4)throw new Error(`log serverity level is not valid: ${t.logSeverityLevel}`);if(t?.logVerbosityLevel===void 0)a.logVerbosityLevel=0;else if(typeof t.logVerbosityLevel!="number"||!Number.isInteger(t.logVerbosityLevel))throw new Error(`log verbosity level is not valid: ${t.logVerbosityLevel}`);t?.terminate===void 0&&(a.terminate=!1);let i=0;return t?.tag!==void 0&&(i=nt(t.tag,n)),r=e._OrtCreateRunOptions(a.logSeverityLevel,a.logVerbosityLevel,!!a.terminate,i),r===0&&Ge("Can't create run options."),t?.extra!==void 0&&ga(t.extra,"",new WeakSet,(s,o)=>{let l=nt(s,n),d=nt(o,n);e._OrtAddRunConfigEntry(r,l,d)!==0&&Ge(`Can't set a run config entry: ${s} - ${o}.`)}),[r,n]}catch(i){throw r!==0&&e._OrtReleaseRunOptions(r),n.forEach(s=>e._free(s)),i}}}),al,il,sl,ol,ll,r_=Q(()=>{un(),Fi(),al=t=>{switch(t){case"disabled":return 0;case"basic":return 1;case"extended":return 2;case"all":return 99;default:throw new Error(`unsupported graph optimization level: ${t}`)}},il=t=>{switch(t){case"sequential":return 0;case"parallel":return 1;default:throw new Error(`unsupported execution mode: ${t}`)}},sl=t=>{t.extra||(t.extra={}),t.extra.session||(t.extra.session={});let e=t.extra.session;e.use_ort_model_bytes_directly||(e.use_ort_model_bytes_directly="1"),t.executionProviders&&t.executionProviders.some(r=>(typeof r=="string"?r:r.name)==="webgpu")&&(t.enableMemPattern=!1)},ol=(t,e,r)=>{for(let n of e){let a=typeof n=="string"?n:n.name;switch(a){case"webnn":if(a="WEBNN",typeof n!="string"){let s=n;if(s?.deviceType){let o=nt("deviceType",r),l=nt(s.deviceType,r);rt()._OrtAddSessionConfigEntry(t,o,l)!==0&&Ge(`Can't set a session config entry: 'deviceType' - ${s.deviceType}.`)}if(s?.numThreads){let o=s.numThreads;(typeof o!="number"||!Number.isInteger(o)||o<0)&&(o=0);let l=nt("numThreads",r),d=nt(o.toString(),r);rt()._OrtAddSessionConfigEntry(t,l,d)!==0&&Ge(`Can't set a session config entry: 'numThreads' - ${s.numThreads}.`)}if(s?.powerPreference){let o=nt("powerPreference",r),l=nt(s.powerPreference,r);rt()._OrtAddSessionConfigEntry(t,o,l)!==0&&Ge(`Can't set a session config entry: 'powerPreference' - ${s.powerPreference}.`)}}break;case"webgpu":if(a="JS",typeof n!="string"){let s=n;if(s?.preferredLayout){if(s.preferredLayout!=="NCHW"&&s.preferredLayout!=="NHWC")throw new Error(`preferredLayout must be either 'NCHW' or 'NHWC': ${s.preferredLayout}`);let o=nt("preferredLayout",r),l=nt(s.preferredLayout,r);rt()._OrtAddSessionConfigEntry(t,o,l)!==0&&Ge(`Can't set a session config entry: 'preferredLayout' - ${s.preferredLayout}.`)}}break;case"wasm":case"cpu":continue;default:throw new Error(`not supported execution provider: ${a}`)}let i=nt(a,r);rt()._OrtAppendExecutionProvider(t,i)!==0&&Ge(`Can't append execution provider: ${a}.`)}},ll=t=>{let e=rt(),r=0,n=[],a=t||{};sl(a);try{let i=al(a.graphOptimizationLevel??"all"),s=il(a.executionMode??"sequential"),o=typeof a.logId=="string"?nt(a.logId,n):0,l=a.logSeverityLevel??2;if(!Number.isInteger(l)||l<0||l>4)throw new Error(`log serverity level is not valid: ${l}`);let d=a.logVerbosityLevel??0;if(!Number.isInteger(d)||d<0||d>4)throw new Error(`log verbosity level is not valid: ${d}`);let c=typeof a.optimizedModelFilePath=="string"?nt(a.optimizedModelFilePath,n):0;if(r=e._OrtCreateSessionOptions(i,!!a.enableCpuMemArena,!!a.enableMemPattern,s,!!a.enableProfiling,0,o,l,d,c),r===0&&Ge("Can't create session options."),a.executionProviders&&ol(r,a.executionProviders,n),a.freeDimensionOverrides)for(let[u,h]of Object.entries(a.freeDimensionOverrides)){if(typeof u!="string")throw new Error(`free dimension override name must be a string: ${u}`);if(typeof h!="number"||!Number.isInteger(h)||h<0)throw new Error(`free dimension override value must be a non-negative integer: ${h}`);let f=nt(u,n);e._OrtAddFreeDimensionOverride(r,f,h)!==0&&Ge(`Can't set a free dimension override: ${u} - ${h}.`)}return a.extra!==void 0&&ga(a.extra,"",new WeakSet,(u,h)=>{let f=nt(u,n),g=nt(h,n);e._OrtAddSessionConfigEntry(r,f,g)!==0&&Ge(`Can't set a session config entry: ${u} - ${h}.`)}),[r,n]}catch(i){throw r!==0&&e._OrtReleaseSessionOptions(r),n.forEach(s=>e._free(s)),i}}}),Vi,qt,_a,Hi,ya,Gi,qi,Ye=Q(()=>{Vi=t=>{switch(t){case"int8":return 3;case"uint8":return 2;case"bool":return 9;case"int16":return 5;case"uint16":return 4;case"int32":return 6;case"uint32":return 12;case"float16":return 10;case"float32":return 1;case"float64":return 11;case"string":return 8;case"int64":return 7;case"uint64":return 13;default:throw new Error(`unsupported data type: ${t}`)}},qt=t=>{switch(t){case 3:return"int8";case 2:return"uint8";case 9:return"bool";case 5:return"int16";case 4:return"uint16";case 6:return"int32";case 12:return"uint32";case 10:return"float16";case 1:return"float32";case 11:return"float64";case 8:return"string";case 7:return"int64";case 13:return"uint64";default:throw new Error(`unsupported data type: ${t}`)}},_a=t=>[void 0,4,1,1,2,2,4,8,void 0,1,2,8,4,8,void 0,void 0,void 0][t],Hi=t=>{switch(t){case"float16":return Uint16Array;case"float32":return Float32Array;case"uint8":return Uint8Array;case"int8":return Int8Array;case"uint16":return Uint16Array;case"int16":return Int16Array;case"int32":return Int32Array;case"bool":return Uint8Array;case"float64":return Float64Array;case"uint32":return Uint32Array;case"int64":return BigInt64Array;case"uint64":return BigUint64Array;default:throw new Error(`unsupported type: ${t}`)}},ya=t=>{switch(t){case"verbose":return 0;case"info":return 1;case"warning":return 2;case"error":return 3;case"fatal":return 4;default:throw new Error(`unsupported logging level: ${t}`)}},Gi=t=>t==="float32"||t==="int32"||t==="int64"||t==="bool"||t==="float16"||t==="uint32",qi=t=>{switch(t){case"none":return 0;case"cpu":return 1;case"cpu-pinned":return 2;case"texture":return 3;case"gpu-buffer":return 4;default:throw new Error(`unsupported data location: ${t}`)}}}),wa,ul=Q(()=>{wa=async t=>{if(typeof t=="string")if(typeof process<"u"&&process.versions&&process.versions.node)try{return new Uint8Array(await(void 0)(t))}catch(e){if(e.code==="ERR_FS_FILE_TOO_LARGE"){let r=(void 0)(t),n=[];for await(let a of r)n.push(a);return new Uint8Array(Buffer.concat(n))}throw e}else{let e=await fetch(t);if(!e.ok)throw new Error(`failed to load external data file: ${t}`);let r=e.headers.get("Content-Length"),n=r?parseInt(r,10):0;if(n<1073741824)return new Uint8Array(await e.arrayBuffer());{if(!e.body)throw new Error(`failed to load external data file: ${t}, no response body.`);let a=e.body.getReader(),i;try{i=new ArrayBuffer(n)}catch(o){if(o instanceof RangeError){let l=Math.ceil(n/65536);i=new WebAssembly.Memory({initial:l,maximum:l}).buffer}else throw o}let s=0;for(;;){let{done:o,value:l}=await a.read();if(o)break;let d=l.byteLength;new Uint8Array(i,s,d).set(l),s+=d}return new Uint8Array(i,0,n)}}else return t instanceof Blob?new Uint8Array(await t.arrayBuffer()):t instanceof Uint8Array?t:new Uint8Array(t)}}),dl,cl,pl,hl,fl,ml,at,wr=Q(()=>{Ye(),dl=["V","I","W","E","F"],cl=(t,e)=>{console.log(`[${dl[t]},${new Date().toISOString()}]${e}`)},fl=(t,e)=>{pl=t,hl=e},ml=(t,e)=>{let r=ya(t),n=ya(pl);r>=n&&cl(r,typeof e=="function"?e():e)},at=(...t)=>{hl&&ml(...t)}}),gl,n_=Q(()=>{Ye(),gl=(t,e)=>new(Hi(e))(t)}),ji=Q(()=>{}),dn,_l,Ki,Yi,yl,wl,a_=Q(()=>{wr(),ji(),dn=t=>Math.ceil(t/16)*16,_l=1,Ki=()=>_l++,Yi=async(t,e,r,n)=>{let a=dn(r),i=t.device.createBuffer({size:a,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ});try{let s=t.getCommandEncoder();t.endComputePass(),s.copyBufferToBuffer(e,0,i,0,a),t.flush(),await i.mapAsync(GPUMapMode.READ);let o=i.getMappedRange();if(n){let l=n();return l.set(new Uint8Array(o,0,r)),l}else return new Uint8Array(o.slice(0,r))}finally{i.destroy()}},yl=class{constructor(t){this.backend=t,this.storageCache=new Map,this.freeBuffers=new Map,this.freeUniformBuffers=new Map,this.buffersForUploadingPending=[],this.buffersPending=[],this.externalBuffers=new Map}upload(t,e){let r=e.buffer,n=e.byteOffset,a=e.byteLength,i=dn(a),s=this.storageCache.get(t);if(!s)throw new Error("gpu data for uploading does not exist");if(s.originalSize!==a)throw new Error(`inconsistent data size. gpu data size=${s.originalSize}, data size=${a}`);let o=this.backend.device.createBuffer({mappedAtCreation:!0,size:i,usage:GPUBufferUsage.MAP_WRITE|GPUBufferUsage.COPY_SRC}),l=o.getMappedRange();new Uint8Array(l).set(new Uint8Array(r,n,a)),o.unmap();let d=this.backend.getCommandEncoder();this.backend.endComputePass(),d.copyBufferToBuffer(o,0,s.gpuData.buffer,0,i),at("verbose",()=>`[WebGPU] GpuDataManager.upload(id=${t})`),this.buffersForUploadingPending.push(o)}memcpy(t,e){let r=this.storageCache.get(t);if(!r)throw new Error("source gpu data for memcpy does not exist");let n=this.storageCache.get(e);if(!n)throw new Error("destination gpu data for memcpy does not exist");if(r.originalSize!==n.originalSize)throw new Error("inconsistent source and destination gpu data size");let a=dn(r.originalSize),i=this.backend.getCommandEncoder();this.backend.endComputePass(),i.copyBufferToBuffer(r.gpuData.buffer,0,n.gpuData.buffer,0,a)}registerExternalBuffer(t,e,r){let n;if(r){if(n=this.externalBuffers.get(r),n===void 0)throw new Error("previous buffer is not registered");if(t===r)return at("verbose",()=>`[WebGPU] GpuDataManager.registerExternalBuffer(size=${e}) => id=${n}, buffer is the same, skip.`),n;this.externalBuffers.delete(r)}else n=Ki();return this.storageCache.set(n,{gpuData:{id:n,type:0,buffer:t},originalSize:e}),this.externalBuffers.set(t,n),at("verbose",()=>`[WebGPU] GpuDataManager.registerExternalBuffer(size=${e}) => id=${n}, registered.`),n}unregisterExternalBuffer(t){let e=this.externalBuffers.get(t);e!==void 0&&(this.storageCache.delete(e),this.externalBuffers.delete(t),at("verbose",()=>`[WebGPU] GpuDataManager.unregisterExternalBuffer() => id=${e}`))}create(t,e=GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST){let r=dn(t),n,a=(e&GPUBufferUsage.STORAGE)===GPUBufferUsage.STORAGE,i=(e&GPUBufferUsage.UNIFORM)===GPUBufferUsage.UNIFORM;if(a||i){let o=a?this.freeBuffers:this.freeUniformBuffers,l=o.get(r);l||(l=[],o.set(r,l)),l.length>0?n=l.pop():n=this.backend.device.createBuffer({size:r,usage:e})}else n=this.backend.device.createBuffer({size:r,usage:e});let s={id:Ki(),type:0,buffer:n};return this.storageCache.set(s.id,{gpuData:s,originalSize:t}),at("verbose",()=>`[WebGPU] GpuDataManager.create(size=${t}) => id=${s.id}`),s}get(t){return this.storageCache.get(t)?.gpuData}release(t){let e=this.storageCache.get(t);if(!e)throw new Error("releasing data does not exist");return at("verbose",()=>`[WebGPU] GpuDataManager.release(id=${t}), gpuDataId=${e.gpuData.id}`),this.storageCache.delete(t),this.buffersPending.push(e.gpuData.buffer),e.originalSize}async download(t,e){let r=this.storageCache.get(t);if(!r)throw new Error("data does not exist");await Yi(this.backend,r.gpuData.buffer,r.originalSize,e)}refreshPendingBuffers(){for(let t of this.buffersForUploadingPending)t.destroy();this.buffersForUploadingPending=[];for(let t of this.buffersPending)(t.usage&GPUBufferUsage.STORAGE)===GPUBufferUsage.STORAGE?this.freeBuffers.get(t.size).push(t):(t.usage&GPUBufferUsage.UNIFORM)===GPUBufferUsage.UNIFORM?this.freeUniformBuffers.get(t.size).push(t):t.destroy();this.buffersPending=[]}dispose(){this.freeBuffers.forEach(t=>{t.forEach(e=>{e.destroy()})}),this.freeUniformBuffers.forEach(t=>{t.forEach(e=>{e.destroy()})}),this.storageCache.forEach(t=>{t.gpuData.buffer.destroy()}),this.storageCache=new Map,this.freeBuffers=new Map,this.freeUniformBuffers=new Map}},wl=(...t)=>new yl(...t)}),vl,qe,it=Q(()=>{vl=class{constructor(t){Object.assign(this,t)}get cacheKey(){return this.key||(this.key=Object.getOwnPropertyNames(this).sort().map(t=>`${this[t]}`).join(";")),this.key}},qe=t=>new vl(t)}),bl,Wr,ee,va,$l,Xi,Qi,Ae=Q(()=>{bl=class{static calcMatMulShape(t,e){return t[1]!==e[0]?void 0:[t[0],e[1]]}},Wr=class{static calcShape(t,e,r=!1){let n=t.length,a=e.length;if(n===0)return e;if(a===0)return t;let i=Math.max(t.length,e.length),s=new Array(i);if(r){if(n<2||a<2)return;let o=bl.calcMatMulShape([t[n-2],t[n-1]],[e[a-2],e[a-1]]);if(o===void 0)return;[s[i-2],s[i-1]]=o}for(let o=r?3:1;o<=i;o++){let l=n-o<0?1:t[n-o],d=a-o<0?1:e[a-o];if(l!==d&&l>1&&d>1)return;s[i-o]=Math.max(l,d)}return s}static isValidBroadcast(t,e){let r=t.length,n=e.length;if(r>n)return!1;for(let a=1;a<=r;a++)if(t[r-a]!==1&&t[r-a]!==e[n-a])return!1;return!0}},ee=class vi{static size(e){return vi.getSizeFromDimensionRange(e,0,e.length)}static sizeFromDimension(e,r){if(r<0||r>e.length)throw new Error(`invalid dimension of ${r} for sizeFromDimension as Tensor has ${e.length} dimensions.`);return vi.getSizeFromDimensionRange(e,r,e.length)}static sizeToDimension(e,r){if(r<0||r>e.length)throw new Error(`invalid dimension of ${r} for sizeToDimension as Tensor has ${e.length} dimensions.`);return vi.getSizeFromDimensionRange(e,0,r)}static getSizeFromDimensionRange(e,r,n){let a=1;for(let i=r;i<n;i++){if(e[i]<0)throw new Error("cannot get valid size from specified dimension range. Most likely the range contains negative values in them.");a*=e[i]}return a}static computeStrides(e){let r=e.length;if(r===0)return[];if(r===1)return[1];let n=new Array(r);n[r-1]=1,n[r-2]=e[r-1];for(let a=r-3;a>=0;--a)n[a]=n[a+1]*e[a+1];return n}static normalizeAxis(e,r){if(e<-r&&e>=r)throw new Error("unsupported axis for this operation.");return e<0?e+r:e}static normalizeAxes(e,r){return e.map(n=>this.normalizeAxis(n,r??e.length))}static sortBasedOnPerm(e,r){return r?r.map(n=>e[n]):e.slice().reverse()}static padShape(e,r){let n=e.length;return e.map((a,i)=>a+r[i]+r[i+n])}static areEqual(e,r){return e.length!==r.length?!1:e.every((n,a)=>n===r[a])}},va=class la{static adjustPoolAttributes(e,r,n,a,i,s){if(!e&&n.length!==r.length-2)throw new Error("length of specified kernel shapes should be 2 less than length of input dimensions");if(e)for(let o=0;o<r.length-2;o++)o>=n.length?n.push(r[o+2]):n[o]=r[o+2];for(let o=0;o<n.length;o++)if(o<a.length){if(a[o]<0)throw new Error("strides should be greater than or equal to 1")}else a.push(1);for(let o=0;o<n.length;o++)if(o<i.length){if(i[o]<0)throw new Error("dilations should be greater than or equal to 1")}else i.push(1);for(let o=0;o<n.length*2;o++)if(o<s.length){if(s[o]<0)throw new Error("pad should be greater than or equal to 1")}else s.push(0);for(let o=0;o<n.length;o++){if(n[o]<=0)throw new Error("kernel shapes need to be greater than 0");if(s[o]>=n[o]||s[o+n.length]>=n[o])throw new Error("pads should be smaller than kernel")}}static adjustPadsBasedOnAutoPad(e,r,n,a,i,s,o){if(o){if(i.length!==2*(e.length-2))throw new Error("length of pads should be twice the length of data dimensions");if(r.length!==e.length-2)throw new Error("length of strides should be the length of data dimensions");if(a.length!==e.length-2)throw new Error("length of kernel shapes should be the length of data dimensions");for(let l=0;l<e.length-2;l++)la.adjustPadAndReturnShape(e[l+(s?1:2)],r[l],n[l],a[l],i,l,l+e.length-2,o)}}static computePoolOutputShape(e,r,n,a,i,s,o){if(r.length<=0)throw new Error("input shape must be of size greater than 0");let l=[r[0],r[1]];return la.computeShapeHelper(e,r,l,n,a,i,s,o),l}static computeConvOutputShape(e,r,n,a,i,s,o){if(e.length<=0||r.length<=0)throw new Error("invalid input tensor dims or invalid filter tensor dims");let l=[e[0],r[0]];return la.computeShapeHelper(!1,e,l,n,a,i,s,o),l}static computeShapeHelper(e,r,n,a,i,s,o,l){if(e)for(let d=0;d<r.length-2;d++)n.push(1);else for(let d=0;d<r.length-2;d++)n.push(la.adjustPadAndReturnShape(r[d+2],a[d],i[d],s[d],o,d,d+r.length-2,l))}static adjustPadAndReturnShape(e,r,n,a,i,s,o,l){let d=n*(a-1)+1;if(l&&l!=="NOTSET")switch(l){case"VALID":return i[s]=0,i[o]=0,Math.floor((e-d)/r+1);case"SAME_LOWER":case"SAME_UPPER":if(n!==1)throw new Error("Dilation not supported for SAME_UPPER or SAME_LOWER");{let c=((e+r-1)/r-1)*r+a-e;return i[s]=Math.floor(l==="SAME_LOWER"?(c+1)/2:c/2),i[o]=c-i[s],Math.floor((e+c-a)/r+1)}default:throw new Error("Unsupported AutoPad type")}else return Math.floor((e+i[s]+i[o]-d)/r+1)}},$l=class{static getShapeOfGemmResult(t,e,r,n,a){if(t.length!==2||r.length!==2)throw new Error("shape need to be of size 2");let i,s,o;e?(i=t[1],s=t[0]):(i=t[0],s=t[1]);let l=-1;if(n?(o=r[0],l=1):(o=r[1],l=0),r[l]!==s)throw new Error("dimension mismatch");if(i<=0||o<=0||s<=0)throw new Error("invalid shape specified");if(a&&!Wr.isValidBroadcast(a,[i,o]))throw new Error("gemm: invalid bias shape for broadcast");return[i,o,s]}},Xi=-3402823466385289e23,Qi=3402823466385289e23}),xl,ba,Ct,rr,ie,wt,vt,nr,jt,xe,$a,J,ve,Zi,Sl,kl,cn,st,Ce=Q(()=>{Ye(),Ae(),xl=64,ba=(t,e)=>{if(e===3)throw new Error("vec3 has same alignment as vec4, use vec4 instead");switch(t){case 10:return e>1?`vec${e}<f16>`:"f16";case 1:return e>1?`vec${e}<f32>`:"f32";case 6:return e>1?`vec${e}<i32>`:"i32";case 12:return e>1?`vec${e}<u32>`:"u32";case 7:if(e>1)throw new Error("currently not supported vecX of uint64 yet");return["vec2<u32>","i32"];case 13:if(e>1)throw new Error("currently not supported vecX of uint64 yet");return["vec2<u32>","u32"];case 9:if(e!==4)throw new Error("bool must be vec4");return["u32","vec4<bool>"];default:throw new Error(`Unknown data type: ${t}`)}},Ct=(t,e=1)=>{let r=ba(t,e);return typeof r=="string"?r:r[0]},rr=(t,e=1)=>{let r=ba(t,e);return typeof r=="string"?r:r[1]},ie=t=>t.length===0?[]:[{type:"uint32",data:t},{type:"uint32",data:ee.computeStrides(t)}],wt=t=>t%4===0?4:t%2===0?2:1,vt=(t="f32",e,r="0")=>!e||e===1?`${t}(${r})`:`vec${e}<${t}>(${r})`,nr=(t,e,r)=>t==="f32"?r:e===1?`f32(${r})`:`vec${e}f(${r})`,jt=(t,e)=>e===4?`(${t}.x + ${t}.y + ${t}.z + ${t}.w)`:e===2?`(${t}.x + ${t}.y)`:e===3?`(${t}.x + ${t}.y + ${t}.z)`:t,xe=(t,e,r)=>t.startsWith("uniforms.")&&r>4?typeof e=="string"?`${t}[(${e}) / 4][(${e}) % 4]`:`${t}[${Math.floor(e/4)}][${e%4}]`:r>1?`${t}[${e}]`:t,$a=(t,e,r,n,a)=>{let i=typeof r=="number",s=i?r:r.length,o=[...new Array(s).keys()],l=s<2?"u32":s<=4?`vec${s}<u32>`:`array<u32, ${s}>`,d=ba(e,a),c=typeof d=="string"?d:d[1],u=typeof d=="string"?d:d[0],h={indices:l,value:c,storage:u,tensor:e},f=F=>typeof F=="string"?F:`${F}u`,g={offsetToIndices:!1,indicesToOffset:!1,broadcastedIndicesToOffset:!1,set:!1,setByIndices:!1,get:!1,getByIndices:!1},y=i?"uniforms.":"",w=`${y}${t}_shape`,v=`${y}${t}_strides`,S="";for(let F=0;F<s-1;F++)S+=`
    let dim${F} = current / ${xe(v,F,s)};
    let rest${F} = current % ${xe(v,F,s)};
    indices[${F}] = dim${F};
    current = rest${F};
    `;S+=`indices[${s-1}] = current;`;let E=s<2?"":`
  fn o2i_${t}(offset: u32) -> ${h.indices} {
    var indices: ${h.indices};
    var current = offset;
    ${S}
    return indices;
  }`,x=F=>(g.offsetToIndices=!0,s<2?F:`o2i_${t}(${F})`),A=[];if(s>=2)for(let F=s-1;F>=0;F--)A.push(`${xe(v,F,s)} * (indices[${F}])`);let T=s<2?"":`
  fn i2o_${t}(indices: ${h.indices}) -> u32 {
    return ${A.join("+")};
  }`,B=F=>(g.indicesToOffset=!0,s<2?F:`i2o_${t}(${F})`),U=(...F)=>s===0?"0u":`${h.indices}(${F.map(f).join(",")})`,H=(F,oe)=>s<2?`${F}`:`${xe(F,oe,s)}`,K=(F,oe,$e)=>s<2?`${F}=${$e};`:`${xe(F,oe,s)}=${$e};`,O={},G=(F,oe)=>{g.broadcastedIndicesToOffset=!0;let $e=`${oe.name}broadcastedIndicesTo${t}Offset`;if($e in O)return`${$e}(${F})`;let Ue=[];for(let De=s-1;De>=0;De--){let Ve=oe.indicesGet("outputIndices",De+oe.rank-s);Ue.push(`${H(v,De)} * (${Ve} % ${H(w,De)})`)}return O[$e]=`fn ${$e}(outputIndices: ${oe.type.indices}) -> u32 {
             return ${Ue.length>0?Ue.join("+"):"0u"};
           }`,`${$e}(${F})`},ne=(F,oe)=>(()=>{if(h.storage===h.value)return`${t}[${F}]=${oe};`;if(h.storage==="vec2<u32>"&&h.value==="i32")return`${t}[${F}]=vec2<u32>(u32(${oe}), select(0u, 0xFFFFFFFFu, ${oe} < 0));`;if(h.storage==="vec2<u32>"&&h.value==="u32")return`${t}[${F}]=vec2<u32>(u32(${oe}), 0u);`;if(h.storage==="u32"&&h.value==="vec4<bool>")return`${t}[${F}]=dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(${oe}));`;throw new Error(`not supported combination of storage type ${h.storage} and value type ${h.value} yet`)})(),q=F=>(()=>{if(h.storage===h.value)return`${t}[${F}]`;if(h.storage==="vec2<u32>"&&h.value==="i32")return`i32(${t}[${F}].x)`;if(h.storage==="vec2<u32>"&&h.value==="u32")return`u32(${t}[${F}].x)`;if(h.storage==="u32"&&h.value==="vec4<bool>")return`vec4<bool>(bool(${t}[${F}] & 0xFFu), bool(${t}[${F}] & 0xFF00u), bool(${t}[${F}] & 0xFF0000u), bool(${t}[${F}] & 0xFF000000u))`;throw new Error(`not supported combination of storage type ${h.storage} and value type ${h.value} yet`)})(),D=s<2?"":`
  fn get_${t}ByIndices(indices: ${h.indices}) -> ${c} {
    return ${q(`i2o_${t}(indices)`)};
  }`,L=s<2?"":(()=>{let F=o.map($e=>`d${$e}: u32`).join(", "),oe=o.map($e=>`d${$e}`).join(", ");return`
  fn get_${t}(${F}) -> ${c} {
    return get_${t}ByIndices(${U(oe)});
  }`})(),V=(...F)=>{if(F.length!==s)throw new Error(`indices length must be ${s}`);let oe=F.map(f).join(",");return s===0?q("0u"):s===1?q(oe[0]):(g.get=!0,g.getByIndices=!0,g.indicesToOffset=!0,`get_${t}(${oe})`)},te=F=>s<2?q(F):(g.getByIndices=!0,g.indicesToOffset=!0,`get_${t}ByIndices(${F})`),X=s<2?"":`
  fn set_${t}ByIndices(indices: ${h.indices}, value: ${c}) {
    ${ne(`i2o_${t}(indices)`,"value")}
  }`,ue=s<2?"":(()=>{let F=o.map($e=>`d${$e}: u32`).join(", "),oe=o.map($e=>`d${$e}`).join(", ");return`
  fn set_${t}(${F}, value: ${c}) {
    set_${t}ByIndices(${U(oe)}, value);
  }`})();return{impl:()=>{let F=[],oe=!1;return g.offsetToIndices&&(F.push(E),oe=!0),g.indicesToOffset&&(F.push(T),oe=!0),g.broadcastedIndicesToOffset&&(Object.values(O).forEach($e=>F.push($e)),oe=!0),g.set&&(F.push(ue),oe=!0),g.setByIndices&&(F.push(X),oe=!0),g.get&&(F.push(L),oe=!0),g.getByIndices&&(F.push(D),oe=!0),!i&&oe&&F.unshift(`const ${w} = ${h.indices}(${r.join(",")});`,`const ${v} = ${h.indices}(${ee.computeStrides(r).join(",")});`),F.join(`
`)},type:h,offsetToIndices:x,indicesToOffset:B,broadcastedIndicesToOffset:G,indices:U,indicesGet:H,indicesSet:K,set:(...F)=>{if(F.length!==s+1)throw new Error(`indices length must be ${s}`);let oe=F[s];if(typeof oe!="string")throw new Error("value must be string");let $e=F.slice(0,s).map(f).join(",");return s===0?ne("0u",oe):s===1?ne($e[0],oe):(g.set=!0,g.setByIndices=!0,g.indicesToOffset=!0,`set_${t}(${$e}, ${oe})`)},setByOffset:ne,setByIndices:(F,oe)=>s<2?ne(F,oe):(g.setByIndices=!0,g.indicesToOffset=!0,`set_${t}ByIndices(${F}, ${oe});`),get:V,getByOffset:q,getByIndices:te,usage:n,name:t,strides:v,shape:w,rank:s}},J=(t,e,r,n=1)=>$a(t,e,r,"input",n),ve=(t,e,r,n=1)=>$a(t,e,r,"output",n),Zi=(t,e,r,n=1)=>$a(t,e,r,"internal",n),Sl=class{constructor(t){this.normalizedDispatchGroup=t,this.internalVariables=[],this.variables=[],this.uniforms=[],this.variableIndex=0}guardAgainstOutOfBoundsWorkgroupSizes(t){return`if (global_idx >= ${typeof t=="number"?`${t}u`:t}) { return; }`}mainStart(t=xl){let e=typeof t=="number"?t:t[0],r=typeof t=="number"?1:t[1],n=typeof t=="number"?1:t[2],a=this.normalizedDispatchGroup[1]===1&&this.normalizedDispatchGroup[2]===1,i=a?`@builtin(global_invocation_id) global_id : vec3<u32>,
    @builtin(workgroup_id) workgroup_id : vec3<u32>,
    @builtin(local_invocation_id) local_id : vec3<u32>`:`@builtin(local_invocation_id) local_id : vec3<u32>,
    @builtin(local_invocation_index) local_idx : u32,
    @builtin(workgroup_id) workgroup_id : vec3<u32>,
    @builtin(num_workgroups) num_workgroups : vec3<u32>`,s=a?"let global_idx = global_id.x; let local_idx = local_id.x;":`let global_idx = (workgroup_id.z * num_workgroups[0] * num_workgroups[1] +
          workgroup_id.y * num_workgroups[0] + workgroup_id.x) * ${e*r*n}u + local_idx;`;return`@compute @workgroup_size(${e}, ${r}, ${n})
  fn main(${i}) {
    ${s}
  `}appendVariableUniforms(t){t.rank!==0&&(t.shape.startsWith("uniforms.")&&this.uniforms.push({name:t.shape.replace("uniforms.",""),type:"u32",length:t.rank}),t.strides.startsWith("uniforms.")&&this.uniforms.push({name:t.strides.replace("uniforms.",""),type:"u32",length:t.rank}))}declareVariable(t,e){if(t.usage==="internal")throw new Error("cannot use internal variable with declareVariable(). use registerInternalVariables() instead.");this.variables.push(t),this.appendVariableUniforms(t);let r=t.usage==="input"?"read":"read_write",n=t.type.storage;return`@group(0) @binding(${e}) var<storage, ${r}> ${t.name}: array<${n}>;`}declareVariables(...t){return t.map(e=>this.declareVariable(e,this.variableIndex++)).join(`
`)}registerInternalVariable(t){if(t.usage!=="internal")throw new Error("cannot use input or output variable with registerInternalVariable(). use declareVariables() instead.");this.internalVariables.push(t),this.appendVariableUniforms(t)}registerInternalVariables(...t){return t.forEach(e=>this.registerInternalVariable(e)),this}registerUniform(t,e,r=1){return this.uniforms.push({name:t,type:e,length:r}),this}registerUniforms(t){return this.uniforms=this.uniforms.concat(t),this}uniformDeclaration(){if(this.uniforms.length===0)return"";let t=[];for(let{name:e,type:r,length:n}of this.uniforms)if(n&&n>4)t.push(`${e}:array<vec4<${r}>, ${Math.ceil(n/4)}>`);else{let a=n==null||n===1?r:`vec${n}<${r}>`;t.push(`${e}:${a}`)}return`
      struct Uniforms { ${t.join(", ")} };
      @group(0) @binding(${this.variableIndex}) var<uniform> uniforms: Uniforms;`}get additionalImplementations(){return this.uniformDeclaration()+this.variables.map(t=>t.impl()).join(`
`)+this.internalVariables.map(t=>t.impl()).join(`
`)}},kl=t=>new Sl(t),cn=(t,e)=>{let r=t.length,n=[];for(let a=0;a<r;a++){let i=r-1-a,s=t[i]||1;(e[e.length-1-a]||1)>1&&s===1&&n.unshift(i)}return n},st=t=>!0}),El,Ji,Cl,Al,ur,Il,Tl,pn=Q(()=>{Ae(),it(),Ce(),El=t=>{if(!t||t.length!==1)throw new Error("Transpose requires 1 input.")},Ji=(t,e)=>e&&e.length!==t?[...new Array(t).keys()].reverse():e,Cl=(t,e)=>ee.sortBasedOnPerm(t,Ji(t.length,e)),Al=(t,e,r,n)=>{let a=[];a.push(`fn perm(i: ${n.type.indices}) -> ${r.type.indices} {
    var a: ${r.type.indices};`);for(let i=0;i<e;++i)a.push(r.indicesSet("a",t[i],`i[${i}]`));return a.push("return a;}"),a.join(`
`)},ur=(t,e)=>{let r=t.dataType,n=t.dims.length,a=Ji(n,e),i=st(n),s=Cl(t.dims,a),o=i?s.length:s,l=i?n:t.dims,d=ve("output",r,o),c=J("a",r,l),u=h=>`
  ${h.registerUniform("output_size","u32").declareVariables(c,d)}

  ${Al(a,n,c,d)}

  ${h.mainStart()}
    ${h.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}

    let indices = ${d.offsetToIndices("global_idx")};
    let aIndices = perm(indices);

    ${d.setByOffset("global_idx",c.getByIndices("aIndices"))}
  }`;return{name:"Transpose",shaderCache:{hint:`${e}`,inputDependencies:i?["rank"]:["dims"]},getRunData:h=>{let f=ee.size(s);return{outputs:[{dims:s,dataType:h[0].dataType}],dispatchGroup:{x:Math.ceil(f/64)},programUniforms:i?[{type:"uint32",data:f},...ie(h[0].dims),...ie(s)]:[{type:"uint32",data:f}]}},getShaderSource:u}},Il=(t,e)=>{El(t.inputs),t.compute(ur(t.inputs[0],e.perm))},Tl=t=>qe({perm:t.perm})}),Ol,Ml,zl,Bl,Rl,Dl,Pl,Nl,Ul,Wl,Pt,Ll,Fl,Vl,Hl,Gl,ql,jl,Kl,Yl,Xl,i_=Q(()=>{Ae(),Ce(),ts(),pn(),Ol={max:"select(bestValue, candidate, candidate > bestValue)",min:"select(bestValue, candidate, candidate < bestValue)",mean:"bestValue + candidate",sum:"bestValue + candidate",prod:"bestValue * candidate",sumSquare:"bestValue + candidate * candidate",logSumExp:"bestValue + exp(candidate)",l1:"bestValue + abs(candidate)",l2:"bestValue + candidate * candidate",logSum:"bestValue + candidate"},Ml={max:"select(bestValue, candidate, candidate > bestValue)",min:"select(bestValue, candidate, candidate < bestValue)",mean:"bestValue + candidate",sum:"bestValue + candidate",prod:"bestValue * candidate",sumSquare:"bestValue + candidate",logSumExp:"bestValue + candidate",l1:"bestValue + candidate",l2:"bestValue + candidate",logSum:"bestValue + candidate"},zl={max:"_A[offset]",min:"_A[offset]",mean:"0",sum:"0",prod:"1",sumSquare:"0",logSumExp:"0",l1:"0",l2:"0",logSum:"0"},Bl={max:"bestValue",min:"bestValue",sum:"bestValue",prod:"bestValue",sumSquare:"bestValue",logSumExp:"log(bestValue)",l1:"bestValue",l2:"sqrt(bestValue)",logSum:"log(bestValue)"},Rl=(t,e)=>{let r=[];for(let n=e-t;n<e;++n)r.push(n);return r},Dl=(t,e)=>{let r=[],n=t.length;for(let i=0;i<n;i++)e.indexOf(i)===-1&&r.push(t[i]);let a=e.map(i=>t[i]);return[r,a]},Pl=(t,e)=>{let r=t.length+e.length,n=[],a=0;for(let i=0;i<r;i++)e.indexOf(i)===-1?n.push(t[a++]):n.push(1);return n},Nl=(t,e)=>{for(let r=0;r<t.length;++r)if(t[t.length-r-1]!==e-1-r)return!1;return!0},Ul=(t,e)=>{let r=[];if(!Nl(t,e)){for(let n=0;n<e;++n)t.indexOf(n)===-1&&r.push(n);t.forEach(n=>r.push(n))}return r},Wl=(t,e,r,n,a,i,s)=>{let o=r[0].dims,l=ee.size(i),d=ee.size(s),c=J("_A",r[0].dataType,o),u=ve("output",a,i),h=32,f=`
          var<workgroup> aBestValues : array<${u.type.storage}, ${h}>;
       `;return{name:t,shaderCache:e,getShaderSource:g=>`
        ${g.registerUniform("reduceSize","u32").declareVariables(c,u)}
        ${f}
        fn DIV_CEIL(a : u32, b : u32) -> u32 {
          return ((a - 1u) / b + 1u);
         }
         ${g.mainStart(h)}

          let outputIndex = global_idx / ${h};
          let offset = outputIndex * uniforms.reduceSize;

          var bestValue = ${u.type.storage}(${zl[n]});
          let Length = uniforms.reduceSize;
          for (var k = local_idx; k < Length; k = k + ${h}) {
           let candidate = ${u.type.storage}(${c.getByOffset("offset + k")});
           bestValue = ${Ol[n]};
          }
          aBestValues[local_idx] = bestValue;
          workgroupBarrier();

         var reduceSize = min(Length, ${h}u);
         for (var currentSize = reduceSize / 2u; reduceSize > 1u;
             currentSize = reduceSize / 2u) {
           let interval = DIV_CEIL(reduceSize, 2u);
           if (local_idx < currentSize) {
            let candidate = aBestValues[local_idx + interval];
            bestValue = ${Ml[n]};
            aBestValues[local_idx] = bestValue;
           }
           reduceSize = interval;
           workgroupBarrier();
         }

         if (local_idx == 0u) {
          ${u.setByOffset("outputIndex",`${n==="mean"?`bestValue / ${u.type.storage}(uniforms.reduceSize)`:`${Bl[n]}`}`)};
         }
        }`,getRunData:()=>({outputs:[{dims:i,dataType:a}],dispatchGroup:{x:l},programUniforms:[{type:"uint32",data:d}]})}},Pt=(t,e,r,n)=>{let a=t.inputs.length===1?r:es(t.inputs,r),i=a.axes;i.length===0&&!a.noopWithEmptyAxes&&(i=t.inputs[0].dims.map((f,g)=>g));let s=ee.normalizeAxes(i,t.inputs[0].dims.length),o=s,l=t.inputs[0],d=Ul(o,t.inputs[0].dims.length);d.length>0&&(l=t.compute(ur(t.inputs[0],d),{inputs:[0],outputs:[-1]})[0],o=Rl(o.length,l.dims.length));let[c,u]=Dl(l.dims,o),h=c;a.keepDims&&(h=Pl(c,s)),t.compute(Wl(e,{hint:a.cacheKey,inputDependencies:["type"]},[l],n,t.inputs[0].dataType,h,u),{inputs:[l]})},Ll=(t,e)=>{Pt(t,"ReduceMeanShared",e,"mean")},Fl=(t,e)=>{Pt(t,"ReduceL1Shared",e,"l1")},Vl=(t,e)=>{Pt(t,"ReduceL2Shared",e,"l2")},Hl=(t,e)=>{Pt(t,"ReduceLogSumExpShared",e,"logSumExp")},Gl=(t,e)=>{Pt(t,"ReduceMaxShared",e,"max")},ql=(t,e)=>{Pt(t,"ReduceMinShared",e,"min")},jl=(t,e)=>{Pt(t,"ReduceProdShared",e,"prod")},Kl=(t,e)=>{Pt(t,"ReduceSumShared",e,"sum")},Yl=(t,e)=>{Pt(t,"ReduceSumSquareShared",e,"sumSquare")},Xl=(t,e)=>{Pt(t,"ReduceLogSumShared",e,"logSum")}}),Nt,Ql,xa,es,Ut,Zl,Jl,eu,tu,ru,nu,au,iu,su,ou,Wt,lu,uu,du,cu,pu,hu,fu,mu,gu,_u,ts=Q(()=>{Ae(),it(),Ce(),i_(),Nt=t=>{if(!t||t.length===0||t.length>2)throw new Error("Reduce op requires 1 or 2 inputs.");if(t.length===2&&t[1].dims.length!==1)throw new Error("Invalid axes input dims.")},Ql=t=>["","",`var value = ${t.getByIndices("input_indices")};`,""],xa=(t,e,r,n,a,i,s=!1,o=!1)=>{let l=[],d=r[0].dims,c=d.length,u=ee.normalizeAxes(a,c),h=!o&&u.length===0;d.forEach((y,w)=>{h||u.indexOf(w)>=0?s&&l.push(1):l.push(y)});let f=l.length,g=ee.size(l);return{name:t,shaderCache:e,getShaderSource:y=>{let w=[],v=J("_A",r[0].dataType,c),S=ve("output",i,f),E=n(v,S,u),x=E[2];for(let A=0,T=0;A<c;A++)h||u.indexOf(A)>=0?(s&&T++,x=`for(var j${A}: u32 = 0; j${A} < ${d[A]}; j${A}++) {
                  ${E[2].includes("last_index")?`let last_index = j${A};`:""}
                  ${v.indicesSet("input_indices",A,`j${A}`)}
                  ${x}
                }`):(w.push(`${v.indicesSet("input_indices",A,S.indicesGet("output_indices",T))};`),T++);return`

        ${y.registerUniform("output_size","u32").declareVariables(v,S)}

        ${y.mainStart()}
          ${y.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
          var input_indices: ${v.type.indices};
          let output_indices = ${S.offsetToIndices("global_idx")};

          ${w.join(`
`)}
          ${E[0]}       // init ops for reduce max/min
          ${E[1]}
          ${x}
          ${E[3]}
          ${E.length===4?S.setByOffset("global_idx","value"):E.slice(4).join(`
`)}
        }`},getRunData:()=>({outputs:[{dims:l,dataType:i}],dispatchGroup:{x:Math.ceil(g/64)},programUniforms:[{type:"uint32",data:g},...ie(d),...ie(l)]})}},es=(t,e)=>{let r=[];return t[1].dims[0]>0&&t[1].getBigInt64Array().forEach(n=>r.push(Number(n))),qe({axes:r,keepDims:e.keepDims,noopWithEmptyAxes:e.noopWithEmptyAxes})},Ut=(t,e,r,n)=>{let a=t.inputs,i=a.length===1?r:es(a,r);t.compute(xa(e,{hint:i.cacheKey,inputDependencies:["rank"]},[a[0]],i.noopWithEmptyAxes&&i.axes.length===0?Ql:n,i.axes,a[0].dataType,i.keepDims,i.noopWithEmptyAxes),{inputs:[0]})},Zl=(t,e)=>{Nt(t.inputs),Ut(t,"ReduceLogSum",e,(r,n)=>[`var value = ${n.type.storage}(0);`,"",`value += ${r.getByIndices("input_indices")};`,"value = log(value);"])},Jl=(t,e)=>{Nt(t.inputs),Ut(t,"ReduceL1",e,(r,n)=>[`var value = ${n.type.storage}(0);`,"",`value += abs(${r.getByIndices("input_indices")});`,""])},eu=(t,e)=>{Nt(t.inputs),Ut(t,"ReduceL2",e,(r,n)=>[`var t = ${n.type.value}(0); var value = ${n.type.value}(0);`,"",`t = ${r.getByIndices("input_indices")}; value += (t * t);`,"value = sqrt(value);"])},tu=(t,e)=>{Nt(t.inputs),Ut(t,"ReduceLogSumExp",e,(r,n)=>[`var value = ${n.type.storage}(0);`,"",`value += exp(${r.getByIndices("input_indices")});`,"value = log(value);"])},ru=(t,e)=>{Nt(t.inputs),Ut(t,"ReduceMax",e,(r,n,a)=>{let i=[];for(let s=0;s<r.rank;s++)(a.indexOf(s)>=0||a.length===0)&&i.push(r.indicesSet("input_indices",s,0));return[`${i.join(`
`)}`,`var value = ${r.getByIndices("input_indices")};`,`value = max(value, ${r.getByIndices("input_indices")});`,""]})},nu=(t,e)=>{Nt(t.inputs),Ut(t,"ReduceMean",e,(r,n,a)=>{let i=1;for(let s=0;s<r.rank;s++)(a.indexOf(s)>=0||a.length===0)&&(i*=t.inputs[0].dims[s]);return["var sum = f32(0);","",`sum += f32(${r.getByIndices("input_indices")});`,`let value = ${n.type.value}(sum / ${i});`]})},au=(t,e)=>{Nt(t.inputs),Ut(t,"ReduceMin",e,(r,n,a)=>{let i=[];for(let s=0;s<r.rank;s++)(a.indexOf(s)>=0||a.length===0)&&i.push(`input_indices[${s}] = 0;`);return[`${i.join(`
`)}`,`var value = ${r.getByIndices("input_indices")};`,`value = min(value, ${r.getByIndices("input_indices")});`,""]})},iu=(t,e)=>{Nt(t.inputs),Ut(t,"ReduceProd",e,(r,n)=>[`var value = ${n.type.storage}(1);`,"",`value *= ${r.getByIndices("input_indices")};`,""])},su=(t,e)=>{Nt(t.inputs),Ut(t,"ReduceSum",e,(r,n)=>[`var value = ${n.type.storage}(0);`,"",`value += ${r.getByIndices("input_indices")};`,""])},ou=(t,e)=>{Nt(t.inputs),Ut(t,"ReduceSumSquare",e,(r,n)=>[`var t = ${n.type.value}(0); var value = ${n.type.value}(0);`,"",`t = ${r.getByIndices("input_indices")}; value += t * t;`,""])},Wt=(t,e,r)=>{if(e.length===0)return r;let n=1,a=1;for(let i=0;i<e.length;i++)e.indexOf(i)===-1?n*=t[i]:a*=t[i];return a<32&&n>1024},lu=(t,e)=>{Wt(t.inputs[0].dims,e.axes,e.noopWithEmptyAxes)?nu(t,e):Ll(t,e)},uu=(t,e)=>{Wt(t.inputs[0].dims,e.axes,e.noopWithEmptyAxes)?Jl(t,e):Fl(t,e)},du=(t,e)=>{Wt(t.inputs[0].dims,e.axes,e.noopWithEmptyAxes)?eu(t,e):Vl(t,e)},cu=(t,e)=>{Wt(t.inputs[0].dims,e.axes,e.noopWithEmptyAxes)?tu(t,e):Hl(t,e)},pu=(t,e)=>{Wt(t.inputs[0].dims,e.axes,e.noopWithEmptyAxes)?ru(t,e):Gl(t,e)},hu=(t,e)=>{Wt(t.inputs[0].dims,e.axes,e.noopWithEmptyAxes)?au(t,e):ql(t,e)},fu=(t,e)=>{Wt(t.inputs[0].dims,e.axes,e.noopWithEmptyAxes)?iu(t,e):jl(t,e)},mu=(t,e)=>{Wt(t.inputs[0].dims,e.axes,e.noopWithEmptyAxes)?su(t,e):Kl(t,e)},gu=(t,e)=>{Wt(t.inputs[0].dims,e.axes,e.noopWithEmptyAxes)?ou(t,e):Yl(t,e)},_u=(t,e)=>{Wt(t.inputs[0].dims,e.axes,e.noopWithEmptyAxes)?Zl(t,e):Xl(t,e)}}),rs,yu,wu,ns,s_=Q(()=>{Ye(),it(),ts(),rs=t=>{if(!t||t.length===0||t.length>2)throw new Error("ArgMinMaxOp op requires 1 or 2 inputs.");if(t[0].dataType!==1)throw new Error("Invalid input type.")},yu=(t,e)=>{rs(t.inputs);let r=(n,a,i)=>{let s=[];for(let o=0;o<n.rank;o++)(i.indexOf(o)>=0||i.length===0)&&s.push(`input_indices[${o}] = 0;`);return[`${s.join(`
`)}`,`var value = ${n.getByIndices("input_indices")};
var best_index : i32 = 0;`,`if (${n.getByIndices("input_indices")} ${e.selectLastIndex>0?"<=":"<"} value) {
         value = ${n.getByIndices("input_indices")};
         best_index = i32(last_index);
       }`,"",a.setByOffset("global_idx","best_index")]};t.compute(xa("ArgMin",{hint:e.cacheKey,inputDependencies:["rank"]},[t.inputs[0]],r,[e.axis],7,e.keepDims),{inputs:[0]})},wu=(t,e)=>{rs(t.inputs);let r=(n,a,i)=>{let s=[];for(let o=0;o<n.rank;o++)(i.indexOf(o)>=0||i.length===0)&&s.push(`input_indices[${o}] = 0;`);return[`${s.join(`
`)}`,`var value = ${n.getByIndices("input_indices")};
var best_index : i32 = 0;`,`if (${n.getByIndices("input_indices")} ${e.selectLastIndex>0?">=":">"} value) {
         value = ${n.getByIndices("input_indices")};
         best_index = i32(last_index);
       }`,"",a.setByOffset("global_idx","best_index")]};t.compute(xa("argMax",{hint:e.cacheKey,inputDependencies:["rank"]},[t.inputs[0]],r,[e.axis],7,e.keepDims),{inputs:[0]})},ns=t=>qe(t)}),vu,bu,$u,xu,Sa,Su,ku,Eu=Q(()=>{Ye(),ji(),Ce(),vu=(t,e)=>{let r=t[0],n=t[1],a=t[2],i=t[3],s=t[4],o=t[5];if(s&&o)throw new Error("Attention cannot have both past and relative_position_bias");if(r.dims.length!==3)throw new Error('Input "input" must have 3 dimensions');let l=r.dims[0],d=r.dims[1],c=r.dims[2];if(a.dims.length!==1)throw new Error('Input "bias" is expected to have 1 dimensions');if(n.dims.length!==2)throw new Error('Input "weights" is expected to have 2 dimensions');if(n.dims[0]!==c)throw new Error("Input 1 dimension 0 should have same length as dimension 2 of input 0");if(a.dims[0]!==n.dims[1])throw new Error('Input "bias" dimension 0 should have same length as dimension 1 of input "weights"');let u=a.dims[0]/3,h=u,f=h;if(e.qkvHiddenSizes.length>0){if(e.qkvHiddenSizes.length!==3)throw new Error("qkv_hidden_sizes attribute should have 3 elements");for(let E of e.qkvHiddenSizes)if(E%e.numHeads!==0)throw new Error("qkv_hidden_sizes should be divisible by num_heads");u=e.qkvHiddenSizes[0],h=e.qkvHiddenSizes[1],f=e.qkvHiddenSizes[2]}let g=d;if(u!==h)throw new Error("qkv_hidden_sizes first element should be same as the second");if(a.dims[0]!==u+h+f)throw new Error('Input "bias" dimension 0 should have same length as sum of Q/K/V hidden sizes');let y=0;if(s){if(h!==f)throw new Error('Input "past" expect k_hidden_size == v_hidden_size');if(s.dims.length!==5)throw new Error('Input "past" must have 5 dimensions');if(s.dims[0]!==2)throw new Error('Input "past" first dimension must be 2');if(s.dims[1]!==l)throw new Error('Input "past" second dimension must be batch_size');if(s.dims[2]!==e.numHeads)throw new Error('Input "past" third dimension must be num_heads');if(s.dims[4]!==h/e.numHeads)throw new Error('Input "past" fifth dimension must be k_hidden_size / num_heads');e.pastPresentShareBuffer||(y=s.dims[3])}let w=g+y,v=-1,S=0;if(i)throw new Error("Mask not supported");if(s)throw new Error("past is not supported");if(o)throw new Error("relativePositionBias is not supported");return{batchSize:l,sequenceLength:d,pastSequenceLength:y,kvSequenceLength:g,totalSequenceLength:w,maxSequenceLength:v,inputHiddenSize:c,hiddenSize:u,vHiddenSize:f,headSize:Math.floor(u/e.numHeads),vHeadSize:Math.floor(f/e.numHeads),numHeads:e.numHeads,isUnidirectional:!1,pastPresentShareBuffer:!1,maskFilterValue:e.maskFilterValue,maskType:S,scale:e.scale,broadcastResPosBias:!1,passPastInKv:!1,qkvFormat:1}},bu=(t,e,r,n)=>{let a=wt(n),i=64,s=n/a;s<i?i=1:s/8<64&&(i=Math.ceil(s/8));let o=Math.ceil(n/a/i),l=[{type:qt(e.dataType),data:1/n},{type:"uint32",data:s},{type:"uint32",data:o}],d=Ct(e.dataType,a),c=u=>{let h=ve("x",e.dataType,e.dims,a),f="thread_max_vector";a===2?f="max(thread_max_vector.x, thread_max_vector.y)":a===4&&(f="max(max(thread_max_vector.x, thread_max_vector.y), max(thread_max_vector.z, thread_max_vector.w))");let g=rr(e.dataType),y=[{name:"d_inv",type:g},{name:"d_comp",type:"u32"},{name:"elements_per_wg",type:"u32"}];return`
  var<workgroup> wgMax: array<f32, ${i}>;
  var<workgroup> wgSum: array<f32, ${i}>;
  ${u.registerUniforms(y).declareVariables(h)}
  ${u.mainStart([i,1,1])}
    let localOffset = local_idx * uniforms.elements_per_wg;
    let offset: u32 = workgroup_id.x * uniforms.d_comp + localOffset;

    var thread_max_vector = ${vt("f32",a,"-3.402823e+38f")};
    for (var i: u32 = 0; i < uniforms.elements_per_wg && i + localOffset < uniforms.d_comp; i++) {
      thread_max_vector = max(${nr(g,a,"x[offset + i]")}, thread_max_vector);
    }
    wgMax[local_idx] = ${f};
    workgroupBarrier();

    var maxValue = -3.402823e+38f;
    for (var i = 0u; i < ${i}; i++) {
      maxValue = max(wgMax[i], maxValue);
    }

    var sumVector = ${vt("f32",a,"0")};
    for (var i: u32 = 0; i < uniforms.elements_per_wg && i + localOffset < uniforms.d_comp; i++) {
      sumVector += exp(${nr(g,a,"x[offset + i]")} - maxValue);
    }
    wgSum[local_idx] = ${jt("sumVector",a)};
    workgroupBarrier();

    var sum: f32 = 0;
    for (var i = 0u; i < ${i}; i++) {
      sum += wgSum[i];
    }

    if (sum == 0) {
      for (var i: u32 = 0; i < uniforms.elements_per_wg && i + localOffset < uniforms.d_comp; i++) {
        x[offset + i] = ${vt("f32",a,"uniforms.d_inv")};
      }
    } else {
      for (var i: u32 = 0; i < uniforms.elements_per_wg && i + localOffset < uniforms.d_comp; i++) {
        let f32input = ${nr(g,a,"x[offset + i]")};
        x[offset + i] = ${h.type.value}(exp(f32input - maxValue) / sum);
      }
    }
  }`};t.compute({name:"AttentionProbsSoftmax",shaderCache:{hint:`${i};${d};${a}`},getShaderSource:c,getRunData:()=>({outputs:[],dispatchGroup:{x:r},programUniforms:l})},{inputs:[e],outputs:[]})},$u=(t,e,r,n,a,i)=>{let s=[a.batchSize,a.numHeads,a.sequenceLength,a.kvSequenceLength+a.pastSequenceLength],o=i.scale===0?1/Math.sqrt(a.headSize):i.scale,l=wt(a.headSize),d=a.headSize/l,c=12,u={x:Math.ceil(a.totalSequenceLength/c),y:Math.ceil(a.sequenceLength/c),z:a.batchSize*a.numHeads},h=qt(e.dataType),f=[{type:"uint32",data:a.sequenceLength},{type:"uint32",data:d},{type:"uint32",data:a.totalSequenceLength},{type:"uint32",data:a.kvSequenceLength},{type:h,data:o}],g=[e,r],y=v=>{let S=J("q",e.dataType,e.dims,l),E=J("key",r.dataType,r.dims,l),x=ve("output",e.dataType,s),A=Ct(e.dataType),T=[{name:"M",type:"u32"},{name:"K",type:"u32"},{name:"N",type:"u32"},{name:"kv_sequence_length",type:"u32"},{name:"alpha",type:A}];return`
  const beta: ${A} = 1.0;
  const TILE_SIZE = ${c}u;

  var<workgroup> tileQ: array<${S.type.storage}, ${c*c}>;
  var<workgroup> tileK: array<${S.type.storage}, ${c*c}>;
  ${v.registerUniforms(T).declareVariables(S,E,x)}
  ${v.mainStart([c,c,1])}
    // x holds the N and y holds the M
    let headIdx = workgroup_id.z;
    let m = workgroup_id.y * TILE_SIZE;
    let n = workgroup_id.x * TILE_SIZE;
    let lm = m + local_id.y;
    let ln = n + local_id.x;

    let qOffset = uniforms.M * uniforms.K * headIdx + m * uniforms.K;
    let kOffset = uniforms.kv_sequence_length * uniforms.K * headIdx + n * uniforms.K;

    var value = ${vt(A,l)};
    for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {
      if (m + local_id.y < uniforms.M && w + local_id.x < uniforms.K) {
        tileQ[TILE_SIZE * local_id.y + local_id.x] = q[qOffset + local_id.y * uniforms.K + w + local_id.x];
      }
      if (n + local_id.y < uniforms.N && w + local_id.x < uniforms.K) {
        tileK[TILE_SIZE * local_id.y + local_id.x] = key[kOffset + local_id.y * uniforms.K + w + local_id.x];
      }
      workgroupBarrier();

      for (var k: u32 = 0u; k<TILE_SIZE && w+k < uniforms.K; k++) {
        value += tileQ[TILE_SIZE * local_id.y + k] * tileK[TILE_SIZE * local_id.x + k];
      }

      workgroupBarrier();
    }

    let headOffset = headIdx * uniforms.M * uniforms.N;
    if (lm < uniforms.M && ln < uniforms.N) {
      let outputIdx = headOffset + lm * uniforms.N + ln;
      output[outputIdx] = ${jt("value",l)} * uniforms.alpha;
    }
  }`},w=t.compute({name:"AttentionProbs",shaderCache:{hint:`${l}`,inputDependencies:["type","type"]},getRunData:()=>({outputs:[{dims:s,dataType:e.dataType,gpuDataType:0}],dispatchGroup:u,programUniforms:f}),getShaderSource:y},{inputs:g,outputs:[-1]})[0];return bu(t,w,a.batchSize*a.numHeads*a.sequenceLength,a.totalSequenceLength),w},xu=(t,e,r,n)=>{let a=[n.batchSize,n.sequenceLength,n.vHiddenSize],i=12,s={x:Math.ceil(n.vHeadSize/i),y:Math.ceil(n.sequenceLength/i),z:n.batchSize*n.numHeads},o=[{type:"uint32",data:n.sequenceLength},{type:"uint32",data:n.totalSequenceLength},{type:"uint32",data:n.vHeadSize},{type:"uint32",data:n.numHeads},{type:"uint32",data:n.vHiddenSize}],l=d=>{let c=J("probs",e.dataType,e.dims),u=J("v",r.dataType,r.dims),h=ve("output",e.dataType,a),f=[{name:"M",type:"u32"},{name:"K",type:"u32"},{name:"N",type:"u32"},{name:"num_heads",type:"u32"},{name:"v_hidden_size",type:"u32"}];return`
  const TILE_SIZE = ${i}u;
  var<workgroup> tileQ: array<${c.type.value}, ${i*i}>;
  var<workgroup> tileK: array<${c.type.value}, ${i*i}>;
  ${d.registerUniforms(f).declareVariables(c,u,h)}
  ${d.mainStart([i,i,1])}
   let headIdx = workgroup_id.z;
   let m = workgroup_id.y * TILE_SIZE + local_id.y;
   let n = workgroup_id.x * TILE_SIZE + local_id.x;

   let offsetA = headIdx * (uniforms.M * uniforms.K) + m * uniforms.K;
   let offsetB = headIdx * (uniforms.N * uniforms.K) + n;

   var value = ${c.type.storage}(0);
   for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {
     if (m < uniforms.M && w + local_id.x < uniforms.K) {
       tileQ[TILE_SIZE * local_id.y + local_id.x] = probs[offsetA + w + local_id.x];
     }
     if (n < uniforms.N && w + local_id.y < uniforms.K) {
       tileK[TILE_SIZE * local_id.y + local_id.x] = v[offsetB + (w + local_id.y) * uniforms.N];
     }
     workgroupBarrier();
     for (var k: u32 = 0u; k<TILE_SIZE && w+k < uniforms.K; k++) {
       value += tileQ[TILE_SIZE * local_id.y + k] * tileK[TILE_SIZE * k + local_id.x];
     }
     workgroupBarrier();
   }

   // we need to transpose output from BNSH_v to BSND_v
   let batchIdx = workgroup_id.z / uniforms.num_heads;
   let currentBatchHeadNumber = workgroup_id.z % uniforms.num_heads;
   let headOffset = (batchIdx * uniforms.M * uniforms.num_heads + currentBatchHeadNumber) * uniforms.N;
   if (m < uniforms.M && n < uniforms.N) {
     let outputIdx = batchIdx * uniforms.M *uniforms.v_hidden_size + m * uniforms.v_hidden_size
       + currentBatchHeadNumber * uniforms.N + n;
     output[outputIdx] = value;
   }
  }`};return t.compute({name:"AttentionScore",shaderCache:{inputDependencies:["type","type"]},getRunData:()=>({outputs:[{dims:a,dataType:e.dataType,gpuDataType:0}],dispatchGroup:s,programUniforms:o}),getShaderSource:l},{inputs:[e,r],outputs:[0]})[0]},Sa=(t,e,r,n,a,i,s,o,l,d,c)=>{let u=$u(t,e,r,l,d,c);xu(t,u,n,d)},Su=(t,e)=>{let r=[e.batchSize,e.numHeads,e.sequenceLength,e.headSize],n=e.sequenceLength,a=e.inputHiddenSize,i=e.headSize,s=12,o={x:Math.ceil(e.headSize/s),y:Math.ceil(e.sequenceLength/s),z:e.batchSize*e.numHeads},l=[t.inputs[0],t.inputs[1],t.inputs[2]],d=[{type:"uint32",data:n},{type:"uint32",data:a},{type:"uint32",data:i},{type:"uint32",data:e.numHeads},{type:"uint32",data:e.headSize},{type:"uint32",data:e.hiddenSize},{type:"uint32",data:e.hiddenSize+e.hiddenSize+e.vHiddenSize}],c=u=>{let h=ve("output_q",l[0].dataType,r),f=ve("output_k",l[0].dataType,r),g=ve("output_v",l[0].dataType,r),y=J("input",l[0].dataType,l[0].dims),w=J("weight",l[1].dataType,l[1].dims),v=J("bias",l[2].dataType,l[2].dims),S=y.type.storage,E=[{name:"M",type:"u32"},{name:"K",type:"u32"},{name:"N",type:"u32"},{name:"num_heads",type:"u32"},{name:"head_size",type:"u32"},{name:"hidden_size",type:"u32"},{name:"ldb",type:"u32"}];return`
  const TILE_SIZE = ${s}u;
  var<workgroup> tileInput: array<${S}, ${s*s}>;
  var<workgroup> tileWeightQ: array<${S}, ${s*s}>;
  var<workgroup> tileWeightK: array<${S}, ${s*s}>;
  var<workgroup> tileWeightV: array<${S}, ${s*s}>;
  ${u.registerUniforms(E).declareVariables(y,w,v,h,f,g)}
  ${u.mainStart([s,s,1])}
    let batchIndex = workgroup_id.z / uniforms.num_heads;
    let headNumber = workgroup_id.z % uniforms.num_heads;
    let m = workgroup_id.y * TILE_SIZE + local_id.y;
    let n = workgroup_id.x * TILE_SIZE + local_id.x;

    let inputOffset = batchIndex * (uniforms.M * uniforms.K) + m * uniforms.K;
    let biasOffsetQ = headNumber * uniforms.head_size;
    let biasOffsetK = uniforms.hidden_size + biasOffsetQ;
    let biasOffsetV = uniforms.hidden_size + biasOffsetK;

    var valueQ = ${S}(0);
    var valueK = ${S}(0);
    var valueV = ${S}(0);
    for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {
      if (m < uniforms.M && w + local_id.x < uniforms.K) {
        tileInput[TILE_SIZE * local_id.y + local_id.x] = input[inputOffset + w + local_id.x];
      }
      if (n < uniforms.N && w + local_id.y < uniforms.K) {
        let offset = n + (w + local_id.y) * uniforms.ldb;
        tileWeightQ[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetQ + offset];
        tileWeightK[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetK + offset];
        tileWeightV[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetV + offset];
      }
      workgroupBarrier();
      for (var k: u32 = 0u; k<TILE_SIZE && w+k < uniforms.K; k++) {
        let inputTileOffset = TILE_SIZE * local_id.y + k;
        let weightTileOffset = TILE_SIZE * k + local_id.x;
        valueQ += tileInput[inputTileOffset] * tileWeightQ[weightTileOffset];
        valueK += tileInput[inputTileOffset] * tileWeightK[weightTileOffset];
        valueV += tileInput[inputTileOffset] * tileWeightV[weightTileOffset];
      }

      workgroupBarrier();
    }

    let headOffset = (m * uniforms.N + n) % uniforms.head_size;
    valueQ += bias[headOffset + biasOffsetQ];
    valueK += bias[headOffset + biasOffsetK];
    valueV += bias[headOffset + biasOffsetV];

    let offset = workgroup_id.z * uniforms.M * uniforms.N;
    if (m < uniforms.M && n < uniforms.N) {
      let outputIdx = offset + m * uniforms.N + n;
      output_q[outputIdx] = valueQ;
      output_k[outputIdx] = valueK;
      output_v[outputIdx] = valueV;
    }
  }`};return t.compute({name:"AttentionPrepare",shaderCache:{inputDependencies:["type","type","type"]},getRunData:()=>({outputs:[{dims:r,dataType:t.inputs[0].dataType,gpuDataType:0},{dims:r,dataType:t.inputs[0].dataType,gpuDataType:0},{dims:r,dataType:t.inputs[0].dataType,gpuDataType:0}],dispatchGroup:o,programUniforms:d}),getShaderSource:c},{inputs:l,outputs:[-1,-1,-1]})},ku=(t,e)=>{let r=vu(t.inputs,e),[n,a,i]=Su(t,r);return Sa(t,n,a,i,t.inputs[4],void 0,void 0,void 0,t.inputs[5],r,e)}}),Cu,Au,Iu,Tu,o_=Q(()=>{Dt(),Ae(),it(),Ce(),Cu=(t,e)=>{if(!t||t.length!==5)throw new Error("BatchNormalization requires 5 inputs");let r=(n,a,i)=>{let s=a.length;if(s!==n.length)throw new Error(`${i}: num dimensions != ${s}`);a.forEach((o,l)=>{if(o!==n[l])throw new Error(`${i}: dim[${l}] do not match`)})};if(t[0].dims.length>1){let n=e.format==="NHWC"?e.spatial?t[0].dims.slice(-1):t[0].dims.slice(-1).concat(t[0].dims.slice(1,t[0].dims.length-1)):t[0].dims.slice(1,e.spatial?2:void 0);r(t[1].dims,n,"Invalid input scale"),r(t[2].dims,n,"Invalid input B"),r(t[3].dims,n,"Invalid input mean"),r(t[4].dims,n,"Invalid input var")}else r(t[1].dims,[1],"Invalid input scale"),r(t[2].dims,[1],"Invalid input B"),r(t[3].dims,[1],"Invalid input mean"),r(t[4].dims,[1],"Invalid input var")},Au=(t,e)=>{let{epsilon:r,spatial:n,format:a}=e,i=t[0].dims,s=n?wt(i[i.length-1]):1,o=a==="NHWC"&&i.length>1?s:1,l=ee.size(i)/s,d=st(i.length)&&n,c=d?i.length:i,u=J("x",t[0].dataType,t[0].dims,s),h=J("scale",t[1].dataType,t[1].dims,o),f=J("bias",t[2].dataType,t[2].dims,o),g=J("inputMean",t[3].dataType,t[3].dims,o),y=J("inputVar",t[4].dataType,t[4].dims,o),w=ve("y",t[0].dataType,c,s),v=()=>{let E="";if(n)E=`let cOffset = ${i.length===1?"0u":a==="NHWC"?`outputIndices[${i.length-1}] / ${s}`:"outputIndices[1]"};`;else if(a==="NCHW")E=`
            ${w.indicesSet("outputIndices","0","0")}
            let cOffset = ${w.indicesToOffset("outputIndices")};`;else{E=`var cIndices = ${h.type.indices}(0);
                       cIndices[0] = outputIndices[${i.length-1}];`;for(let x=1;x<h.rank;x++)E+=`cIndices[${x}] = outputIndices[${x}];`;E+=`let cOffset = ${h.indicesToOffset("cIndices")};`}return E},S=E=>`
  const epsilon = ${r};
  ${E.registerUniform("outputSize","u32").declareVariables(u,h,f,g,y,w)}
  ${E.mainStart()}
  ${E.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
    var outputIndices = ${w.offsetToIndices(`global_idx * ${s}`)};
    ${v()}
    let scale = ${h.getByOffset("cOffset")};
    let bias = ${f.getByOffset("cOffset")};
    let inputMean = ${g.getByOffset("cOffset")};
    let inputVar = ${y.getByOffset("cOffset")};
    let x = ${u.getByOffset("global_idx")};
    let value = (x - inputMean) * inverseSqrt(inputVar + epsilon) * scale + bias;
    ${w.setByOffset("global_idx","value")}
  }`;return{name:"BatchNormalization",shaderCache:{hint:`${e.epsilon}_${e.format}_${n}_${s}`,inputDependencies:d?["rank","type","type","type","type"]:void 0},getShaderSource:S,getRunData:()=>({outputs:[{dims:t[0].dims,dataType:t[0].dataType}],dispatchGroup:{x:Math.ceil(l/64)},programUniforms:d?[{type:"uint32",data:l},...ie(i)]:[{type:"uint32",data:l}]})}},Iu=t=>qe(t),Tu=(t,e)=>{let{inputs:r,outputCount:n}=t,a=Iu({...e,outputCount:n});if(Pe.webgpu.validateInputContent&&Cu(r,a),e.trainingMode)throw new Error("BatchNormalization trainingMode is not supported yet.");t.compute(Au(r,a))}}),Ou,Mu,zu,l_=Q(()=>{Ae(),Ce(),Ou=t=>{if(t[0].dims.length!==3)throw new Error("input should have 3 dimensions");if(![320,640,1280].includes(t[0].dims[2]))throw new Error("number of channels should be 320, 640 or 1280");if(t[1].dims.length!==1)throw new Error("bias is expected to have 1 dimensions");if(t[0].dims[2]!==t[1].dims[0])throw new Error("last dimension of input and bias are not the same")},Mu=t=>{let e=t[0].dims,r=t[0].dims[2],n=ee.size(e)/4,a=t[0].dataType,i=J("input",a,e,4),s=J("bias",a,[r],4),o=J("residual",a,e,4),l=ve("output",a,e,4);return{name:"BiasAdd",getRunData:()=>({outputs:[{dims:e,dataType:t[0].dataType}],dispatchGroup:{x:Math.ceil(n/64)}}),getShaderSource:d=>`
  const channels = ${r}u / 4;
  ${d.declareVariables(i,s,o,l)}

  ${d.mainStart()}
    ${d.guardAgainstOutOfBoundsWorkgroupSizes(n)}
    let value = ${i.getByOffset("global_idx")}
      + ${s.getByOffset("global_idx % channels")} + ${o.getByOffset("global_idx")};
    ${l.setByOffset("global_idx","value")}
  }`}},zu=t=>{Ou(t.inputs),t.compute(Mu(t.inputs))}}),Bu,Re,Ru,Du,Pu,Nu,Uu,Wu,Lu,Fu,Vu,Hu,Gu,qu,ju,Ku,ka,Yu,Ea,Xu,Qu,Zu,Ju,ed,td,rd,nd,ad,id,sd,od,ld,ud,dd,cd,pd,hd=Q(()=>{Ye(),Ae(),it(),Ce(),Bu=(t,e,r,n,a,i)=>{let s=Math.ceil(e/4),o="";typeof a=="string"?o=`${a}(a)`:o=a("a");let l=J("inputData",r,[s],4),d=ve("outputData",n,[s],4);return`
      ${t.registerUniform("vec_size","u32").declareVariables(l,d)}

  ${i??""}

  ${t.mainStart()}
    ${t.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}

    let a = ${l.getByOffset("global_idx")};
    ${d.setByOffset("global_idx",o)}
  }`},Re=(t,e,r,n,a,i=t.dataType)=>({name:e,shaderCache:{hint:a,inputDependencies:["type"]},getShaderSource:s=>Bu(s,ee.size(t.dims),t.dataType,i,r,n),getRunData:s=>({outputs:[{dims:t.dims,dataType:i}],dispatchGroup:{x:Math.ceil(ee.size(s[0].dims)/64/4)},programUniforms:[{type:"uint32",data:Math.ceil(ee.size(t.dims)/4)}]})}),Ru=t=>{t.compute(Re(t.inputs[0],"Abs","abs"))},Du=t=>{t.compute(Re(t.inputs[0],"Acos","acos"))},Pu=t=>{t.compute(Re(t.inputs[0],"Acosh","acosh"))},Nu=t=>{t.compute(Re(t.inputs[0],"Asin","asin"))},Uu=t=>{t.compute(Re(t.inputs[0],"Asinh","asinh"))},Wu=t=>{t.compute(Re(t.inputs[0],"Atan","atan"))},Lu=t=>{t.compute(Re(t.inputs[0],"Atanh","atanh"))},Fu=t=>qe(t),Vu=(t,e)=>{let r;switch(e.to){case 10:r="vec4<f16>";break;case 1:r="vec4<f32>";break;case 12:r="vec4<u32>";break;case 6:r="vec4<i32>";break;case 9:r="vec4<bool>";break;default:throw new RangeError(`not supported type (specified in attribute 'to' from 'Cast' operator): ${e.to}`)}t.compute(Re(t.inputs[0],"Cast",r,void 0,e.cacheKey,e.to))},Hu=t=>{let e=t.length>=2&&t[1].data!==0?t[1].getFloat32Array()[0]:Xi,r=t.length>=3&&t[2].data!==0?t[2].getFloat32Array()[0]:Qi;return qe({min:e,max:r})},Gu=(t,e)=>{let r=t.inputs.length===1?e:Hu(t.inputs),n=rr(t.inputs[0].dataType);t.compute(Re(t.inputs[0],"Clip",a=>`clamp(${a}, clip_min_, clip_max_)`,`
    const clip_min_: vec4<${n}> = vec4(${n}(${r.min}));
    const clip_max_: vec4<${n}> = vec4(${n}(${r.max}));
`,r.cacheKey),{inputs:[0]})},qu=t=>{t.compute(Re(t.inputs[0],"Ceil","ceil"))},ju=t=>{t.compute(Re(t.inputs[0],"Cos","cos"))},Ku=t=>{t.compute(Re(t.inputs[0],"Cosh","cosh"))},ka=t=>qe(t),Yu=(t,e)=>{let r=rr(t.inputs[0].dataType);t.compute(Re(t.inputs[0],"Elu",n=>`elu_vf32(${n})`,`
  const elu_alpha_ = ${r}(${e.alpha});

  fn elu_f32(a: ${r}) -> ${r} {
  return select((exp(a) - 1.0) * elu_alpha_, a, a >= 0.0);
  }

  fn elu_vf32(v: vec4<${r}>) -> vec4<${r}> {
  return vec4(elu_f32(v.x), elu_f32(v.y), elu_f32(v.z), elu_f32(v.w));
  }`,e.cacheKey))},Ea=(t,e="f32")=>`
const r0: ${e} = 0.3275911;
const r1: ${e} = 0.254829592;
const r2: ${e} = -0.284496736;
const r3: ${e} = 1.421413741;
const r4: ${e} = -1.453152027;
const r5: ${e} = 1.061405429;

fn erf_vf32(v: ${t}) -> ${t} {
  let absv = abs(v);
  let x = 1.0 / (1.0 + r0 * absv);
  return sign(v) * (1.0 - ((((r5 * x + r4) * x + r3) * x + r2) * x + r1) * x * exp(-absv * absv));
}`,Xu=t=>{let e=rr(t.inputs[0].dataType);t.compute(Re(t.inputs[0],"Erf",r=>`erf_vf32(${r})`,Ea(`vec4<${e}>`,e)))},Qu=t=>{t.compute(Re(t.inputs[0],"Exp","exp"))},Zu=t=>{t.compute(Re(t.inputs[0],"Floor","floor"))},Ju=t=>{let e=rr(t.inputs[0].dataType);t.compute(Re(t.inputs[0],"Gelu",r=>`0.5 * ${r} * (1.0 + erf_vf32(${r} * 0.7071067811865475))`,Ea(`vec4<${e}>`,e)))},ed=(t,e)=>{let r=rr(t.inputs[0].dataType);t.compute(Re(t.inputs[0],"LeakyRelu",n=>`select(leaky_relu_alpha_ * ${n}, ${n}, ${n} >= vec4<${r}>(0.0))`,`const leaky_relu_alpha_ = ${r}(${e.alpha});`,e.cacheKey))},td=t=>{t.compute(Re(t.inputs[0],"Not",e=>`!${e}`))},rd=t=>{t.compute(Re(t.inputs[0],"Neg",e=>`-${e}`))},nd=t=>{t.compute(Re(t.inputs[0],"Reciprocal",e=>`1.0/${e}`))},ad=t=>{let e=rr(t.inputs[0].dataType);t.compute(Re(t.inputs[0],"Relu",r=>`select(vec4<${e}>(0.0), ${r}, ${r} > vec4<${e}>(0.0))`))},id=t=>{t.compute(Re(t.inputs[0],"Sigmoid",e=>`(1.0 / (1.0 + exp(-${e})))`))},sd=t=>{t.compute(Re(t.inputs[0],"Sin","sin"))},od=t=>{t.compute(Re(t.inputs[0],"Sinh","sinh"))},ld=t=>{t.compute(Re(t.inputs[0],"Sqrt","sqrt"))},ud=t=>{t.compute(Re(t.inputs[0],"Tan","tan"))},dd=t=>{t.compute(Re(t.inputs[0],"Tanh","tanh"))},cd=(t,e)=>{let r=rr(t.inputs[0].dataType);return t.compute(Re(t.inputs[0],"ThresholdedRelu",n=>`select(vec4<${r}>(0.0), ${n}, ${n} > thresholded_relu_alpha_)`,`const thresholded_relu_alpha_ = vec4<${r}>(${e.alpha});`,e.cacheKey)),0},pd=t=>{t.compute(Re(t.inputs[0],"Log","log"))}}),fd,md,gd,u_=Q(()=>{Ae(),Ce(),hd(),fd=t=>{if(t[0].dims.length!==3)throw new Error("input should have 3 dimensions");if(![2560,5120,10240].includes(t[0].dims[2]))throw new Error("hidden state should be 2560, 5120 or 10240");if(t[1].dims.length!==1)throw new Error("bias is expected to have 1 dimensions");if(t[0].dims[2]!==t[1].dims[0])throw new Error("last dimension of input and bias are not the same")},md=t=>{let e=t[0].dims.slice();e[2]=e[2]/2;let r=J("input",t[0].dataType,t[0].dims,4),n=J("bias",t[0].dataType,[t[0].dims[2]],4),a=ve("output",t[0].dataType,e,4),i=ee.size(e)/4,s=Ct(t[0].dataType);return{name:"BiasSplitGelu",getRunData:()=>({outputs:[{dims:e,dataType:t[0].dataType}],dispatchGroup:{x:Math.ceil(i/64)}}),getShaderSource:o=>`
  const M_SQRT2 = sqrt(2.0);
  const halfChannels = ${t[0].dims[2]/4/2}u;

  ${o.declareVariables(r,n,a)}

  ${Ea(`vec4<${s}>`,s)}

  ${o.mainStart()}
    ${o.guardAgainstOutOfBoundsWorkgroupSizes(i)}
    let biasIdx = global_idx % halfChannels;
    let batchIndex = global_idx / halfChannels;
    let inputOffset = biasIdx + batchIndex * halfChannels * 2;
    let valueLeft = input[inputOffset] + bias[biasIdx];
    let valueRight = input[inputOffset + halfChannels] + bias[biasIdx + halfChannels];
    let geluRight = valueRight * 0.5 * (erf_vf32(valueRight / M_SQRT2) + 1);

    ${a.setByOffset("global_idx","valueLeft * geluRight")}
  }`}},gd=t=>{fd(t.inputs),t.compute(md(t.inputs))}}),_d,yd,Lt,wd,vd,bd,$d,xd,Sd,kd,Ed,Cd,Ad,d_=Q(()=>{Ye(),Ae(),Ce(),_d=(t,e,r,n,a,i,s,o,l,d,c,u,h)=>{let f,g;typeof o=="string"?f=g=(T,B)=>`${o}((${T}),(${B}))`:typeof o=="function"?f=g=o:(f=o.scalar,g=o.vector);let y=u?e.length:e,w=u?r.length:r,v=u?n.length:n,S=ve("outputData",c,v,4),E=J("aData",l,y,4),x=J("bData",d,w,4),A;if(a)if(i){let T=ee.size(e)===1,B=ee.size(r)===1,U=e.length>0&&e[e.length-1]%4===0,H=r.length>0&&r[r.length-1]%4===0;T||B?A=S.setByOffset("global_idx",g(T?`${E.type.value}(${E.getByOffset("0")}.x)`:E.getByOffset("global_idx"),B?`${x.type.value}(${x.getByOffset("0")}.x)`:x.getByOffset("global_idx"))):A=`
            let outputIndices = ${S.offsetToIndices("global_idx * 4u")};
            let offsetA = ${E.broadcastedIndicesToOffset("outputIndices",S)};
            let offsetB = ${x.broadcastedIndicesToOffset("outputIndices",S)};
            ${S.setByOffset("global_idx",g(s||U?E.getByOffset("offsetA / 4u"):`${E.type.value}(${E.getByOffset("offsetA / 4u")}[offsetA % 4u])`,s||H?x.getByOffset("offsetB / 4u"):`${x.type.value}(${x.getByOffset("offsetB / 4u")}[offsetB % 4u])`))}
          `}else A=S.setByOffset("global_idx",g(E.getByOffset("global_idx"),x.getByOffset("global_idx")));else{if(!i)throw new Error("no necessary to use scalar implementation for element-wise binary op implementation.");let T=(B,U,H="")=>{let K=`aData[indexA${U}][componentA${U}]`,O=`bData[indexB${U}][componentB${U}]`;return`
            let outputIndices${U} = ${S.offsetToIndices(`global_idx * 4u + ${U}u`)};
            let offsetA${U} = ${E.broadcastedIndicesToOffset(`outputIndices${U}`,S)};
            let offsetB${U} = ${x.broadcastedIndicesToOffset(`outputIndices${U}`,S)};
            let indexA${U} = offsetA${U} / 4u;
            let indexB${U} = offsetB${U} / 4u;
            let componentA${U} = offsetA${U} % 4u;
            let componentB${U} = offsetB${U} % 4u;
            ${B}[${U}] = ${H}(${f(K,O)});
          `};c===9?A=`
            var data = vec4<u32>(0);
            ${T("data",0,"u32")}
            ${T("data",1,"u32")}
            ${T("data",2,"u32")}
            ${T("data",3,"u32")}
            outputData[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));`:A=`
            ${T("outputData[global_idx]",0)}
            ${T("outputData[global_idx]",1)}
            ${T("outputData[global_idx]",2)}
            ${T("outputData[global_idx]",3)}
          `}return`
        ${t.registerUniform("vec_size","u32").declareVariables(E,x,S)}

        ${h??""}

        ${t.mainStart()}
        ${t.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}
        ${A}
      }`},yd=(t,e,r,n,a,i,s=r.dataType)=>{let o=!ee.areEqual(r.dims,n.dims),l=r.dims,d=ee.size(r.dims),c=!1,u=!1,h=[o];if(o){let g=Wr.calcShape(r.dims,n.dims,!1);if(!g)throw new Error("Can't perform binary op on the given tensors");l=g,d=ee.size(l);let y=ee.size(r.dims)===1,w=ee.size(n.dims)===1,v=r.dims.length>0&&r.dims[r.dims.length-1]%4===0,S=n.dims.length>0&&n.dims[n.dims.length-1]%4===0;h.push(y),h.push(w),h.push(v),h.push(S);let E=1;for(let x=1;x<l.length;x++){let A=r.dims[r.dims.length-x]??1,T=n.dims[n.dims.length-x]??1;if(A===T)E*=A;else break}E%4===0?(u=!0,c=!0):(y||w||v||S)&&(c=!0)}else c=!0;h.push(c);let f=st(r.dims.length)&&st(n.dims.length)&&st(l.length);return{name:t,shaderCache:{hint:e+h.map(g=>g.toString()).join("_"),inputDependencies:f?["rank","rank"]:["dims","dims"]},getShaderSource:g=>_d(g,r.dims,n.dims,l,c,o,u,a,r.dataType,n.dataType,s,f,i),getRunData:()=>({outputs:[{dims:l,dataType:s}],dispatchGroup:{x:Math.ceil(d/64/4)},programUniforms:f?[{type:"uint32",data:Math.ceil(ee.size(l)/4)},...ie(r.dims),...ie(n.dims),...ie(l)]:[{type:"uint32",data:Math.ceil(ee.size(l)/4)}]})}},Lt=(t,e,r,n,a,i)=>{t.compute(yd(e,a??"",t.inputs[0],t.inputs[1],r,n,i))},wd=t=>{Lt(t,"Add",(e,r)=>`${e}+${r}`)},vd=t=>{Lt(t,"Div",(e,r)=>`${e}/${r}`)},bd=t=>{Lt(t,"Equal",{scalar:(e,r)=>`u32(${e}==${r})`,vector:(e,r)=>`vec4<u32>(${e}==${r})`},void 0,void 0,9)},$d=t=>{Lt(t,"Mul",(e,r)=>`${e}*${r}`)},xd=t=>{let e=J("input",t.inputs[0].dataType,t.inputs[0].dims).type.value;Lt(t,"Pow",{scalar:(r,n)=>`pow_custom(${r},${n})`,vector:(r,n)=>`pow_vector_custom(${r},${n})`},`
    fn pow_custom(a : ${e}, b : ${e}) -> ${e} {
      if (b == ${e}(0.0)) {
        return ${e}(1.0);
      } else if (a < ${e}(0.0) && f32(b) != floor(f32(b))) {
        return ${e}(pow(f32(a), f32(b))); // NaN
      }
      return select(sign(a), ${e}(1.0), round(f32(abs(b) % ${e}(2.0))) != 1.0) * ${e}(${e==="i32"?"round":""}(pow(f32(abs(a)), f32(b))));
    }
    fn pow_vector_custom(a : vec4<${e}>, b : vec4<${e}>) -> vec4<${e}> {
      // TODO: implement vectorized pow
      return vec4<${e}>(pow_custom(a.x, b.x), pow_custom(a.y, b.y), pow_custom(a.z, b.z), pow_custom(a.w, b.w));
    }
      `)},Sd=t=>{Lt(t,"Sub",(e,r)=>`${e}-${r}`)},kd=t=>{Lt(t,"Greater",{scalar:(e,r)=>`u32(${e}>${r})`,vector:(e,r)=>`vec4<u32>(${e}>${r})`},void 0,void 0,9)},Ed=t=>{Lt(t,"Less",{scalar:(e,r)=>`u32(${e}<${r})`,vector:(e,r)=>`vec4<u32>(${e}<${r})`},void 0,void 0,9)},Cd=t=>{Lt(t,"GreaterOrEqual",{scalar:(e,r)=>`u32(${e}>=${r})`,vector:(e,r)=>`vec4<u32>(${e}>=${r})`},void 0,void 0,9)},Ad=t=>{Lt(t,"LessOrEqual",{scalar:(e,r)=>`u32(${e}<=${r})`,vector:(e,r)=>`vec4<u32>(${e}<=${r})`},void 0,void 0,9)}}),Id,Td,Od,Md,zd,Bd,c_=Q(()=>{Ae(),it(),Ce(),Id=t=>{if(!t||t.length<1)throw new Error("too few inputs");let e=t[0].dataType,r=t[0].dims.length;for(let n of t){if(n.dataType!==e)throw new Error("input tensors should be one type");if(n.dims.length!==r)throw new Error("input tensors should have the same shape")}},Td=(t,e)=>`
  fn calculateInputIndex(index: u32) -> u32 {
    let sizeInConcatAxis = array<u32, ${t}u>(${e});
    for (var i: u32 = 0u; i < ${t}; i += 1u ) {
      if (index < sizeInConcatAxis[i]) {
        return i;
      }
    }
    return ${t}u;
  }`,Od=(t,e)=>{let r=t.length,n=[];for(let a=0;a<r;++a){let i=e.setByOffset("global_idx",t[a].getByIndices("indices"));r===1?n.push(i):a===0?n.push(`if (inputIndex == ${a}u) { ${i} }`):a===r-1?n.push(`else { ${i} }`):n.push(`else if (inputIndex == ${a}) { ${i} }`)}return n.join(`
`)},Md=(t,e)=>{let r=t[0].dims.slice();if(e>=r.length||e<-1*r.length)throw new Error("axis specified for concat doesn't match input dimensionality");let n=e<0?r.length+e:e,a=r.slice(0);for(let x=1;x<t.length;x++){let A=t[x].dims.slice();for(let T=0;T<r.length;T++)if(T===n)a[n]+=A[T];else if(r[T]!==A[T])throw new Error("non concat dimensions must match")}let i=ee.size(a),s=new Array(t.length),o=new Array(t.length),l=t[0].dataType,d=0,c=[],u=[],h=[],f=[{type:"uint32",data:i}];for(let x=0;x<t.length;++x)d+=t[x].dims[n],s[x]=d,h.push(st(t[x].dims.length)),u.push(h[x]?t[x].dims.length:t[x].dims),o[x]=J(`input${x}`,l,u[x]),c.push(h[x]?"rank":"dims"),f.push({type:"uint32",data:s[x]});for(let x=0;x<t.length;++x)h[x]&&f.push(...ie(t[x].dims));let g=st(a.length);g&&f.push(...ie(a));let y=g?a.length:a,w=ve("output",l,y),v=w.indicesGet("indices",n),S=Array.from(Array(s.length).keys()).map(x=>`uniforms.sizeInConcatAxis${x}`).join(","),E=x=>`

  ${(()=>{x.registerUniform("outputSize","u32");for(let A=0;A<t.length;A++)x.registerUniform(`sizeInConcatAxis${A}`,"u32");return x.declareVariables(...o,w)})()}

  ${Td(s.length,S)}

  ${x.mainStart()}
    ${x.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}

    var indices = ${w.offsetToIndices("global_idx")};

    let inputIndex = calculateInputIndex(${v});
    if (inputIndex != 0u) {
      let sizeInConcatAxis = array<u32, ${s.length}u>(${S});
      ${v} -= sizeInConcatAxis[inputIndex - 1u];
    }

    ${Od(o,w)}
  }`;return{name:"Concat",shaderCache:{hint:`${e}`,inputDependencies:c},getRunData:()=>({outputs:[{dims:a,dataType:t[0].dataType}],dispatchGroup:{x:Math.ceil(i/64)},programUniforms:f}),getShaderSource:E}},zd=(t,e)=>{Id(t.inputs),t.compute(Md(t.inputs,e.axis))},Bd=t=>qe({axis:t.axis})}),Lr,as,vr=Q(()=>{Ae(),Lr=(t,e)=>{switch(t.activation){case"Relu":return{activationFunction:"",applyActivation:`value = max(value, ${e}(0.0));`};case"Sigmoid":return{activationFunction:"",applyActivation:`value = (${e}(1.0) / (${e}(1.0) + exp(-value)));`};case"Clip":return{activationFunction:`const clip_min_=${e}(${t.clipMin});const clip_max_=${e}(${t.clipMax});`,applyActivation:"value = clamp(value, clip_min_, clip_max_);"};default:return{activationFunction:"",applyActivation:""}}},as=t=>{let e=t?.activation||"";if(e==="Clip"){let[r,n]=t?.activation_params||[Xi,Qi];return{activation:e,clipMax:n,clipMin:r,activationCacheKey:`${e}:${r},${n}`}}return{activation:e,activationCacheKey:e}}}),gt,is,ss=Q(()=>{gt=(t,e)=>{switch(t){case 1:return e;case 2:return`vec2<${e}>`;case 3:return`vec3<${e}>`;case 4:return`vec4<${e}>`;default:throw new Error(`${t}-component is not supported.`)}},is=t=>`
      ${t?"value = value + getBiasByOutputCoords(coords);":""}
      `}),os,Rd=Q(()=>{os=t=>`
fn getIndexFromCoords4D(coords : vec4<i32>, shape : vec4<i32>) -> i32 {
  return dot(coords, vec4<i32>(
      shape.y * shape.z * shape.w, shape.z * shape.w, shape.w, 1));
}
fn getOutputIndexFromCoords(coords : vec4<i32>) -> i32 {
  return dot(coords, vec4<i32>(
    i32(${t}.x), i32(${t}.y), i32(${t}.z), 1));
}
`}),Dd,Pd,Ca,ls,Nd,Aa,Ud,us,Ia=Q(()=>{Ae(),Ce(),vr(),ss(),Dd=(t,e)=>t?`
        mm_Asub[inputRow][inputCol] = mm_readA(batch,
          kStart + inputRow,
          globalRowStart / innerElementSize + inputCol${e?", batchIndices":""});
        `:`
        mm_Asub[inputRow][inputCol] = mm_readA(batch,
          globalRow + innerRow,
          kStart / innerElementSize + inputCol${e?", batchIndices":""});
        `,Pd=(t,e)=>t?`
        let ACached0 = mm_Asub[k * innerElementSize][localRow];
        let ACached1 = mm_Asub[k * innerElementSize + 1][localRow];
        let ACached2 = mm_Asub[k * innerElementSize + 2][localRow];
        ${e===3?"":"let ACached3 = mm_Asub[k * innerElementSize + 3][localRow];"}
        for (var i = 0; i < rowPerThread; i = i + 1) {
          acc[i] = BCached0 * ACached0[i] + acc[i];
          acc[i] = BCached1 * ACached1[i] + acc[i];
          acc[i] = BCached2 * ACached2[i] + acc[i];
          ${e===3?"":"acc[i] = BCached3 * ACached3[i] + acc[i];"}
        }`:`
        for (var i = 0; i < rowPerThread; i = i + 1) {
          let ACached = mm_Asub[tileRow + i][k];
          acc[i] = BCached0 * ACached.x + acc[i];
          acc[i] = BCached1 * ACached.y + acc[i];
          acc[i] = BCached2 * ACached.z + acc[i];
          ${e===3?"":"acc[i] = BCached3 * ACached.w + acc[i];"}
        }`,Ca=(t,e,r="f32",n,a=!1,i=32,s=!1,o=32)=>{let l=e[1]*t[1],d=e[0]*t[0],c=a?l:i,u=a?i:l,h=c/e[0],f=i/e[1];if(!((a&&h===4&&t[1]===4||!a&&(h===3||h===4))&&c%e[0]===0&&i%e[1]===0&&t[0]===4))throw new Error(`If transposeA ${a} is true, innerElementSize ${h} and workPerThread[1] ${t[1]} must be 4.
      Otherwise, innerElementSize ${h} must be 3 or 4.
  tileAWidth ${c} must be divisible by workgroupSize[0]${e[0]}. tileInner ${i} must be divisible by workgroupSize[1] ${e[1]}. colPerThread ${t[0]} must be 4.`);return`
var<workgroup> mm_Asub: array<array<vec${h}<${r}>, ${c/h}>, ${u}>;
var<workgroup> mm_Bsub: array<array<vec4<${r}>, ${d/t[0]}>, ${i}>;

const rowPerThread = ${t[1]};
const colPerThread = ${t[0]};
const innerElementSize = ${h};
const tileInner = ${i};

@compute @workgroup_size(${e[0]}, ${e[1]}, ${e[2]})
fn main(@builtin(local_invocation_id) localId : vec3<u32>,
        @builtin(global_invocation_id) globalId : vec3<u32>,
        @builtin(workgroup_id) workgroupId : vec3<u32>) {
  let localRow = i32(localId.y);
  let tileRow = localRow * rowPerThread;
  let tileCol = i32(localId.x);

  let globalRow =i32(globalId.y) * rowPerThread;
  let globalCol = i32(globalId.x);
  let batch = ${s?"0":"i32(globalId.z)"};
  ${n?`let batchIndices = ${n.offsetToIndices("u32(batch)")};`:""}
  let globalRowStart = i32(workgroupId.y) * ${l};

  let numTiles = ${s?`${Math.ceil(o/i)}`:"(uniforms.dimInner - 1) / tileInner + 1"};
  var kStart = ${s?`i32(globalId.z) * ${o}`:"0"};

  var acc: array<vec4<${r}>, rowPerThread>;

  // Loop over shared dimension.
  let tileRowB = localRow * ${f};
  for (var t = 0; t < numTiles; t = t + 1) {
      // Load one tile of A into local memory.
      for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
          let inputRow = tileRow + innerRow;
          let inputCol = tileCol;
          ${Dd(a,n)}
      }

      // Load one tile of B into local memory.
      for (var innerRow = 0; innerRow < ${f}; innerRow = innerRow + 1) {
          let inputRow = tileRowB + innerRow;
          let inputCol = tileCol;
          mm_Bsub[inputRow][inputCol] = mm_readB(batch, kStart + inputRow, globalCol${n?", batchIndices":""});
      }
      kStart = kStart + tileInner;
      workgroupBarrier();

      // Compute acc values for a single thread.
      for (var k = 0; k < tileInner / innerElementSize; k = k + 1) {
          let BCached0 = mm_Bsub[k * innerElementSize][tileCol];
          let BCached1 = mm_Bsub[k * innerElementSize + 1][tileCol];
          let BCached2 = mm_Bsub[k * innerElementSize + 2][tileCol];
          ${h===3?"":"let BCached3 = mm_Bsub[k * innerElementSize + 3][tileCol];"}

          ${Pd(a,h)}
      }

      workgroupBarrier();
  }

  for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
      mm_write(batch, globalRow + innerRow, globalCol, acc[innerRow]);
  }
}`},ls=(t,e)=>t?`
            mm_Asub[inputRow][inputCol] = mm_readA(batch,
              kStart + inputRow,
              globalRowStart + inputCol${e?", batchIndices":""});
            `:`
            mm_Asub[inputRow][inputCol] = mm_readA(batch,
              globalRowStart + inputRow,
              kStart + inputCol${e?", batchIndices":""});
            `,Nd=t=>t?"let ACached = mm_Asub[k][tileRow + innerRow];":"let ACached = mm_Asub[tileRow + innerRow][k];",Aa=(t,e,r="f32",n,a=!1,i=32,s=!1,o=32,l=!1)=>{let d=t[1]*e[1],c=t[0]*e[0],u=a?d:i,h=a?i:d;if(!(h%e[1]===0&&u%e[0]===0&&i%e[1]===0))throw new Error(`tileAHight ${h} must be divisible by workgroupSize[1]${e[1]}, tileAWidth ${u} must be divisible by workgroupSize[0]${e[0]}, tileInner ${i} must be divisible by workgroupSize[1]${e[1]}`);let f=h/e[1],g=u/e[0],y=i/e[1],w=l?`
    let localRow = i32(localId.y);
    let localCol = i32(localId.x);
    let globalRowStart = i32(workgroupId.y) * ${d};
    let globalColStart = i32(workgroupId.x) * ${c};

    // Loop over shared dimension.
    for (var t = 0; t < numTiles; t = t + 1) {
      // Load one tile of A into local memory.
      for (var inputRow = localRow; inputRow < ${h}; inputRow = inputRow + ${e[1]}) {
        for (var inputCol = localCol; inputCol < ${u}; inputCol = inputCol + ${e[0]}) {
          ${ls(a,n)}
        }
      }
      // Load one tile of B into local memory.
      for (var inputRow = localRow; inputRow < ${i}; inputRow = inputRow + ${e[1]}) {
            for (var inputCol = localCol; inputCol < ${c}; inputCol = inputCol + ${e[0]}) {
          mm_Bsub[inputRow][inputCol] = mm_readB(batch,
            kStart + inputRow,
            globalColStart + inputCol${n?", batchIndices":""});
        }
      }
      kStart = kStart + tileInner;
      workgroupBarrier();

      // Compute acc values for a single thread.
      var BCached : array<${r}, colPerThread>;
      for (var k = 0; k < tileInner; k = k + 1) {
        for (var inner = 0; inner < colPerThread; inner = inner + 1) {
          BCached[inner] = mm_Bsub[k][localCol + inner * ${e[0]}];
        }
        for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
          let ACached = ${a?`mm_Asub[k][localRow + innerRow * ${e[1]}];`:`mm_Asub[localRow + innerRow * ${e[1]}][k];`}
          for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
            acc[innerRow][innerCol] = acc[innerRow][innerCol] +
                ACached * BCached[innerCol];
          }
        }
      }
      workgroupBarrier();
    }
    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
      let gRow = globalRowStart + localRow + innerRow * ${e[1]};
      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
        let gCol = globalColStart + localCol + innerCol * ${e[0]};
        mm_write(batch, gRow, gCol, acc[innerRow][innerCol]);
      }
    }
    `:`
let tileRow = i32(localId.y) * rowPerThread;
let tileCol = i32(localId.x) * colPerThread;

let globalRow = i32(globalId.y) * rowPerThread;
let globalCol = i32(globalId.x) * colPerThread;
let globalRowStart = i32(workgroupId.y) * ${d};

let tileRowA = i32(localId.y) * ${f};
let tileColA = i32(localId.x) * ${g};
let tileRowB = i32(localId.y) * ${y};
// Loop over shared dimension.
for (var t = 0; t < numTiles; t = t + 1) {
  // Load one tile of A into local memory.
  for (var innerRow = 0; innerRow < ${f}; innerRow = innerRow + 1) {
    for (var innerCol = 0; innerCol < ${g}; innerCol = innerCol + 1) {
      let inputRow = tileRowA + innerRow;
      let inputCol = tileColA + innerCol;
      ${ls(a,n)}
    }
  }

  // Load one tile of B into local memory.
  for (var innerRow = 0; innerRow < ${y}; innerRow = innerRow + 1) {
    for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
      let inputRow = tileRowB + innerRow;
      let inputCol = tileCol + innerCol;
      mm_Bsub[inputRow][inputCol] = mm_readB(batch,
        kStart + inputRow,
        globalCol + innerCol${n?", batchIndices":""});
    }
  }
  kStart = kStart + tileInner;
  workgroupBarrier();

  // Compute acc values for a single thread.
  var BCached : array<${r}, colPerThread>;
  for (var k = 0; k < tileInner; k = k + 1) {
    for (var inner = 0; inner < colPerThread; inner = inner + 1) {
      BCached[inner] = mm_Bsub[k][tileCol + inner];
    }

    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
      ${Nd(a)}
      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
        acc[innerRow][innerCol] = acc[innerRow][innerCol] + ACached * BCached[innerCol];
      }
    }
  }

  workgroupBarrier();
}

for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
  for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
    mm_write(batch, globalRow + innerRow, globalCol + innerCol,
        acc[innerRow][innerCol]);
  }
}
`;return`
  var<workgroup> mm_Asub : array<array<${r}, ${u}>, ${h}>;
  var<workgroup> mm_Bsub : array<array<${r}, ${c}>, ${i}>;
  const rowPerThread = ${t[1]};
  const colPerThread = ${t[0]};
  const tileInner = ${i};

@compute @workgroup_size(${e[0]}, ${e[1]}, ${e[2]})
fn main(@builtin(local_invocation_id) localId : vec3<u32>,
        @builtin(global_invocation_id) globalId : vec3<u32>,
        @builtin(workgroup_id) workgroupId : vec3<u32>) {
    let batch = ${s?"0":"i32(globalId.z)"};
    ${n?`let batchIndices = ${n.offsetToIndices("u32(batch)")};`:""}
    let numTiles = ${s?`${Math.ceil(o/i)}`:"(uniforms.dimInner - 1) / tileInner + 1"};
    var kStart = ${s?`i32(globalId.z) * ${o}`:"0"};

    var acc : array<array<${r}, colPerThread>, rowPerThread>;

    // Without this initialization strange values show up in acc.
    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
        acc[innerRow][innerCol] = 0.0;
      }
    }
    ${w}
  }
`},Ud=(t,e,r,n,a,i=!1)=>{let[s,o,l]=a,[d,c,u,h]=n,f=cn(s,l),g=cn(o,l),y=Ct(n[0].type.tensor),w=()=>{let S=c.rank,E=d.rank,x=`var aIndices: ${c.type.indices};`;for(let A=S-2-1,T=E-1;A>=0;A--,T--)x+=`
aIndices[${A}] = ${E>1?`batchIndices[${T}]`:"batchIndices"};`;return f.forEach(A=>{x+=`
aIndices[${A}] = 0;`}),x+=`
aIndices[${S-2}] = u32(row);
                   aIndices[${S-1}] = u32(colIn);`,x},v=()=>{let S=u.rank,E=d.rank,x=`var bIndices: ${u.type.indices};`;for(let A=S-2-1,T=E-1;A>=0;A--,T--)x+=`
bIndices[${A}] = ${E>1?`batchIndices[${T}]`:"batchIndices"};`;return g.forEach(A=>{x+=`
bIndices[${A}] = 0;`}),x+=`
bIndices[${S-2}] = u32(row);
                   bIndices[${S-1}] = u32(colIn);`,x};return`
    fn mm_readA(batch: i32, row: i32, colIn: i32, batchIndices: ${d.type.indices}) -> ${gt(t,y)} {
      var value = ${gt(t,y)}(0.0);
      let col = colIn * ${t};
      if(row < uniforms.dimAOuter && col < uniforms.dimInner)
      {
        ${w()}
        value = ${c.getByIndices("aIndices")};
      }
      return value;
    }

    fn mm_readB(batch: i32, row: i32, colIn: i32, batchIndices: ${d.type.indices}) -> ${gt(t,y)} {
      var value = ${gt(t,y)}(0.0);
      let col = colIn * ${t};
      if(row < uniforms.dimInner && col < uniforms.dimBOuter)
      {
        ${v()}
        value = ${u.getByIndices("bIndices")};
      }
      return value;
    }

    fn mm_write(batch: i32, row: i32, colIn: i32, valueIn: ${gt(t,y)}) {
      let col = colIn * ${t};
      if (row < uniforms.dimAOuter && col < uniforms.dimBOuter) {
        var value = valueIn;
        let coords = vec3<i32>(batch, row, colIn);
        ${e?`value = value + ${i?"bias[colIn]":`${gt(t,y)}(bias[row])`};`:""}
        ${r}
        ${h.setByIndices("vec3<u32>(coords)","value")}
      }
    }
    `},us=(t,e,r,n,a=!1)=>{let i=t[0].dims,s=t[1].dims,o=i.slice(0,-2),l=s.slice(0,-2),d=n?n.slice(0,-2):r.slice(0,-2),c=st(d.length),u=c?d.length:d,h=Zi("batchDims",t[0].dataType,u,1),f=ee.size(d),g=i[i.length-2],y=i[i.length-1],w=s[s.length-1],v=y%4===0&&w%4===0,S=g<=8?[4,1,1]:[4,4,1],E=[8,8,1],x=[Math.ceil(w/E[0]/S[0]),Math.ceil(g/E[1]/S[1]),Math.ceil(f/E[2]/S[2])],A=Ct(t[0].dataType),T=v?4:1,B=[...o,g,y/T],U=st(B.length),H=U?B.length:B,K=[...l,y,w/T],O=st(K.length),G=O?K.length:K,ne=[f,g,w/T],q=J("a",t[0].dataType,H,T),D=J("b",t[1].dataType,G,T),L=ve("result",t[0].dataType,ne.length,T),V=[q,D],te=[{type:"int32",data:g},{type:"int32",data:w},{type:"int32",data:y}];c&&te.push(...ie(d)),U&&te.push(...ie(B)),O&&te.push(...ie(K));let X=[];X.push(U?"rank":"dims"),X.push(O?"rank":"dims");let ue=t.length>2,{activationFunction:F,applyActivation:oe}=Lr(e,L.type.value),$e=Ud(T,ue,oe,[h,q,D,L],[o,l,d],a);if(ue){let De=a?T:1;V.push(J("bias",t[2].dataType,t[2].dims.length,De)),te.push(...ie(t[2].dims)),X.push("rank")}te.push(...ie(ne));let Ue=De=>`
  ${De.registerUniform("dimAOuter","i32").registerUniform("dimBOuter","i32").registerUniform("dimInner","i32").registerInternalVariables(h).declareVariables(...V,L)}
  ${F}
  ${$e}
  ${v?Ca(S,E,A,h):Aa(S,E,A,h)}
                   `;return{name:"MatMul",shaderCache:{hint:e.activationCacheKey+`${S}${v}${a}`,inputDependencies:X},getRunData:()=>({outputs:[{dims:r,dataType:t[0].dataType}],dispatchGroup:{x:x[0],y:x[1],z:x[2]},programUniforms:te}),getShaderSource:Ue}}}),Wd,Ld,p_=Q(()=>{wr(),Ce(),vr(),ss(),Rd(),Ia(),Wd=(t,e,r,n,a=!1,i,s=4,o=4,l=4,d="f32")=>{let c=K=>{switch(K){case 1:return"resData = x[xIndex];";case 3:return`resData = vec3<${d}>(x[xIndex], x[xIndex + 1], x[xIndex + 2]);`;case 4:return"resData = x[xIndex / 4];";default:throw new Error(`innerElementSize ${K} is not supported.`)}},u=K=>{switch(K){case 1:return"return w[row * i32(uniforms.w_shape[3]) + colIn];";case 4:return"return w[row * i32(uniforms.w_shape[3]) / 4 + colIn];";default:throw new Error(`innerElementSize ${K} is not supported.`)}},h=t?`
    let coord = vec4<i32>(batch, xRow, xCol, xCh);
    `:`
    let coord = vec4<i32>(batch, xCh, xRow, xCol);
    `,f=t?`
    let coords = vec4<i32>(
      batch,
      row / outWidth,
      row % outWidth,
      col);
    `:`
    let coords = vec4<i32>(
      batch,
      row,
      col / outWidth,
      col % outWidth);
    `,g=t?"i32(uniforms.x_shape[1])":"i32(uniforms.x_shape[2])",y=t?"i32(uniforms.x_shape[2])":"i32(uniforms.x_shape[3])",w=t?"row":"col",v=t?"col":"row",S=`
    let inChannels = i32(uniforms.w_shape[2]);
    let outWidth = ${t?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};
    let outRow = ${w} / outWidth;
    let outCol = ${w} % outWidth;

    let WRow = ${v} / (filterDims[1] * inChannels);
    let WCol = ${v} / inChannels % filterDims[1];
    let xRow = outRow * stride[0] + dilation[0] * WRow - pad[0];
    let xCol = outCol * stride[1] + dilation[1] * WCol - pad[1];
    let xCh = ${v} % inChannels;
    var resData = ${gt(s,d)}(0.0);
    // The bounds checking is always needed since we use it to pad zero for
    // the 'same' padding type.
    if (xRow >= 0 && xRow < ${g} && xCol >= 0 && xCol < ${y}) {
      ${h}
      let xIndex = getIndexFromCoords4D(coord, vec4<i32>(uniforms.x_shape));
      ${c(s)}
    }
    return resData;`,E=t?e&&n?`
    let col = colIn * ${s};
    ${S}`:`
    let col = colIn * ${s};
    if (row < uniforms.dimAOuter && col < uniforms.dimInner) {
      ${S}
    }
    return ${gt(s,d)}(0.0);`:n&&r?`
    let col = colIn * ${s};
    ${S}`:`
    let col = colIn * ${s};
    if (row < uniforms.dimInner && col < uniforms.dimBOuter) {
      ${S}
    }
    return ${gt(s,d)}(0.0);`,x=`${u(o)}`,A=gt(l,d),T=gt(t?s:o,d),B=gt(t?o:s,d),{activationFunction:U,applyActivation:H}=Lr(i,A);return`
    ${U}
    fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${T} {
      ${t?E:x}
    }

    fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${B} {
      ${t?x:E}
    }

    fn mm_write(batch: i32, row : i32, colIn : i32, valueIn : ${A}) {
      let col = colIn * ${l};
      if (row < uniforms.dimAOuter && col < uniforms.dimBOuter)
      {
      var value = valueIn;
      let outWidth = ${t?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};
      ${f}
      ${is(a)}
      ${H}
      setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);
      }
    }`},Ld=(t,e,r,n,a,i,s,o)=>{let l=e.format==="NHWC",d=l?t[0].dims[3]:t[0].dims[1],c=r[0],u=l?r[2]:r[3],h=l?r[1]:r[2],f=l?r[3]:r[1],g=l&&(d%4===0||d%3===0)&&f%4===0,y=l?f:u*h,w=l?u*h:f,v=[8,8,1],S=n<=8?[4,1,1]:[4,4,1],E=[Math.ceil(y/v[0]/S[0]),Math.ceil(w/v[1]/S[1]),Math.ceil(c/v[2]/S[2])];at("verbose",()=>`[conv2d_mm_webgpu] dispatch = ${E}`);let x=g?l&&d%4!==0?3:4:1,A=v[1]*S[1],T=v[0]*S[0],B=Math.max(v[0]*x,v[1]),U=n%A===0,H=a%T===0,K=i%B===0,O=g?[x,4,4]:[1,1,1],G=Ct(t[0].dataType),ne=g?4:1,q=[{type:"int32",data:n},{type:"int32",data:a},{type:"int32",data:i}],D=J("x",t[0].dataType,t[0].dims.length,x===3?1:x),L=J("w",t[1].dataType,t[1].dims.length,ne),V=[D,L];q.push(...ie(t[0].dims)),q.push(...ie(t[1].dims));let te=`
      fn setOutputAtIndex(flatIndex : i32, value : ${g?`vec4<${G}>`:G}) {
        result[flatIndex] = ${g?`vec4<${G}>`:G}(value);
      }
      fn setOutputAtCoords(d0 : i32, d1 : i32, d2 : i32, d3 : i32, value : ${g?`vec4<${G}>`:G}) {
        let flatIndex = getOutputIndexFromCoords(vec4<i32>(d0, d1, d2, d3));
        setOutputAtIndex(flatIndex ${g?"/ 4":""}, value);
      }`;if(s){let ue=J("bias",t[2].dataType,t[2].dims.length,ne);V.push(ue),q.push(...ie(t[2].dims)),te+=`
        fn getBiasByOutputCoords(coords : vec4<i32>) -> ${g?`vec4<${G}>`:G} {
          return bias[coords.${l?"w":"y"}${g?"/ 4":""}];
        }`}let X=ve("result",t[0].dataType,r.length,ne);return q.push(...ie(r)),{name:"Conv2DMatMul",shaderCache:{hint:e.cacheKey},getRunData:()=>({outputs:[{dims:r,dataType:t[0].dataType}],dispatchGroup:{x:E[0],y:E[1],z:E[2]},programUniforms:q}),getShaderSource:ue=>`
        ${os("uniforms.result_strides")}
        //struct Uniforms { xShape : vec4<i32>, wShape : vec4<i32>, outShape : vec4<i32>,
        //  outShapeStrides: vec3<i32>, filterDims : vec2<i32>, pad : vec2<i32>, stride : vec2<i32>,
        //  dilation : vec2<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32 };
        ${ue.registerUniform("dimAOuter","i32").registerUniform("dimBOuter","i32").registerUniform("dimInner","i32").declareVariables(...V,X)}
        const filterDims : vec2<i32> = vec2<i32>(${e.kernelShape[0]}, ${e.kernelShape[1]});
        const pad : vec2<i32> = vec2<i32>(${e.pads[0]}, ${e.pads[1]});
        const stride : vec2<i32> = vec2<i32>(${e.strides[0]}, ${e.strides[1]});
        const dilation : vec2<i32> = vec2<i32>(${e.dilations[0]}, ${e.dilations[1]});
        ${te}
        ${Wd(l,U,H,K,s,e,O[0],O[1],O[2],G)}
            ${g?Ca(S,v,G,void 0,!l,B):Aa(S,v,G,void 0,!l,B,!1,void 0,o)}`}}}),ds,h_=Q(()=>{Ae(),Ce(),Kd(),vr(),ds=(t,e,r)=>{let n=t.length>2,a=n?"value += b[output_channel];":"",i=t[0].dims,s=t[1].dims,o=s[0]/e.group,l=e.format==="NHWC",d=ps(i,s,e.dilations,e.pads,e.strides,l),c=ee.size(d),u=ve("output",t[0].dataType,d),{activationFunction:h,applyActivation:f}=Lr(e,u.type.value),g=J("x",t[0].dataType,i),y=J("w",t[1].dataType,s),w=[g,y];n&&w.push(J("b",t[2].dataType,t[2].dims));let v=S=>`
  const strides: vec2<u32> = vec2(${e.strides[0]}u, ${e.strides[1]}u);
  const pads: vec2<u32> = vec2(${e.pads[0]}u, ${e.pads[1]}u);

  ${S.declareVariables(...w,u)}

  ${h}

  ${S.mainStart()}
    ${S.guardAgainstOutOfBoundsWorkgroupSizes(c)}

    let outputIndices = ${u.offsetToIndices("global_idx")};
    let batch: u32 = outputIndices[0];
    let output_channel: u32 = outputIndices[${l?3:1}];
    let xRCCorner: vec2<u32> = vec2<u32>(outputIndices[${l?1:2}], outputIndices[${l?2:3}]) * strides - pads;
    let group_id: u32 = output_channel / ${o}u;

    var value: ${u.type.value} = ${u.type.value}(0);
    for (var wInChannel: u32 = 0u; wInChannel < ${s[1]}u; wInChannel++) {
      let input_channel = group_id * ${s[1]}u + wInChannel;
      for (var wHeight: u32 = 0u; wHeight < ${s[2]}u; wHeight++) {
        let xHeight = xRCCorner.x + wHeight * ${e.dilations[0]}u;

        if (xHeight < 0u || xHeight >= ${i[l?1:2]}u) {
          continue;
        }

        for (var wWidth: u32 = 0u; wWidth < ${s[3]}u; wWidth++) {
          let xWidth = xRCCorner.y + wWidth * ${e.dilations[1]}u;
          if (xWidth < 0u || xWidth >= ${i[l?2:3]}u) {
            continue;
          }

          let xVal = ${l?g.get("batch","xHeight","xWidth","input_channel"):g.get("batch","input_channel","xHeight","xWidth")};
          let wVal = ${y.get("output_channel","wInChannel","wHeight","wWidth")};
          value += xVal*wVal;
        }
      }
    }
    ${a}
    ${f}
    ${u.setByOffset("global_idx","value")}
  }`;return{name:"GroupedConv",shaderCache:{hint:e.cacheKey},getRunData:()=>({outputs:[{dims:r?r(d):d,dataType:t[0].dataType}],dispatchGroup:{x:Math.ceil(c/64)}}),getShaderSource:v}}}),cs,Fd,Vd,Hd=Q(()=>{Ae(),Ia(),Ce(),vr(),cs=(t,e,r,n,a=!1)=>{let i=t[0].dims,s=t[1].dims,o=i[i.length-2],l=s[s.length-1],d=i[i.length-1],c=wt(l),u=wt(d),h=wt(o),f=ee.size(r)/c/h,g=t.length>2,y=n?n.slice(0,-2):r.slice(0,-2),w=[ee.size(y),o,l],v=[{type:"uint32",data:f},{type:"uint32",data:o},{type:"uint32",data:l},{type:"uint32",data:d},...ie(y),...ie(i),...ie(s)];g&&v.push(...ie(t[2].dims)),v.push(...ie(w));let S=E=>{let x=Zi("batch_dims",t[0].dataType,y.length),A=J("a",t[0].dataType,i.length,u),T=J("b",t[1].dataType,s.length,c),B=ve("output",t[0].dataType,w.length,c),{activationFunction:U,applyActivation:H}=Lr(e,B.type.value),K=[A,T],O="";if(g){let te=a?c:1;K.push(J("bias",t[2].dataType,t[2].dims.length,te)),O=`${a?`value += bias[col / ${te}];`:`value += ${B.type.value}(bias[row + i]);`}`}let G=i.slice(0,-2),ne=s.slice(0,-2),q=cn(G,y),D=cn(ne,y),L=(te,X)=>{let ue=te.rank,F=te.name;if(ue===2)return`var ${F}_indices = ${te.type.indices}(0u, 0u);`;let oe=x.rank,$e=`var ${F}_indices: ${te.type.indices};`;for(let Ue=ue-2-1,De=oe-1;Ue>=0;Ue--,De--)$e+=`
${F}_indices[${Ue}] = ${oe>1?`batch_indices[${De}]`:"batch_indices"};`;return X.forEach(Ue=>{$e+=`
${F}_indices[${Ue}] = 0;`}),$e+=`${F}_indices[${ue-2}] = 0u;
                     ${F}_indices[${ue-1}] = 0u;`,$e},V=()=>{let te=`var a_data: ${A.type.value};`;for(let X=0;X<u;X++)te+=`
              let b_data${X} = b[(b_offset + (k + ${X}) * uniforms.N + col) / ${c}];`;for(let X=0;X<h;X++){te+=`a_data = a[(a_offset + (row + ${X}) * uniforms.K + k) / ${u}];`;for(let ue=0;ue<u;ue++)te+=`
            values[${X}] = fma(${T.type.value}(a_data${u===1?"":`[${ue}]`}), b_data${ue}, values[${X}]);
`}return te};return`
  ${E.registerUniform("outputSize","u32").registerUniform("M","u32").registerUniform("N","u32").registerUniform("K","u32").registerInternalVariables(x).declareVariables(...K,B)}
  ${U}
  ${E.mainStart()}
    ${E.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
    let col = (global_idx % (uniforms.N / ${c})) * ${c};
    var index1 = global_idx / (uniforms.N / ${c});
    let stride1 = uniforms.M / ${h};
    let row = (index1 % stride1) * ${h};
    let batch = index1 / stride1;

    ${r.length===2?"":`let batch_indices = ${x.offsetToIndices("batch")};`}
    ${L(A,q)}
    let a_offset = ${A.indicesToOffset("a_indices")};
    ${L(T,D)}
    let b_offset = ${T.indicesToOffset("b_indices")};
    var values: array<${B.type.value}, ${h}>;
    for (var k: u32 = 0u; k < uniforms.K; k = k + ${u}) {
      ${V()}
    }
    for (var i = 0u; i < ${h}u; i++) {
      var value = values[i];
      ${O}
      ${H}
      let cur_indices = ${B.type.indices}(batch, row + i, col);
      let offset = ${B.indicesToOffset("cur_indices")};
      ${B.setByOffset(`offset / ${c}`,"value")};
    }
  }
  `};return{name:"MatMulNaive",shaderCache:{hint:`${e.activationCacheKey}_${c}_${u}_${h}_${a}`,inputDependencies:g?["rank","rank","rank"]:["rank","rank"]},getRunData:()=>({outputs:[{dims:r,dataType:t[0].dataType}],dispatchGroup:{x:Math.ceil(f/64)},programUniforms:v}),getShaderSource:S}},Fd=t=>{if(!t||t.length!==2)throw new Error("MatMul requires 2 inputs.");if(t[0].dims[t[0].dims.length-1]!==t[1].dims[t[1].dims.length-2])throw new Error("shared dimension does not match.")},Vd=t=>{Fd(t.inputs);let e=Wr.calcShape(t.inputs[0].dims,t.inputs[1].dims,!0);if(!e)throw new Error("Can't use matmul on the given tensors");let r=e[e.length-1],n=t.inputs[0].dims[t.inputs[0].dims.length-1];r<8&&n<8?t.compute(cs(t.inputs,{activation:"",activationCacheKey:""},e)):t.compute(us(t.inputs,{activation:"",activationCacheKey:""},e))}}),ps,hs,Gd,fs,ms,qd,jd,gs,Kd=Q(()=>{Ae(),it(),p_(),Ia(),h_(),vr(),Hd(),pn(),ps=(t,e,r,n,a,i)=>{let s=t[0],o=t.slice(i?1:2,i?3:4),l=o.length,d=e[0],c=e.slice(2).map((h,f)=>h+(h-1)*(r[f]-1)),u=o.map((h,f)=>h+n[f]+n[f+l]).map((h,f)=>Math.floor((h-c[f]+a[f])/a[f]));return u.splice(0,0,s),u.splice(i?3:1,0,d),u},hs=[2,3,1,0],Gd=(t,e)=>{if(!t||t.length!==2&&t.length!==3)throw new Error("Conv requires 2 or 3 inputs");if(t[0].dims.length!==4&&t[0].dims.length!==3)throw new Error("currently only support conv 1D and 2D");if(t[0].dims.length!==t[1].dims.length)throw new Error("filter does not have same dimension as input");let r=t[0].dims[e.format==="NHWC"?t[0].dims.length-1:1],n=t[1].dims[1]*e.group;if(r!==n)throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");if(t.length===3&&(t[2].dims.length!==1||t[1].dims[0]!==t[2].dims[0]))throw new Error("invalid bias");let a=t[0].dims.length-2;if(e.dilations.length!==a)throw new Error(`dilations should be ${a}D`);if(e.strides.length!==a)throw new Error(`strides should be ${a}D`);if(e.pads.length!==a*2)throw new Error(`pads should be ${a*2}D`);if(e.kernelShape.length!==0&&e.kernelShape.length!==t[1].dims.length-2)throw new Error("invalid kernel shape")},fs=(t,e)=>{let r=t.kernelShape.slice();for(let i=2;i<e[1].dims.length;++i)r[i-2]===0&&(r[i-2]=e[1].dims[i]);let n=t.pads.slice();va.adjustPadsBasedOnAutoPad(e[0].dims,t.strides,t.dilations,r,n,t.format==="NHWC",t.autoPad);let a=Object.assign({},t);return Object.assign(a,{kernelShape:r,pads:n,cacheKey:t.cacheKey}),a},ms=t=>{let e=as(t),r=t.format,n=["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][t.auto_pad],a=t.dilations,i=t.group,s=t.kernel_shape,o=t.pads,l=t.strides,d=t.w_is_const();return qe({autoPad:n,format:r,dilations:a,group:i,kernelShape:s,pads:o,strides:l,wIsConst:d,...e})},qd=(t,e,r)=>{let n=fs(r,e),a=r.format==="NHWC";if(r.group!==1){t.compute(ds(e,n));return}let i=e.length===3,s=e[0].dims[a?1:2],o=e[0].dims[a?2:3],l=e[0].dims[a?3:1],d=e[1].dims[2],c=e[1].dims[3],u=ps(e[0].dims,e[1].dims,r.dilations,n.pads,r.strides,a),h=u[a?1:2],f=u[a?2:3],g=u[a?3:1],y=a&&d===s&&c===o&&r.pads[0]===0&&r.pads[1]===0;if(y||d===1&&c===1&&r.dilations[0]===1&&r.dilations[1]===1&&r.strides[0]===1&&r.strides[1]===1&&r.pads[0]===0&&r.pads[1]===0){let T=u[0],B,U,H,K=[];if(a){let ne=t.kernelCustomData.wT??t.compute(ur(e[1],hs),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];if(r.wIsConst&&!t.kernelCustomData.wT&&(t.kernelCustomData.wT=ne),y){let q=s*o*l;B=e[0].reshape([1,T,q]),U=ne.reshape([1,q,g]),H=[1,T,g]}else B=e[0].reshape([T,s*o,l]),U=ne.reshape([1,l,g]),H=[T,h*f,g];K.push(B),K.push(U)}else B=e[0].reshape([T,l,s*o]),U=e[1].reshape([1,g,l]),H=[T,g,h*f],K.push(U),K.push(B);i&&K.push(e[2]);let O=H[2],G=K[0].dims[K[0].dims.length-1];O<8&&G<8?t.compute(cs(K,n,u,H,a),{inputs:K}):t.compute(us(K,n,u,H,a),{inputs:K});return}let w=!0,v=t.kernelCustomData.wT??t.compute(ur(e[1],hs),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];r.wIsConst&&!t.kernelCustomData.wT&&(t.kernelCustomData.wT=v);let S=[e[0],v];i&&S.push(e[2]);let E=a?h*f:g,x=a?g:h*f,A=d*c*l;t.compute(Ld(S,n,u,E,x,A,i,w),{inputs:S})},jd=(t,e)=>{let r=e.format==="NHWC",n=[t.inputs[0].reshape(r?[t.inputs[0].dims[0],1,t.inputs[0].dims[1],t.inputs[0].dims[2]]:[t.inputs[0].dims[0],t.inputs[0].dims[1],1,t.inputs[0].dims[2]]),t.inputs[1].reshape([t.inputs[1].dims[0],t.inputs[1].dims[1],1,t.inputs[1].dims[2]])];t.inputs.length===3&&n.push(t.inputs[2]);let a=[0,e.pads[0],0,e.pads[1]],i=[1].concat(e.strides),s=[1].concat(e.dilations),o=[1].concat(e.kernelShape),l=fs({...e,pads:a,strides:i,dilations:s,kernelShape:o},n);t.compute(ds(n,l,d=>r?[d[0],d[2],d[3]]:[]))},gs=(t,e)=>{Gd(t.inputs,e),t.inputs[0].dims.length===3?jd(t,e):qd(t,t.inputs,e)}}),Yd,Xd,f_=Q(()=>{wr(),Ce(),vr(),ss(),Rd(),Ia(),Yd=(t,e=!1,r,n=4)=>{let a=gt(n,"f32"),i=v=>{switch(v){case 1:return"return w[getIndexFromCoords4D(coord, vec4<i32>(uniforms.w_shape))];";case 4:return`
            let coord1 = vec4<i32>(coordX, coordY, col + 1, rowInner);
            let coord2 = vec4<i32>(coordX, coordY, col + 2, rowInner);
            let coord3 = vec4<i32>(coordX, coordY, col + 3, rowInner);
            let v0 = w[getIndexFromCoords4D(coord, vec4<i32>(uniforms.w_shape))];
            let v1 = w[getIndexFromCoords4D(coord1, vec4<i32>(uniforms.w_shape))];
            let v2 = w[getIndexFromCoords4D(coord2, vec4<i32>(uniforms.w_shape))];
            let v3 = w[getIndexFromCoords4D(coord3, vec4<i32>(uniforms.w_shape))];
            return vec4<f32>(v0, v1, v2, v3);
            `;default:throw new Error(`innerElementSize ${v} is not supported.`)}},s=t?`
      let coord = vec4<i32>(batch, iXR, iXC, xCh);
      `:`
      let coord = vec4<i32>(batch, xCh, iXR, iXC);
      `,o=t?`
    let coords = vec4<i32>(
      batch,
      row / outWidth,
      row % outWidth,
      col);
    `:`
    let coords = vec4<i32>(
      batch,
      row,
      col / outWidth,
      col % outWidth);
    `,l=t?"outBackprop[1]":"outBackprop[2]",d=t?"outBackprop[2]":"outBackprop[3]",c=t?"row":"col",u=t?"col":"row",h=`
      let inChannels = ${t?"outBackprop[3]":"outBackprop[1]"};
      let outWidth = ${t?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};
      let outRow = ${c} / outWidth;
      let outCol = ${c} % outWidth;

      let WRow = ${u} / (filterDims[1] * inChannels);
      let WCol = ${u} / inChannels % filterDims[1];
      let xR = f32(outRow - pads[0] + dilation[0] * WRow) / f32(strides[0]);
      let xC = f32(outCol - pads[1] + dilation[1] * WCol) / f32(strides[1]);
      if (xR < 0.0 || xR >= f32(${l}) || fract(xR) > 0.0) {
        return ${a}(0.0);
      }
      if (xC < 0.0 || xC >= f32(${d}) || fract(xC) > 0.0) {
        return ${a}(0.0);
      }
      let iXR = i32(xR);
      let iXC = i32(xC);
      let xCh = ${u} % inChannels;
      ${s}
      return x[getIndexFromCoords4D(coord, vec4<i32>(uniforms.x_shape))/${n}];`,f=t?`
      let col = colIn * ${n};
      if (row < uniforms.dimAOuter && col < uniforms.dimInner) {
        ${h}
      }
      return ${a}(0.0);`:`
      let col = colIn * ${n};
      if (row < uniforms.dimInner && col < uniforms.dimBOuter) {
        ${h}
      }
      return ${a}(0.0);`,g=`
      let col = colIn * ${n};
      let inChannels = ${t?"outBackprop[3]":"outBackprop[1]"};
      let coordX = filterDims.x - 1 - row / (filterDims[1] * inChannels);
      let coordY = filterDims.y - 1 - (row / inChannels) % filterDims[1];
      if (${t?"row < uniforms.dimInner && col < uniforms.dimBOuter":"row < uniforms.dimInner && col < uniforms.dimAOuter"}  && coordX >= 0 && coordY >= 0) {
        let rowInner = row % inChannels;
        let coord = vec4<i32>(coordX, coordY, col, rowInner);
        ${i(n)}
      }
      return ${a}(0.0);
      `,{activationFunction:y,applyActivation:w}=Lr(r,a);return`
      ${y}
  fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${a} {
    ${t?f:g}
  }

  fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${a} {
    ${t?g:f}
  }

  fn mm_write(batch: i32, row : i32, colIn : i32, valueInput : ${a}) {
    let col = colIn * ${n};
    if (row < uniforms.dimAOuter && col < uniforms.dimBOuter) {
      var value = valueInput;
      let outWidth = ${t?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};
      ${o}
      ${is(e)}
      ${w}
      result[getIndexFromCoords4D(coords, vec4<i32>(uniforms.result_shape))/${n}] = value;
    }
  }`},Xd=(t,e,r,n,a,i,s,o)=>{let l=e.format==="NHWC",d=l?t[0].dims[3]:t[0].dims[1],c=r[0],u=l?r[2]:r[3],h=l?r[1]:r[2],f=l?r[3]:r[1],g=l?d%4===0&&f%4===0:u%4===0&&f%4===0,y=l?f:u*h,w=l?u*h:f,v=g?[8,8,1]:[y<=4||w<=4?4:16,y>4&&w<=4?4:16,1],S=g?[4,4,1]:[y<=4?1:4,y>4&&w<=4?1:4,1],E=[Math.ceil(y/v[0]/S[0]),Math.ceil(w/v[1]/S[1]),Math.ceil(c/v[2]/S[2])];at("verbose",()=>`[conv_backprop_mm_webgpu] dispatch = ${E}`);let x=g?4:1,A=Math.max(v[0]*x,v[1]),T=g?4:1,B=[{type:"int32",data:n},{type:"int32",data:a},{type:"int32",data:i}],U=J("x",t[0].dataType,t[0].dims.length,T),H=J("w",t[1].dataType,t[1].dims.length,1),K=ve("result",t[0].dataType,r.length,T),O=[U,H];B.push(...ie(t[0].dims)),B.push(...ie(t[1].dims));let G="";if(s){let ne=J("bias",t[2].dataType,t[2].dims.length,T);O.push(ne),B.push(...ie(t[2].dims)),G+=`
        fn getBiasByOutputCoords(coords : vec4<i32>) -> ${g?"vec4<f32>":"f32"} {
          return bias[coords.${l?"w":"y"}${g?"/ 4":""}];
        }`}return B.push(...ie(r)),{name:"Conv2DTransposeMatMul",shaderCache:{hint:e.cacheKey},getRunData:()=>({outputs:[{dims:r,dataType:t[0].dataType}],dispatchGroup:{x:E[0],y:E[1],z:E[2]},programUniforms:B}),getShaderSource:ne=>`
        ${os("uniforms.result_strides")}
        ${ne.registerUniform("dimAOuter","i32").registerUniform("dimBOuter","i32").registerUniform("dimInner","i32").declareVariables(...O,K)};
        const outBackprop : vec4<i32> = vec4<i32>(${t[0].dims.join(",")});
        const filterDims : vec2<i32> = vec2<i32>(${e.kernelShape[l?1:2]}, ${e.kernelShape[l?2:3]});
        const effectiveFilterDims : vec2<i32> = filterDims + vec2<i32>(
              ${e.dilations[0]<=1?0:(e.kernelShape[l?1:2]-1)*(e.dilations[0]-1)},
              ${e.dilations[1]<=1?0:(e.kernelShape[l?2:3]-1)*(e.dilations[1]-1)});
        const pads : vec2<i32> = vec2<i32>(i32(effectiveFilterDims[0]) - 1 - (${e.pads[0]+e.pads[2]})/2,
                                         i32(effectiveFilterDims[1]) - 1 - (${e.pads[1]+e.pads[3]})/2);
        const strides : vec2<i32> = vec2<i32>(${e.strides[0]}, ${e.strides[1]});
        const dilation : vec2<i32> = vec2<i32>(${e.dilations[0]}, ${e.dilations[1]});
        const dimAOuter : i32 = ${n};
        const dimBOuter : i32 = ${a};
        const dimInner : i32 = ${i};
        ${G}
        ${Yd(l,s,e,x)}
        ${g?Ca(S,v,"f32",void 0,!l,A):Aa(S,v,"f32",void 0,!l,A,!1,void 0,o)}`}}}),Qd,_s,m_=Q(()=>{wr(),Ae(),Ce(),Qd=(t,e,r,n,a,i,s=!1,o)=>{let l=r.format==="NHWC",d=l?1:2,c=l?2:3,u=l?3:1,h=ee.size(n),f=s?2:1,g=r.group,y=e[1].dims,w=y[0]/g,v=y[1],S=`
  fn setOutputAtIndex(flatIndex : u32, value : ${s?`vec4<${o}>`:o}) {
    result[flatIndex] = ${s?`vec4<${o}>`:o}(value);
  }`;a&&(S+=`
    fn getBiasByOutputCoords(coords : vec4<u32>) -> ${s?`vec4<${o}>`:o} {
      return bias[coords.${l?"w":"y"}${s?"/ 4":""}];
    }`);let E=s?4:1,x=J("W",e[1].dataType,e[1].dims,E),A=J("Dy",e[0].dataType,e[0].dims,E),T=[A,x];a&&T.push(J("bias",e[2].dataType,[n[u]],E));let B=ve("result",e[0].dataType,n,E),U=`{
        let batch: u32 = ${i?"global_id.z":"workgroup_id.z"} / outShape[1];
        let r = ${i?"global_id.z":"workgroup_id.z"} % outShape[1];
        let c = ${i?"global_id.y":"workgroup_id.y"} * ${f};
        let d1: u32 = ${i?"global_id.x":"workgroup_id.x"} * 4;

        let dyCorner = vec2<i32>(i32(r), i32(c)) - vec2<i32>(pads);

        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).
        // ? = to be determined. : = across all values in that axis.
        var dotProd: array<vec4<${o}>, ${f}>;
        for (var i = 0; i < ${f}; i++) {
          dotProd[i] = vec4<${o}>(0.0);
        }
        for (var wR: u32 = 0; wR < filterDims[0]; wR = wR + 1) {
          var dyR = (${o}(dyCorner.x) + ${o}(wR)) / ${o}(strides.x);
          let wRPerm = filterDims[0] - 1 - wR;
          if (dyR < 0.0 || dyR >= ${o}(outBackprop[1]) ||
              fract(dyR) > 0.0 || wRPerm < 0) {
            continue;
          }
          let idyR: u32 = u32(dyR);

          for (var wC: u32 = 0; wC < filterDims[1]; wC = wC + 1) {
            let dyC = (${o}(dyCorner.y) + ${o}(wC)) / ${o}(strides.y);
            let dyC2 = (${o}(dyCorner.y) + 1.0 + ${o}(wC)) / ${o}(strides.y);
            let wCPerm = filterDims[1] - 1 - wC;
            if (wCPerm < 0) {
              continue;
            }
            var bDyCVal = true;
            var bDyCVal2 = true;
            if (dyC < 0.0 || dyC >= ${o}(outBackprop[2]) ||
                fract(dyC) > 0.0) {
              bDyCVal = false;
            }
            if (dyC2 < 0.0 || dyC2 >= ${o}(outBackprop[2]) ||
                fract(dyC2) > 0.0) {
              bDyCVal2 = false;
            }

            let idyC: u32 = u32(dyC);
            let idyC2: u32 = u32(dyC2);
            if (bDyCVal && bDyCVal2) {
              let d2Length = outBackprop[3];
              for (var d2 :u32 = 0; d2 < d2Length; d2 = d2 + 4) {
                let wValue0 = ${x.get("u32(wRPerm)","u32(wCPerm)","d1","d2")};
                let wValue1 = ${x.get("u32(wRPerm)","u32(wCPerm)","d1 + 1","d2")};
                let wValue2 = ${x.get("u32(wRPerm)","u32(wCPerm)","d1 + 2","d2")};
                let wValue3 = ${x.get("u32(wRPerm)","u32(wCPerm)","d1 + 3","d2")};

                var xValue = ${A.get("batch","idyR","idyC","d2")};
                let tmpval = vec4<${o}>(dot(xValue, wValue0),
                                      dot(xValue, wValue1),
                                      dot(xValue, wValue2),
                                      dot(xValue, wValue3));
                dotProd[0] = dotProd[0] + tmpval;

                xValue =  ${A.get("batch","idyR","idyC2","d2")};

                dotProd[1] = dotProd[1] + vec4<${o}>(dot(xValue, wValue0),
                                                    dot(xValue, wValue1),
                                                    dot(xValue, wValue2),
                                                    dot(xValue, wValue3));
              }
            } else if (bDyCVal) {
              let d2Length = outBackprop[${u}];
              for (var d2: u32 = 0; d2 < d2Length; d2 = d2 + 4) {
                let wValue0 = ${x.get("u32(wRPerm)","u32(wCPerm)","d1","d2")};
                let wValue1 = ${x.get("u32(wRPerm)","u32(wCPerm)","d1 + 1","d2")};
                let wValue2 = ${x.get("u32(wRPerm)","u32(wCPerm)","d1 + 2","d2")};
                let wValue3 = ${x.get("u32(wRPerm)","u32(wCPerm)","d1 + 3","d2")};

                var xValue = ${A.get("batch","idyR","idyC","d2")};
                let tmpval = vec4<${o}>(dot(xValue, wValue0),
                                      dot(xValue, wValue1),
                                      dot(xValue, wValue2),
                                      dot(xValue, wValue3));
                dotProd[0] = dotProd[0] + tmpval;
              }
            } else if (bDyCVal2) {
              let d2Length = outBackprop[3];
              for (var d2: u32 = 0; d2 < d2Length; d2 = d2 + 4) {
                let wValue0 = ${x.get("u32(wRPerm)","u32(wCPerm)","d1","d2")};
                let wValue1 = ${x.get("u32(wRPerm)","u32(wCPerm)","d1 + 1","d2")};
                let wValue2 = ${x.get("u32(wRPerm)","u32(wCPerm)","d1 + 2","d2")};
                let wValue3 = ${x.get("u32(wRPerm)","u32(wCPerm)","d1 + 3","d2")};

                var xValue = ${A.get("batch","idyR","idyC2","d2")};
                let tmpval = vec4<${o}>(dot(xValue, wValue0),
                                      dot(xValue, wValue1),
                                      dot(xValue, wValue2),
                                      dot(xValue, wValue3));
                dotProd[1] = dotProd[1] + tmpval;
              }
            }
          }
        }

        for (var i: u32 = 0; i < ${f}; i = i + 1) {
          let value = dotProd[i] + ${a?"bias[c+i]":`vec4<${o}>(0.0)`};
          ${B.set("batch","r","c + i","d1","value")};
        }
      }`,H=`
          let outputIndices = ${B.offsetToIndices("global_idx")};
          let batch = ${B.indicesGet("outputIndices",0)};
          let d1 = ${B.indicesGet("outputIndices",u)};
          let r = ${B.indicesGet("outputIndices",d)};
          let c = ${B.indicesGet("outputIndices",c)};
          let dyCorner = vec2<i32>(i32(r), i32(c)) - pads;
          let dyRCorner = dyCorner.x;
          let dyCCorner = dyCorner.y;
          let groupId = d1 / ${v};
          let wOutChannel = d1 - groupId * ${v};
          // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).
          // ? = to be determined. : = across all values in that axis.
          var dotProd = ${o}(0.0);
          for (var wR: u32 = 0; wR < effectiveFilterDims.x; wR = wR + 1) {
            if (wR % dilations.x != 0) {
              continue;
            }
            let dyR = (${o}(dyRCorner) + ${o}(wR)) / ${o}(strides[0]);
            let wRPerm = filterDims.x - 1 - wR / dilations.x;
            if (dyR < 0.0 || dyR >= ${o}(outBackprop[${d}]) || fract(dyR) > 0.0 ||
                wRPerm < 0) {
              continue;
            }
            let idyR: u32 = u32(dyR);

            for (var wC: u32 = 0; wC < effectiveFilterDims.y; wC = wC + 1) {
              if (wC % dilations.y != 0) {
                continue;
              }
              let dyC = (${o}(dyCCorner) + ${o}(wC)) / ${o}(strides.y);
              let wCPerm = filterDims.y - 1 - wC / dilations.y;
              if (dyC < 0.0 || dyC >= ${o}(outBackprop[${c}]) ||
                  fract(dyC) > 0.0 || wCPerm < 0) {
                continue;
              }
              let idyC: u32 = u32(dyC);
              var inputChannel = groupId * ${w};
              for (var d2: u32 = 0; d2 < ${w}; d2 = d2 + 1) {
                let xValue = ${l?A.get("batch","idyR","idyC","inputChannel"):A.get("batch","inputChannel","idyR","idyC")};
                let wValue = ${x.get("inputChannel","wOutChannel","u32(wRPerm)","u32(wCPerm)")};
                dotProd = dotProd + xValue * wValue;
                inputChannel = inputChannel + 1;
              }
            }
          }
          let value = dotProd + ${a?"bias[d1]":`${o}(0.0)`};
          ${B.setByOffset("global_idx","value")};
        `;return`
  ${t.declareVariables(...T,B)}
  ${S}
  const outShape : vec4<u32> = vec4<u32>(${n.join(",")});
  const outBackprop : vec4<u32> = vec4<u32>(${e[0].dims.join(",")});
  const strides : vec2<u32> = vec2<u32>(${r.strides[0]}, ${r.strides[1]});
  const filterDims : vec2<u32> = vec2<u32>(${r.kernelShape[l?1:2]}, ${r.kernelShape[l?2:3]});
  const dilations : vec2<u32> = vec2<u32>(${r.dilations[0]}, ${r.dilations[1]});
  const effectiveFilterDims : vec2<u32> = filterDims + vec2<u32>(
          ${r.dilations[0]<=1?0:(r.kernelShape[l?1:2]-1)*(r.dilations[0]-1)},
          ${r.dilations[1]<=1?0:(r.kernelShape[l?2:3]-1)*(r.dilations[1]-1)});
  const pads : vec2<i32> = vec2<i32>(i32(effectiveFilterDims[0]) - 1 - (${r.pads[0]+r.pads[2]})/2,
                                     i32(effectiveFilterDims[1]) - 1 - (${r.pads[1]+r.pads[3]})/2);
    ${t.mainStart()}
    ${t.guardAgainstOutOfBoundsWorkgroupSizes(h)};
  ${s?U:H}}`},_s=(t,e,r)=>{let n=t.length>2,a=e.outputShape,i=ee.size(a),s=[Math.ceil(i/64),1,1];at("verbose",()=>`[conv2d_backprop_webgpu] dispatch = ${s}`);let o=Ct(t[0].dataType);return{name:"ConvTranspose2D",shaderCache:{hint:e.cacheKey},getRunData:()=>({dispatchGroup:{x:s[0],y:s[1],z:s[2]},outputs:[{dims:r?r(a):a,dataType:t[0].dataType}]}),getShaderSource:l=>Qd(l,t,e,a,n,s[1]===1&&s[2]===1,!1,o)}}}),Zd,Jd,ec,ys,tc,rc,nc,ac,ic,sc,g_=Q(()=>{it(),f_(),m_(),vr(),pn(),Zd=(t,e,r,n,a,i)=>(t-1)*e+r+(n-1)*a+1-i,Jd=(t,e,r,n,a)=>{let i=Math.floor(t/2);e==="SAME_UPPER"?(r[n]=i,r[a]=t-i):e==="SAME_LOWER"&&(r[n]=t-i,r[a]=i)},ec=(t,e,r,n,a,i,s,o,l,d)=>{let c=t.length-2,u=d.length===0;if(l.length===0)for(let g=0;g<c;++g)l.push(0);let h=t[0],f=e[o?3:1]*a;for(let g=0,y=t.length-c-(o?1:0);g<c;++g,++y){let w=t[y],v=u?w*s[g]:d[g],S=Zd(w,s[g],i[g],e[y],r[g],v);Jd(S,n,i,g,g+c),u&&d.push(s[g]*(w-1)+l[g]+(e[y]-1)*r[g]+1-i[g]-i[g+c])}d.splice(0,0,h),d.splice(o?3:1,0,f)},ys=(t,e)=>{let r=t.kernelShape.slice();if(t.kernelShape.length===0||t.kernelShape.reduce((h,f)=>h*f,1)===0){r.length=0;for(let h=2;h<e[1].dims.length;++h)r.push(e[1].dims[h])}let n=t.format==="NHWC";r.splice(0,0,e[1].dims[0]),r.splice(n?3:1,0,e[1].dims[1]);let a=t.pads.slice(),i=t.outputShape.slice(),s=t.outputPadding.slice(),o=e[0].dims,l=t.dilations.slice();if(l.reduce((h,f)=>h+f,0)===0){let h=e[0].dims.length-2;l=new Array(h).fill(1)}let d=t.strides.slice();if(d.reduce((h,f)=>h+f,0)===0){let h=e[0].dims.length-2;d=new Array(h).fill(1)}ec(o,r,l,t.autoPad,t.group,a,d,n,s,i);let c=Object.assign({},t),u=t.cacheKey+[r.join("n,"),a.join(","),d.join(","),s.join(","),i.join(","),l.join(",")].join("_");return Object.assign(c,{kernelShape:r,pads:a,outputPadding:s,outputShape:i,dilations:l,strides:d,cacheKey:u}),c},tc=t=>{let e=as(t),r=t.format,n=["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][typeof t.autoPad>"u"?0:t.autoPad],a=t.dilations,i=t.group,s=t.kernelShape,o=t.pads,l=t.strides,d=t.wIsConst(),c=t.outputPadding,u=t.outputShape;return qe({autoPad:n,format:r,dilations:a,group:i,kernelShape:s,outputPadding:c,outputShape:u,pads:o,strides:l,wIsConst:d,...e})},rc=(t,e)=>{if(!t||t.length!==2&&t.length!==3)throw new Error("Conv requires 2 or 3 inputs");if(t[0].dims.length!==4&&t[0].dims.length!==3)throw new Error("currently only support 2-dimensional conv");if(t[0].dims.length!==t[1].dims.length)throw new Error("filter does not have same dimension as input");let r=t[0].dims[e.format==="NHWC"?t[0].dims.length-1:1],n=t[1].dims[0];if(r!==n)throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");let a=t[1].dims[1]*e.group;if(t.length===3&&(t[2].dims.length!==1||t[2].dims[0]!==a))throw new Error("invalid bias");let i=t[0].dims.length-2;if(e.dilations.reduce((s,o)=>s+o,0)>0&&e.dilations.length!==i)throw new Error(`dilations should be ${i}D`);if(e.strides.reduce((s,o)=>s+o,0)>0&&e.strides.length!==i)throw new Error(`strides should be ${i}D`);if(e.pads.reduce((s,o)=>s+o,0)>0&&e.pads.length!==i*2)throw new Error(`pads should be ${i*2}D`);if(e.outputPadding.length!==i&&e.outputPadding.length!==0)throw new Error(`output_padding should be ${i}D`);if(e.kernelShape.reduce((s,o)=>s+o,0)>0&&e.kernelShape.length!==0&&e.kernelShape.length!==t[1].dims.length-2)throw new Error("invalid kernel shape");if(e.outputShape.length!==0&&e.outputShape.length!==t[0].dims.length-2)throw new Error("invalid output shape")},nc=[2,3,1,0],ac=(t,e,r)=>{let n=ys(r,e),a=r.format==="NHWC",i=n.outputShape,s=i[a?3:1],o=e[0].dims[a?3:1];if(n.group!==1||s===1&&o===1){t.compute(_s(e,n));return}let l=i[a?1:2],d=i[a?2:3],c=e[1].dims[2],u=e[1].dims[3],h=a?l*d:s,f=a?s:l*d,g=c*u*o,y=!0,w=t.kernelCustomData.wT??t.compute(ur(e[1],nc),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];r.wIsConst&&!t.kernelCustomData.wT&&(t.kernelCustomData.wT=w);let v=[e[0],w],S=e.length===3;S&&(!a&&e[2].dims.length===1?v.push(e[2].reshape([e[2].dims[0],1,1])):v.push(e[2])),t.compute(Xd(v,n,i,h,f,g,S,y),{inputs:v})},ic=(t,e)=>{let r=e.format==="NHWC",n=[t.inputs[0].reshape(r?[t.inputs[0].dims[0],1,t.inputs[0].dims[1],t.inputs[0].dims[2]]:[t.inputs[0].dims[0],t.inputs[0].dims[1],1,t.inputs[0].dims[2]]),t.inputs[1].reshape([t.inputs[1].dims[0],t.inputs[1].dims[1],1,t.inputs[1].dims[2]])];n.length===3&&n.push(t.inputs[2]);let a=e.kernelShape;(a.length===0||a[0]===0)&&(a=[t.inputs[1].dims[2]]);let i=e.dilations;(i.length===0||i[0]===0)&&(i=[1]);let s=e.strides;(s.length===0||s[0]===0)&&(s=[1]);let o=e.pads;o.length===0&&(o=[0,0]),o=[0,o[0],0,o[1]],s=[1].concat(s),i=[1].concat(i),a=[1].concat(a);let l=ys({...e,pads:o,strides:s,dilations:i,kernelShape:a},n);t.compute(_s(n,l,d=>r?[d[0],d[2],d[3]]:[d[0],d[1],d[3]]))},sc=(t,e)=>{rc(t.inputs,e),t.inputs[0].dims.length===3?ic(t,e):ac(t,t.inputs,e)}}),oc,lc,uc,__=Q(()=>{Ye(),Ae(),it(),Ce(),oc=(t,e,r,n)=>{let a=ee.size(e),i=e.length,s=J("input",t,i),o=ve("output",t,i),l=r.dataType===6?r.getInt32Array()[0]:Number(r.getBigInt64Array()[0]),d=ee.normalizeAxis(l,i),c=u=>{let h=` i32(${s.indicesGet("inputIndices","uniforms.axis")}) `,f=xe("uniforms.input_shape","uniforms.axis",i),g=n.reverse?h+(n.exclusive?" + 1":""):"0",y=n.reverse?f:h+(n.exclusive?"":" + 1");return`
                ${u.registerUniform("outputSize","u32").registerUniform("axis","u32").declareVariables(s,o)}
                ${u.mainStart()}
                  ${u.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
                  var inputIndices = ${o.offsetToIndices("global_idx")};
                  var sum = ${o.type.value}(0);
                  let first : i32 = ${g};
                  let last : i32 = ${y};
                  for (var i : i32 = first; i < last; i++) {
                    ${s.indicesSet("inputIndices","uniforms.axis","u32(i)")};
                    sum = sum + ${s.getByIndices("inputIndices")};
                  }
                  ${o.setByOffset("global_idx","sum")};
                }`};return{name:"CumSum",shaderCache:{hint:n.cacheKey,inputDependencies:["rank"]},getRunData:()=>({outputs:[{dims:e,dataType:t}],dispatchGroup:{x:Math.ceil(a/64)},programUniforms:[{type:"uint32",data:a},{type:"int32",data:d},...ie(e),...ie(e)]}),getShaderSource:c}},lc=(t,e)=>{let r=t.inputs[0].dims,n=t.inputs[0].dataType,a=t.inputs[1];t.compute(oc(n,r,a,e),{inputs:[0]})},uc=t=>{let e=t.exclusive===1,r=t.reverse===1;return qe({exclusive:e,reverse:r})}}),Ta,hn,ws,dc,cc,pc,hc,vs,fc,mc,gc,y_=Q(()=>{Ae(),it(),Ce(),Ta="[a-zA-Z]|\\.\\.\\.",hn="("+Ta+")+",ws="^"+hn+"$",dc="("+hn+",)*"+hn,cc="^"+dc+"$",pc=class{constructor(t=-1){this.symbolToIndices=new Map,this.inputIndex=t}addSymbol(t,e){let r=this.symbolToIndices.get(t);r===void 0?r=[e]:r.push(e),this.symbolToIndices.set(t,r)}},hc=class{constructor(t,e){this.equation=e,this.hasEllipsis=!1,this.symbolToInfo=new Map,this.lhs=new Array,this.outputDims=[];let[r,n]=e.includes("->")?e.split("->",2):[e,""];if(!r.match(RegExp(cc)))throw new Error("Invalid LHS term");if(r.split(",").forEach((a,i)=>{let s=t[i].dims.slice();if(!a.match(RegExp(ws)))throw new Error("Invalid LHS term");let o=this.processTerm(a,!0,s,i);this.lhs.push(o)}),n==="")n+=[...this.symbolToInfo.entries()].filter(([a,i])=>i.count===1||a==="...").map(([a])=>a).join("");else if(!n.match(RegExp(hn)))throw new Error("Invalid RHS");n.match(RegExp(Ta,"g"))?.forEach(a=>{if(a==="...")this.outputDims=this.outputDims.concat(this.ellipsisDims);else{let i=this.symbolToInfo.get(a);if(i===void 0)throw new Error("Invalid RHS symbol");this.outputDims.push(i.dimValue)}}),this.rhs=this.processTerm(n,!1,this.outputDims)}addSymbol(t,e,r){let n=this.symbolToInfo.get(t);if(n!==void 0){if(n.dimValue!==e&&n.count!==1)throw new Error("Dimension mismatch");n.count++,n.inputIndices.push(r)}else n={count:1,dimValue:e,inputIndices:[r]};this.symbolToInfo.set(t,n)}processTerm(t,e,r,n=-1){let a=r.length,i=!1,s=[],o=0;if(!t.match(RegExp(ws))&&!e&&t!=="")throw new Error("Invalid LHS term");let l=t.match(RegExp(Ta,"g")),d=new pc(n);return l?.forEach((c,u)=>{if(c==="..."){if(i)throw new Error("Only one ellipsis is allowed per input term");i=!0;let h=a-l.length+1;if(h<0)throw new Error("Ellipsis out of bounds");if(s=r.slice(o,o+h),this.hasEllipsis){if(this.ellipsisDims.length!==s.length||this.ellipsisDims.toString()!==s.toString())throw new Error("Ellipsis dimensions mismatch")}else if(e)this.hasEllipsis=!0,this.ellipsisDims=s;else throw new Error("Ellipsis must be specified in the LHS");for(let f=0;f<s.length;f++){let g=String.fromCharCode(48+f);d.addSymbol(g,u+f),this.addSymbol(g,r[o++],n)}}else d.addSymbol(c,u+(this.hasEllipsis?this.ellipsisDims.length-1:0)),this.addSymbol(c,r[o++],n)}),d}},vs=t=>t+"_max",fc=(t,e,r,n,a)=>{let i=e.map((h,f)=>t[f]?h.length:h).map((h,f)=>J(`input${f}`,r,h)),s=ee.size(a),o=st(a.length),l=o?a.length:a,d=ve("output",r,l),c=[...n.symbolToInfo.keys()].filter(h=>!n.rhs.symbolToIndices.has(h)),u=h=>{let f=[],g="var prod = 1.0;",y="var sum = 0.0;",w="sum += prod;",v=[],S=[],E=[],x=[],A=n.symbolToInfo.size===n.rhs.symbolToIndices.size;n.symbolToInfo.forEach((B,U)=>{if(n.rhs.symbolToIndices.has(U)){let H=n.rhs.symbolToIndices.get(U)?.[0];H!==void 0&&n.lhs.forEach((K,O)=>{if(B.inputIndices.includes(O)){let G=K.symbolToIndices.get(U);if(G===void 0)throw new Error("Invalid symbol error");G.forEach(ne=>{f.push(`${i[O].indicesSet(`input${O}Indices`,ne,d.indicesGet("outputIndices",H))}`)})}})}else n.lhs.forEach((H,K)=>{if(B.inputIndices.includes(K)){let O=H.symbolToIndices.get(U);if(O===void 0)throw new Error("Invalid symbol error");O.forEach(G=>{v.push(`${i[K].indicesSet(`input${K}Indices`,G,`${U}`)}`)}),x.push(`prod *= ${i[K].getByIndices(`input${K}Indices`)};`)}}),S.push(`for(var ${U}: u32 = 0; ${U} < uniforms.${vs(U)}; ${U}++) {`),E.push("}")});let T=A?[...f,`let sum = ${i.map((B,U)=>B.getByIndices(`input${U}Indices`)).join(" * ")};`]:[...f,y,...S,...v,g,...x,w,...E];return`
            ${h.registerUniforms(c.map(B=>({name:`${vs(B)}`,type:"u32"}))).registerUniform("outputSize","u32").declareVariables(...i,d)}

            ${h.mainStart()}
            ${h.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
            var outputIndices = ${d.offsetToIndices("global_idx")};
            ${i.map((B,U)=>`var input${U}Indices: ${i[U].type.indices};`).join(`
`)}
            ${T.join(`
`)};
            ${d.setByOffset("global_idx","sum")};
          }`};return{name:"Einsum",shaderCache:{hint:n.equation,inputDependencies:t.map(h=>h?"rank":"dims")},getRunData:()=>{let h=c.filter(g=>n.symbolToInfo.has(g)).map(g=>({type:"uint32",data:n.symbolToInfo.get(g)?.dimValue||0}));h.push({type:"uint32",data:s});let f=e.filter((g,y)=>t[y]).map((g,y)=>[...ie(g)]).reduce((g,y)=>g.concat(y),h);return o&&f.push(...ie(a)),{outputs:[{dims:a,dataType:r}],dispatchGroup:{x:Math.ceil(s/64)},programUniforms:f}},getShaderSource:u}},mc=(t,e)=>{let r=new hc(t.inputs,e.equation),n=t.inputs.map((s,o)=>st(s.dims.length)),a=r.outputDims,i=t.inputs.map((s,o)=>s.dims);t.compute(fc(n,i,t.inputs[0].dataType,r,a))},gc=t=>{let e=t.equation.replace(/\s+/g,"");return qe({equation:e})}}),_c,bs,yc,wc,vc,w_=Q(()=>{Ye(),Ae(),Ce(),_c=t=>{if(!t||t.length!==2)throw new Error("Expand requires 2 input.");let e=t[0].dims,r=Array.from(t[1].getBigInt64Array(),Number),n=r.length<e.length?0:r.length-e.length,a=e.length<r.length?0:e.length-r.length;for(;n<r.length&&a<e.length;++n,++a)if(r[n]!==e[a]&&r[n]!==1&&e[a]!==1)throw new Error("Expand requires shape to be broadcastable to input")},bs=(t,e)=>{let r=t.length-e.length,n=[];for(let a=0;a<r;++a)n.push(t[a]);for(let a=0;a<e.length;++a)n.push(e[a]===1?t[a+r]:e[a]);return n},yc=(t,e)=>t.length>e.length?bs(t,e):bs(e,t),wc=t=>{let e=t[0].dims,r=Array.from(t[1].getBigInt64Array(),Number),n=yc(e,r),a=t[0].dataType,i=a===9?4:1,s=Math.ceil(ee.size(n)/i),o=st(e.length),l=st(n.length),d=u=>{let h=o?e.length:e,f=l?n.length:n,g=J("input",a,h,i),y=ve("output",a,f,i),w;if(a===9){let v=(S,E,x="")=>`
          let outputIndices${E} = ${y.offsetToIndices(`outputOffset + ${E}u`)};
          let offset${E} = ${g.broadcastedIndicesToOffset(`outputIndices${E}`,y)};
          let index${E} = offset${E} / 4u;
          let component${E} = offset${E} % 4u;
          ${S}[${E}] = ${x}(${g.getByOffset(`index${E}`)}[component${E}]);
        `;w=`
        let outputOffset = global_idx * ${i};
        var data = vec4<u32>(0);
        ${v("data",0,"u32")}
        ${v("data",1,"u32")}
        ${v("data",2,"u32")}
        ${v("data",3,"u32")}
        ${y.setByOffset("global_idx","data")}
      }`}else w=`
        let outputIndices = ${y.offsetToIndices("global_idx")};
        let inputOffset = ${g.broadcastedIndicesToOffset("outputIndices",y)};
        ${y.setByOffset("global_idx",g.getByOffset("inputOffset"))}
      }`;return`
    ${u.registerUniform("vec_size","u32").declareVariables(g,y)}
    ${u.mainStart()}
    ${u.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}
    ${w}`},c=[{type:"uint32",data:s}];return o&&c.push(...ie(e)),l&&c.push(...ie(n)),{name:"Expand",shaderCache:{hint:`${n.length}`,inputDependencies:[o?"rank":"dims"]},getShaderSource:d,getRunData:()=>({outputs:[{dims:n,dataType:t[0].dataType}],dispatchGroup:{x:Math.ceil(s/64)},programUniforms:c})}},vc=t=>{_c(t.inputs),t.compute(wc(t.inputs),{inputs:[0]})}}),bc,$c,xc,Sc,v_=Q(()=>{Ye(),Ae(),it(),Ce(),bc=t=>{if(!t||t.length!==2)throw new Error("Gather requires 2 inputs.")},$c=(t,e)=>{let r=t[0].dims,n=t[1].dims,a=r.length,i=ee.normalizeAxis(e.axis,a),s=r.slice(0);s.splice(i,1,...n);let o=r[i],l=t[0].dataType===9?4:1,d=Math.ceil(ee.size(s)/l),c=st(t[0].dims.length),u=c?t[0].dims.length:t[0].dims,h=st(t[1].dims.length),f=h?t[1].dims.length:t[1].dims,g=st(s.length),y=g?s.length:s,w=[{type:"uint32",data:d},{type:"int32",data:o},{type:"uint32",data:i}];c&&w.push(...ie(t[0].dims)),h&&w.push(...ie(t[1].dims)),g&&w.push(...ie(s));let v=[];v.push(c?"rank":"dims"),v.push(h?"rank":"dims");let S=E=>{let x=J("data",t[0].dataType,u,l),A=J("inputIndices",t[1].dataType,f),T=ve("output",t[0].dataType,y,l),B=H=>{let K=n.length,O=`var indicesIndices${H}  = ${A.type.indices}(0);`;for(let G=0;G<K;G++)O+=`${K>1?`indicesIndices${H}[${G}]`:`indicesIndices${H}`} = ${s.length>1?`outputIndices${H}[uniforms.axis + ${G}]`:`outputIndices${H}`};`;O+=`
          var idx${H} = ${A.getByIndices(`indicesIndices${H}`)};
          if (idx${H} < 0) {
            idx${H} = idx${H} + uniforms.axisDimLimit;
          }
          var dataIndices${H} = ${x.type.indices}(0);
        `;for(let G=0,ne=0;G<a;G++)G===i?(O+=`${a>1?`dataIndices${H}[${G}]`:`dataIndices${H}`} = u32(idx${H});`,ne+=K):(O+=`${a>1?`dataIndices${H}[${G}]`:`dataIndices${H}`} = ${s.length>1?`outputIndices${H}[${ne}]`:`outputIndices${H}`};`,ne++);return O},U;if(t[0].dataType===9){let H=(K,O,G="")=>`
          let outputIndices${O} = ${T.offsetToIndices(`outputOffset + ${O}u`)};
          ${B(O)};
          let offset${O} = ${x.indicesToOffset(`dataIndices${O}`)};
          let index${O} = offset${O} / 4u;
          let component${O} = offset${O} % 4u;
          ${K}[${O}] = ${G}(${x.getByOffset(`index${O}`)}[component${O}]);
        `;U=`
        let outputOffset = global_idx * ${l};
        var value = vec4<u32>(0);
        ${H("value",0,"u32")}
        ${H("value",1,"u32")}
        ${H("value",2,"u32")}
        ${H("value",3,"u32")}
        ${T.setByOffset("global_idx","value")}
      `}else U=`
      let outputIndices = ${T.offsetToIndices("global_idx")};
      ${B("")};
      let value = ${x.getByIndices("dataIndices")};
      ${T.setByOffset("global_idx","value")};
      `;return`
      ${E.registerUniform("outputSize","u32").registerUniform("axisDimLimit","i32").registerUniform("axis","u32").declareVariables(x,A,T)}
      ${E.mainStart()}
        ${E.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
        ${U}
      }`};return{name:"Gather",shaderCache:{hint:e.cacheKey,inputDependencies:v},getRunData:()=>({outputs:[{dims:s,dataType:t[0].dataType}],dispatchGroup:{x:Math.ceil(d/64)},programUniforms:w}),getShaderSource:S}},xc=t=>qe({axis:t.axis}),Sc=(t,e)=>{let r=t.inputs;bc(r),t.compute($c(t.inputs,e))}}),kc,Ec,Cc,Ac,b_=Q(()=>{Ae(),it(),Ce(),kc=t=>{if(!t||t.length!==2)throw new Error("GatherElements requires 2 inputs.");if(t[0].dims.length<1)throw new Error("GatherElements requires that the data input be rank >= 1.");if(t[0].dims.length!==t[1].dims.length)throw new Error(`GatherElements requires that the data input and
                     indices input tensors be of same rank.`)},Ec=(t,e)=>{let r=t[0].dims,n=t[0].dataType,a=r.length,i=t[1].dims,s=t[1].dataType,o=ee.normalizeAxis(e.axis,a),l=r[o],d=i.slice(0),c=ee.size(d),u=J("input",n,a),h=J("indicesInput",s,i.length),f=ve("output",n,d.length),g=[{type:"uint32",data:c},{type:"int32",data:l},{type:"uint32",data:o}];return g.push(...ie(r)),g.push(...ie(i)),g.push(...ie(d)),{name:"GatherElements",shaderCache:{inputDependencies:["rank","rank"]},getRunData:()=>({outputs:[{dims:d,dataType:t[0].dataType}],dispatchGroup:{x:Math.ceil(c/64)},programUniforms:g}),getShaderSource:y=>`
      ${y.registerUniform("outputSize","u32").registerUniform("axisDimLimit","i32").registerUniform("axis","u32").declareVariables(u,h,f)}
      ${y.mainStart()}
      ${y.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}

      let outputIndices = ${f.offsetToIndices("global_idx")};

      var idx = ${h.getByOffset("global_idx")};
      if (idx < 0) {
        idx = idx + uniforms.axisDimLimit;
      }
      var inputIndices = ${u.type.indices}(outputIndices);
      ${u.indicesSet("inputIndices","uniforms.axis","u32(idx)")};
      let value = ${u.getByIndices("inputIndices")};

      ${f.setByOffset("global_idx","value")};
  }`}},Cc=t=>qe({axis:t.axis}),Ac=(t,e)=>{let r=t.inputs;kc(r),t.compute(Ec(t.inputs,e))}}),Ic,Tc,Oc,Mc,$_=Q(()=>{Ae(),Ce(),Ic=t=>{if(!t)throw new Error("Input is missing");if(t.length<2||t.length>3)throw new Error("Invaid input number.");if(t.length===3&&t[2].dims.length>2)throw new Error("Invalid input shape of C");if(t[0].dataType!==t[1].dataType||t.length===3&&t[0].dataType!==t[2].dataType)throw new Error("Input types are mismatched")},Tc=(t,e)=>{let r=t[0].dims.slice(),n=t[1].dims.slice(),[a,i,s]=$l.getShapeOfGemmResult(r,e.transA,n,e.transB,t.length===3?t[2].dims:void 0),o=[a,i];if(!o)throw new Error("Can't use gemm on the given tensors");let l=ee.size(o),d=[{type:"uint32",data:l},{type:"uint32",data:a},{type:"uint32",data:i},{type:"uint32",data:s},{type:"float32",data:e.alpha},{type:"float32",data:e.beta}],c=["type","type"];t.length===3&&(d.push(...ie(t[2].dims)),c.push("rank")),d.push(...ie(o));let u=h=>{let f="";e.transA&&e.transB?f="value += a[k * uniforms.M + m] * b[n * uniforms.K + k];":e.transA&&!e.transB?f="value += a[k * uniforms.M + m] * b[k * uniforms.N + n];":!e.transA&&e.transB?f="value += a[m * uniforms.K + k] * b[n * uniforms.K + k];":!e.transA&&!e.transB&&(f="value += a[m * uniforms.K + k] * b[k * uniforms.N + n];");let g=e.alpha===1?"":"value *= uniforms.alpha;",y=J("a",t[0].dataType,t[0].dims),w=J("b",t[1].dataType,t[1].dims),v=y.type.value,S=null,E=[y,w];t.length===3&&(S=J("c",t[2].dataType,t[2].dims.length),E.push(S));let x=ve("output",t[0].dataType,o.length);E.push(x);let A=[{name:"output_size",type:"u32"},{name:"M",type:"u32"},{name:"N",type:"u32"},{name:"K",type:"u32"},{name:"alpha",type:"f32"},{name:"beta",type:"f32"}];return`
  ${h.registerUniforms(A).declareVariables(...E)}

  ${h.mainStart()}
    ${h.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}

    let m = global_idx / uniforms.N;
    let n = global_idx % uniforms.N;

    var value = ${v}(0);
    for (var k: u32 = 0u; k < uniforms.K; k++) {
      ${f}
    }

    ${g}
    ${S!=null?`let cOffset = ${S.broadcastedIndicesToOffset("vec2(m, n)",x)}; value += ${v}(uniforms.beta) * ${S.getByOffset("cOffset")};`:""}
    output[global_idx] = value;
  }`};return{name:"Gemm",shaderCache:{hint:`${e.cacheKey}`,inputDependencies:c},getRunData:()=>({outputs:[{dims:o,dataType:t[0].dataType}],dispatchGroup:{x:Math.ceil(l/64)},programUniforms:d}),getShaderSource:u}},Oc=t=>{let e=t.transA,r=t.transB,n=t.alpha,a=t.beta;return{transA:e,transB:r,alpha:n,beta:a,cacheKey:`${t.transA};${t.transB};${t.alpha===1}`}},Mc=(t,e)=>{Ic(t.inputs),t.compute(Tc(t.inputs,e))}}),zc,Bc,Rc,Dc,x_=Q(()=>{Ye(),Ae(),Ce(),zc=(t,e)=>{let r=t[0].dims,n=r,a=2,i=ee.sizeToDimension(r,a),s=ee.sizeFromDimension(r,a),o=wt(s),l=s/o,d=[r[0],r[1],l],c=["rank","type","type"],u=[{type:"uint32",data:s},{type:"uint32",data:l}];u.push(...ie(d),...ie(d));let h=f=>{let g=J("x",t[0].dataType,d.length,o),y=J("scale",t[1].dataType,t[1].dims),w=J("bias",t[2].dataType,t[2].dims),v=ve("output",t[0].dataType,d.length,o),S=[g,y,w,v],E=g.type.value,x=o===1?"f32":`vec${o}<f32>`,A=64,T=[{name:"normSize",type:"u32"},{name:"normPackedSize",type:"u32"}];return`
  var<workgroup> meanShared : f32;
  var<workgroup> squaredNormShared : f32;
  var<workgroup> workgroupShared : array<${x}, ${A}>;
  const workgroupSize = ${A}u;
  ${f.registerUniforms(T).declareVariables(...S)}
  ${f.mainStart(A)}
    let norm = global_idx / workgroupSize;
    let batch = norm / uniforms.x_shape[1];
    let channel = norm % uniforms.x_shape[1];
    let localIndex = local_id.x;

    // initialize workgroup memory
    var initial = ${x}(0);
    for (var h = localIndex; h < uniforms.normPackedSize; h += workgroupSize) {
      initial = initial + ${x}(${g.get("batch","channel","h")});
    }
    workgroupShared[localIndex] = initial;
    workgroupBarrier();

    // Calculate the mean of current channel data.
    for (var currSize = workgroupSize >> 1;  currSize > 0; currSize = currSize >> 1) {
      if (localIndex < currSize) {
        workgroupShared[localIndex] = workgroupShared[localIndex] + workgroupShared[localIndex + currSize];
      }
      workgroupBarrier();
    }
    if (localIndex == 0) {
      meanShared = ${jt("workgroupShared[0]",o)} / f32(uniforms.normSize);
    }
    workgroupBarrier();

    // reinitialize workgroup memory.
    initial = ${x}(0);
    for (var h = localIndex; h < uniforms.normPackedSize; h += workgroupSize) {
      let deviation =  ${x}(${g.get("batch","channel","h")}) - ${x}(meanShared);
      initial = initial + deviation * deviation;
    }
    workgroupShared[localIndex] = initial;
    workgroupBarrier();

    // Calculate the sum of square of deviation of current channel data.
    for (var currSize = workgroupSize >> 1;  currSize > 0; currSize = currSize >> 1) {
      if (localIndex < currSize) {
        workgroupShared[localIndex] = workgroupShared[localIndex] + workgroupShared[localIndex + currSize];
      }
      workgroupBarrier();
    }
    if (localIndex == 0) {
      squaredNormShared = ${jt("workgroupShared[0]",o)};
    }
    workgroupBarrier();

    let invStdDev = inverseSqrt(squaredNormShared / f32(uniforms.normSize) + f32(${e.epsilon}));
    let channelScale = invStdDev * f32(${y.getByOffset("channel")});
    let channelShift = f32(${w.getByOffset("channel")}) - meanShared * channelScale;
    for (var h = localIndex; h < uniforms.normPackedSize; h += workgroupSize) {
      let value = ${g.get("batch","channel","h")} * ${E}(${x}(channelScale)) + ${E}(${x}(channelShift));
      ${v.set("batch","channel","h","value")};
    }
  }`};return{name:"InstanceNormalization",shaderCache:{hint:`${e.epsilon};${o}`,inputDependencies:c},getRunData:()=>({outputs:[{dims:n,dataType:t[0].dataType}],dispatchGroup:{x:i},programUniforms:u}),getShaderSource:h}},Bc=(t,e,r,n,a,i,s,o)=>{let l=wt(s),d=64,c=l===1?"vec2f":`mat2x${l}f`,u=l===1?"f32":`vec${l}f`,h=(T,B)=>`${c}(${T}, ${B})`,f=a*s/l,g=Math.ceil(i/d),y=["type"],w=[{type:"uint32",data:g},{type:"uint32",data:i},{type:"uint32",data:Math.floor(s/l)},{type:"uint32",data:Math.floor(i*s/l)}],v=T=>{let B=J("input",e.dataType,e.dims,l);return`
  ${T.declareVariables(B)}
  @group(0) @binding(1) var<storage, read_write> output : array<${c}>;
  struct Uniforms {wg_size:u32, H:u32, C:u32, image_size:u32};
  @group(0) @binding(2) var<uniform> uniforms: Uniforms;

  ${T.mainStart(d)}
    let currentImageNumber = global_idx / ${d} / uniforms.C;
    let currentChannelNumber = (global_idx / ${d}) % uniforms.C;
    let wgId = global_idx % ${d};
    let wgOffset = wgId * uniforms.wg_size;
    if (wgOffset >= uniforms.H) {
        return;
    }
    let wgMax = min(wgOffset + uniforms.wg_size, uniforms.H);

    let offset = currentImageNumber * uniforms.image_size + currentChannelNumber;
    var sum = ${vt("f32",l)};
    var squaredSum = ${vt("f32",l)};
    for (var i: u32 = wgOffset; i < wgMax; i++) {
        let value = ${u}(input[offset + i * uniforms.C]);
        sum += value;
        squaredSum += value * value;
    }
    output[global_idx] = ${h("sum","squaredSum")};
  }`},S=t.compute({name:"InstanceNormComputeMean",shaderCache:{hint:`${l}`,inputDependencies:y},getRunData:()=>({outputs:[{dims:[a,s,d,2],dataType:1}],dispatchGroup:{x:a*s/l},programUniforms:w}),getShaderSource:v},{inputs:[e],outputs:[-1]})[0],E=[{type:"uint32",data:f},{type:"uint32",data:i},{type:"uint32",data:Math.floor(s/l)},{type:"uint32",data:Math.floor(d*s/l)}],x=["type","type","type"],A=T=>{let B=J("scale",r.dataType,r.dims,l),U=J("bias",n.dataType,n.dims,l);return`
  @group(0) @binding(0) var<storage, read> input : array<${c}>;
  @group(0) @binding(1) var<storage, read> scale : array<${B.type.storage}>;
  @group(0) @binding(2) var<storage, read> bias : array<${U.type.storage}>;
  @group(0) @binding(3) var<storage, read_write> output : array<${c}>;
  struct Uniforms {units_of_work : u32, H: u32, C : u32, image_size : u32};
  @group(0) @binding(4) var<uniform> uniforms: Uniforms;

  ${T.mainStart()}
    ${T.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.units_of_work")}
    let currentImageNumber = global_idx / uniforms.C;
    let currentChannelNumber = global_idx % uniforms.C;

    let offset = currentImageNumber * uniforms.image_size;
    var sum = ${vt("f32",l)};
    var squaredSum = ${vt("f32",l)};
    for (var i: u32 = 0; i < ${d}; i++) {
        let value = input[offset + i + currentChannelNumber * ${d}];
        sum += value[0];
        squaredSum += value[1];
    }
    sum = sum / f32(uniforms.H);
    squaredSum = squaredSum / f32(uniforms.H);
    let invStdDev = inverseSqrt(squaredSum - sum * sum + f32(${o}));
    let channelScale = invStdDev * ${u}(scale[currentChannelNumber]);
    let channelShift = ${u}(bias[currentChannelNumber]) - sum * channelScale;

    output[global_idx] = ${h("channelScale","channelShift")};
  }`};return t.compute({name:"InstanceNormComputeChannelScaleShift",shaderCache:{hint:`${l};${o}`,inputDependencies:x},getRunData:()=>({outputs:[{dims:[a,s,2],dataType:1}],dispatchGroup:{x:Math.ceil(f/64)},programUniforms:E}),getShaderSource:A},{inputs:[S,r,n],outputs:[-1]})[0]},Rc=(t,e,r)=>{let n=e[0].dims,a=n,i=n[0],s=n[n.length-1],o=ee.sizeFromDimension(n,1)/s,l=wt(s),d=ee.size(a)/l,c=[{type:"uint32",data:o},{type:"uint32",data:Math.floor(s/l)}],u=["type","type"],h=Bc(t,e[0],e[1],e[2],i,o,s,r.epsilon),f=g=>{let y=Ct(e[0].dataType),w=l===1?"vec2f":`mat2x${l}f`,v=l===1?y:`vec${l}<${y}>`,S=J("input",e[0].dataType,e[0].dims,l),E=ve("output",e[0].dataType,a,l);return`
  @group(0) @binding(0) var<storage, read> input : array<${S.type.storage}>;
  @group(0) @binding(1) var<storage, read> scaleInput : array<${w}>;
  @group(0) @binding(2) var<storage, read_write> output : array<${E.type.storage}>;
  struct Uniforms {H: u32, C : u32};
  @group(0) @binding(3) var<uniform> uniforms: Uniforms;

  ${g.mainStart()}
    let currentImageNumber = global_idx / (uniforms.C * uniforms.H);
    let currentChannelNumber = global_idx % uniforms.C;

    let scaleOffset = currentImageNumber * uniforms.C + currentChannelNumber;
    let scale = scaleInput[scaleOffset];
    output[global_idx] = fma(input[global_idx], ${v}(scale[0]), ${v}(scale[1]));
  }`};t.compute({name:"InstanceNormalizationNHWC",shaderCache:{hint:`${l}`,inputDependencies:u},getRunData:()=>({outputs:[{dims:a,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(d/64)},programUniforms:c}),getShaderSource:f},{inputs:[e[0],h]})},Dc=(t,e)=>{e.format==="NHWC"?Rc(t,t.inputs,e):t.compute(zc(t.inputs,e))}}),Pc,Nc,Uc,S_=Q(()=>{Ye(),Ae(),Ce(),Pc=t=>{if(!t||t.length<2)throw new Error("layerNorm requires at least 2 inputs.")},Nc=(t,e,r)=>{let n=t[0].dims,a=t[1],i=t[2],s=n,o=ee.normalizeAxis(e.axis,n.length),l=ee.sizeToDimension(n,o),d=ee.sizeFromDimension(n,o),c=ee.size(a.dims),u=i?ee.size(i.dims):0;if(c!==d||i&&u!==d)throw new Error(`Size of X.shape()[axis:] == ${d}.
       Size of scale and bias (if provided) must match this.
       Got scale size of ${c} and bias size of ${u}`);let h=[];for(let x=0;x<n.length;++x)x<o?h.push(n[x]):h.push(1);let f=wt(d),g=["type","type"],y=[{type:"uint32",data:l},{type:"float32",data:d},{type:"uint32",data:Math.floor(d/f)},{type:"float32",data:e.epsilon}];i&&g.push("type");let w=r>1,v=r>2,S=x=>{let A=Ct(t[0].dataType),T=[J("x",t[0].dataType,t[0].dims,f),J("scale",a.dataType,a.dims,f)];i&&T.push(J("bias",i.dataType,i.dims,f)),T.push(ve("output",t[0].dataType,s,f)),w&&T.push(ve("mean_data_output",1,h)),v&&T.push(ve("inv_std_output",1,h));let B=[{name:"norm_count",type:"u32"},{name:"norm_size",type:"f32"},{name:"norm_size_vectorized",type:"u32"},{name:"epsilon",type:"f32"}];return`
  ${x.registerUniforms(B).declareVariables(...T)}
  ${x.mainStart()}
    ${x.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.norm_count")}
    let offset = global_idx * uniforms.norm_size_vectorized;
    var meanVector = ${vt("f32",f)};
    var meanSquareVector = ${vt("f32",f)};

    for (var h: u32 = 0u; h < uniforms.norm_size_vectorized; h++) {
      let value = ${nr(A,f,"x[h + offset]")};
      meanVector += value;
      meanSquareVector += value * value;
    }
    let mean = ${jt("meanVector",f)} / uniforms.norm_size;
    let invStdDev =
        inverseSqrt(${jt("meanSquareVector",f)} / uniforms.norm_size - mean * mean + uniforms.epsilon);

    for (var j: u32 = 0; j < uniforms.norm_size_vectorized; j++) {
      let f32input = ${nr(A,f,"x[j + offset]")};
      let f32scale = ${nr(A,f,"scale[j]")};
      output[j + offset] = ${T[0].type.value}((f32input - mean) * invStdDev * f32scale
        ${i?`+ ${nr(A,f,"bias[j]")}`:""}
      );
    }

    ${w?"mean_data_output[global_idx] = mean":""};
    ${v?"inv_std_output[global_idx] = invStdDev":""};
  }`},E=[{dims:s,dataType:t[0].dataType}];return w&&E.push({dims:h,dataType:1}),v&&E.push({dims:h,dataType:1}),{name:"LayerNormalization",shaderCache:{hint:`${f};${r}`,inputDependencies:g},getRunData:()=>({outputs:E,dispatchGroup:{x:Math.ceil(l/64)},programUniforms:y}),getShaderSource:S}},Uc=(t,e)=>{Pc(t.inputs),t.compute(Nc(t.inputs,e,t.outputCount))}}),Wc,Lc,$s,Fc,Oa,Vc,k_=Q(()=>{Ae(),it(),ji(),Eu(),Ce(),pn(),Wc=(t,e)=>{let r=t[0],n=t[1],a=t[2],i=t[3],s=t[4],o=t[5],l=t[6],d=t[7];if(r.dims.length!==3&&r.dims.length!==5)throw new Error("Input query is expected to have 3 or 5 dimensions");let c=!1,u=r.dims[0],h=r.dims[1],f=r.dims.length===3?c?r.dims[2]/3:r.dims[2]:e.numHeads*r.dims[4],g=h,y=0,w=0,v=Math.floor(f/e.numHeads);if(l&&d){if(l.dims.length!==4)throw new Error('Input "past_key" is expected to have 4 dimensions');if(d.dims.length!==4)throw new Error('Input "past_value" is expected to have 4 dimensions');y=l.dims[2],w=l.dims[2]}else if(l||d)throw new Error('Input "past_key" and "past_value" shall be both present or both absent');let S;if(n){if(r.dims.length!==3)throw new Error('Input "query" is expected to have 3 dimensions when key is given');if(n.dims.length<3||n.dims.length>5)throw new Error('Input "key" is expected to have 3, 4, or 5 dimensions');if(r.dims[0]!==n.dims[0])throw new Error('Input "query" and "key" shall have same dim 0 (batch size)');if(n.dims.length===3){if(n.dims[2]!==r.dims[2])throw new Error('Input "query" and "key" shall have same dim 2 (hidden_size)');S=2,g=n.dims[1]}else if(n.dims.length===5){if(n.dims[2]!==e.numHeads||n.dims[3]!==2||n.dims[4]!==v)throw new Error('Expect "key" shape (batch_size, kv_sequence_length, num_heads, 2, head_size) for packed kv');if(a)throw new Error('Expect "value" be none when "key" has packed kv format.');S=5,g=n.dims[1]}else{if(n.dims[1]!==e.numHeads||n.dims[3]!==v)throw new Error('Expect "key" shape (batch_size, num_heads, kv_sequence_length, head_size) for past_key');S=0,g=n.dims[2]}}else{if(r.dims.length!==3&&r.dims.length!==5)throw new Error('Input "query" is expected to have 3 or 5 dimensions when key is empty');if(r.dims.length===5&&(r.dims[2]!==e.numHeads||r.dims[3]!==3))throw new Error('Expect "query" shape (batch_size, kv_sequence_length, num_heads, 3, head_size) for packed kv');S=3}if(i){if(i.dims.length!==1)throw new Error('Input "bias" is expected to have 1 dimension');if(a&&r.dims.length===5&&r.dims[3]===2)throw new Error("bias is not allowed for packed kv.")}let E=0;if(s){E=8;let U=s.dims;throw U.length===1?U[0]===u?E=1:U[0]===3*u+2&&(E=3):U.length===2&&U[0]===u&&U[1]===g&&(E=5),E===8?new Error('Input "key_padding_mask" shape shall be (batch_size) or (batch_size, kv_sequence_length)'):new Error("Mask not supported")}let x=!1,A=f;if(a){if(a.dims.length!==3&&a.dims.length!==4)throw new Error('Input "value" is expected to have 3 or 4 dimensions');if(r.dims[0]!==a.dims[0])throw new Error('Input "query" and "value" shall have same dim 0 (batch_size)');if(a.dims.length===3){if(g!==a.dims[1])throw new Error('Input "key" and "value" shall have the same dim 1 (kv_sequence_length)');A=a.dims[2]}else{if(g!==a.dims[2])throw new Error('Input "past_key" and "past_value" shall have the same dim 2 (kv_sequence_length)');A=a.dims[1]*a.dims[3],x=!0}}let T=y+g,B=!1;if(s)throw new Error("Key padding mask is not supported");if(o)throw new Error("extraAddQk is not supported");if(l)throw new Error("pastKey is not supported");if(d)throw new Error("pastValue is not supported");return{batchSize:u,sequenceLength:h,pastSequenceLength:y,kvSequenceLength:g,totalSequenceLength:T,maxSequenceLength:w,inputHiddenSize:0,hiddenSize:f,vHiddenSize:A,headSize:v,vHeadSize:Math.floor(A/e.numHeads),numHeads:e.numHeads,isUnidirectional:!1,pastPresentShareBuffer:!1,maskFilterValue:e.maskFilterValue,maskType:E,scale:e.scale,broadcastResPosBias:B,passPastInKv:x,qkvFormat:S}},Lc=t=>qe({...t}),$s=qe({perm:[0,2,1,3]}),Fc=(t,e,r,n,a,i,s)=>{let o=[n,a,i],l=ee.size(o),d=[{type:"uint32",data:l},{type:"uint32",data:s},{type:"uint32",data:i}],c=u=>{let h=ve("qkv_with_bias",e.dataType,o),f=J("qkv",e.dataType,o),g=J("bias",r.dataType,o),y=[{name:"output_size",type:"u32"},{name:"bias_offset",type:"u32"},{name:"hidden_size",type:"u32"}];return`
  ${u.registerUniforms(y).declareVariables(f,g,h)}
  ${u.mainStart()}
    ${u.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
    let bias_offset_idx = (global_idx % uniforms.hidden_size) + uniforms.bias_offset;

    qkv_with_bias[global_idx] = qkv[global_idx] + bias[bias_offset_idx];
  }`};return t.compute({name:"MultiHeadAttentionAddBias",shaderCache:{inputDependencies:["type","type"]},getRunData:()=>({outputs:[{dims:o,dataType:e.dataType,gpuDataType:0}],dispatchGroup:{x:Math.ceil(l/64)},programUniforms:d}),getShaderSource:c},{inputs:[e,r],outputs:[-1]})[0]},Oa=(t,e,r,n,a,i,s,o)=>{let l=i;if(s){if(n===1)throw new Error("AddBiasReshape is not implemented. Please export your model with packed QKV or KV");return l=Fc(t,i,s,e,n,r*a,o),l=l.reshape([e,n,r,a]),t.compute(ur(l,$s.perm),{inputs:[l],outputs:[-1]})[0]}else return i.dims.length===3&&(l=i.reshape([e,n,r,a])),t.compute(ur(l,$s.perm),{inputs:[l],outputs:[-1]})[0]},Vc=(t,e)=>{let r=Wc(t.inputs,e);if(t.inputs[0].dims.length===5)throw new Error("Packed QKV is not implemented");if(t.inputs[1]?.dims.length===5)throw new Error("Packed KV is not implemented");let n=t.inputs[1]&&t.inputs[2]&&t.inputs[1].dims.length===4&&t.inputs[2].dims.length===4,a=Oa(t,r.batchSize,r.numHeads,r.sequenceLength,r.headSize,t.inputs[0],t.inputs[3],0);if(n)return Sa(t,a,t.inputs[1],t.inputs[2],t.inputs[4],void 0,void 0,void 0,t.inputs[5],r,e);let i=Oa(t,r.batchSize,r.numHeads,r.kvSequenceLength,r.headSize,t.inputs[1],t.inputs[3],r.hiddenSize),s=Oa(t,r.batchSize,r.numHeads,r.kvSequenceLength,r.vHeadSize,t.inputs[2],t.inputs[3],2*r.hiddenSize);Sa(t,a,i,s,t.inputs[4],void 0,t.inputs[6],t.inputs[7],t.inputs[5],r,e)}}),Hc,Gc,qc,jc,Kc,Yc,Xc,Qc,Zc,E_=Q(()=>{Ye(),Ae(),Ce(),Hc=t=>{if(!t||t.length<1)throw new Error("Too few inputs");if(t[0].dataType!==1)throw new Error("Input type must be float.");if(t.length>=2){let e=t[0].dims.length*2===t[1].dims[0];if(t.length===4&&(e=t[3].dims[0]*2===t[1].dims[0]),!e)throw new Error("The pads should be a 1D tensor of shape [2 * input_rank] or [2 * num_axes].")}},Gc=(t,e,r)=>{let n="";for(let a=e-1;a>=0;--a)n+=`
            k = i32(${t.indicesGet("indices",a)}) - ${xe("uniforms.pads",a,r)};
            if (k < 0) {
              break;
            }
            if (k >= i32(${xe("uniforms.x_shape",a,e)})) {
              break;
            }
            offset += k * i32(${xe("uniforms.x_strides",a,e)});
        `;return`
          value = ${t.type.value}(uniforms.constant_value);
          for (var i = 0; i < 1; i++) {
            var offset = 0;
            var k = 0;
            ${n}
            value = x[offset];
          }
      `},qc=(t,e,r)=>{let n="";for(let a=e-1;a>=0;--a)n+=`
                k = i32(${t.indicesGet("indices",a)}) - ${xe("uniforms.pads",a,r)};
                if (k < 0) {
                  k = -k;
                }
                {
                  let _2n_1 = 2 * (i32(${xe("uniforms.x_shape",a,e)}) - 1);
                  k = k % _2n_1;
                  if(k >= i32(${xe("uniforms.x_shape",a,e)})) {
                    k = _2n_1 - k;
                  }
                }
                offset += k * i32(${xe("uniforms.x_strides",a,e)});
            `;return`
              var offset = 0;
              var k = 0;
              ${n}
              value = x[offset];
          `},jc=(t,e,r)=>{let n="";for(let a=e-1;a>=0;--a)n+=`
                k = i32(${t.indicesGet("indices",a)}) - ${xe("uniforms.pads",a,r)};
                if (k < 0) {
                  k = 0;
                }
                if (k >= i32(${xe("uniforms.x_shape",a,e)})) {
                  k = i32(${xe("uniforms.x_shape",a,e)}) - 1;
                }
                offset += k * i32(${xe("uniforms.x_strides",a,e)});
            `;return`
              var offset = 0;
              var k = 0;
              ${n}
              value = x[offset];
          `},Kc=(t,e,r)=>{let n="";for(let a=e-1;a>=0;--a)n+=`
                k = i32(${t.indicesGet("indices",a)}) - ${xe("uniforms.pads",a,r)};
                if (k < 0)  {
                  k += i32(${xe("uniforms.x_shape",a,e)}]);
                }
                if (k >= i32(${xe("uniforms.x_shape",a,e)})) {
                  k -= i32(${xe("uniforms.x_shape",a,e)});
                }
                offset += k * i32(${xe("uniforms.x_strides",a,e)});
            `;return`
              var offset = 0;
              var k = 0;
              ${n}
              value = x[offset];
          `},Yc=(t,e,r)=>{switch(r.mode){case 0:return Gc(t,e,r.pads.length);case 1:return qc(t,e,r.pads.length);case 2:return jc(t,e,r.pads.length);case 3:return Kc(t,e,r.pads.length);default:throw new Error("Invalid mode")}},Xc=(t,e)=>{let r=ee.padShape(t[0].dims.slice(),e.pads),n=t[0].dims,a=[{type:"uint32",data:ee.size(r)},{type:"uint32",data:e.pads}];if(e.mode===0){let o=qt(t[0].dataType);a.push({type:o,data:e.value})}a.push(...ie(t[0].dims),...ie(r));let i=["rank"],s=o=>{let l=ve("output",t[0].dataType,r.length),d=J("x",t[0].dataType,n.length),c=d.type.value,u=Yc(l,n.length,e),h=[{name:"output_size",type:"u32"},{name:"pads",type:"i32",length:e.pads.length}];return e.mode===0&&h.push({name:"constant_value",type:c}),`
            ${o.registerUniforms(h).declareVariables(d,l)}
            ${o.mainStart()}
            ${o.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}

            let indices = ${l.offsetToIndices("global_idx")};

            var value = ${c}(0);
            ${u}
            output[global_idx] = value;
        }`};return{name:"Pad",shaderCache:{hint:`${e.mode}`,inputDependencies:i},getRunData:()=>({outputs:[{dims:r,dataType:t[0].dataType}],dispatchGroup:{x:Math.ceil(ee.size(r)/64)},programUniforms:a}),getShaderSource:s}},Qc=(t,e)=>{if(t.length>1){let r=t[1].getBigInt64Array(),n=t.length>=3&&t[2].data?t[2].getFloat32Array()[0]:0,a=t[0].dims.length,i=new Int32Array(2*a).fill(0);if(t.length>=4){let o=t[3].getBigInt64Array();for(let l=0;l<o.length;l++)i[Number(o[l])]=Number(r[l]),i[Number(o[l])+a]=Number(r[l+o.length])}else r.forEach((o,l)=>i[Number(l)]=Number(o));let s=[];return i.forEach(o=>s.push(o)),{mode:e.mode,value:n,pads:s}}else return e},Zc=(t,e)=>{Hc(t.inputs);let r=Qc(t.inputs,e);t.compute(Xc(t.inputs,r),{inputs:[0]})}}),fn,xs,Ss,ks,Es,Jc,ep,Cs,As,tp,rp,Is,np,ap,Ts,ip,sp,op,lp,C_=Q(()=>{Dt(),Ae(),Ce(),fn=t=>{if(Pe.webgpu.validateInputContent&&(!t||t.length!==1))throw new Error("Pool ops requires 1 input.")},xs=(t,e,r)=>{let n=e.format==="NHWC",a=t.dims.slice();n&&a.splice(1,0,a.pop());let i=Object.hasOwnProperty.call(e,"dilations"),s=e.kernelShape.slice(),o=e.strides.slice(),l=i?e.dilations.slice():[],d=e.pads.slice();va.adjustPoolAttributes(r,a,s,o,l,d);let c=va.computePoolOutputShape(r,a,o,l,s,d,e.autoPad),u=Object.assign({},e);i?Object.assign(u,{kernelShape:s,strides:o,pads:d,dilations:l,cacheKey:e.cacheKey}):Object.assign(u,{kernelShape:s,strides:o,pads:d,cacheKey:e.cacheKey});let h=c.slice();return h.push(h.splice(1,1)[0]),[u,n?h:c]},Ss=(t,e)=>{let r=e.format==="NHWC",n=ee.size(t),a=ee.size(e.kernelShape),i=[{type:"uint32",data:n},{type:"uint32",data:a}],s=[{name:"outputSize",type:"u32"},{name:"kernelSize",type:"u32"}];if(e.kernelShape.length<=2){let o=e.kernelShape[e.kernelShape.length-1],l=e.strides[e.strides.length-1],d=e.pads[e.pads.length/2-1],c=e.pads[e.pads.length-1],u=!!(d+c);i.push({type:"uint32",data:o},{type:"uint32",data:l},{type:"uint32",data:d},{type:"uint32",data:c}),s.push({name:"kw",type:"u32"},{name:"sw",type:"u32"},{name:"pwStart",type:"u32"},{name:"pwEnd",type:"u32"});let h=!1;if(e.kernelShape.length===2){let f=e.kernelShape[e.kernelShape.length-2],g=e.strides[e.strides.length-2],y=e.pads[e.pads.length/2-2],w=e.pads[e.pads.length-2];h=!!(y+w),i.push({type:"uint32",data:f},{type:"uint32",data:g},{type:"uint32",data:y},{type:"uint32",data:w}),s.push({name:"kh",type:"u32"},{name:"sh",type:"u32"},{name:"phStart",type:"u32"},{name:"phEnd",type:"u32"})}return[i,s,!0,u,h]}else{if(r)throw new Error("Pooling with kernelShape.length > 2 is not supported for NHWC format.");let o=ee.computeStrides(e.kernelShape);i.push({type:"uint32",data:o},{type:"uint32",data:e.pads},{type:"uint32",data:e.strides}),s.push({name:"kernelStrides",type:"u32",length:o.length},{name:"pads",type:"u32",length:e.pads.length},{name:"strides",type:"u32",length:e.strides.length});let l=e.pads.reduce((d,c)=>d+c);return[i,s,!!l,!1,!1]}},ks=(t,e,r,n,a,i,s,o,l,d,c,u)=>{let h=a.format==="NHWC",f=e.type.value,g=ve("output",e.type.tensor,n);if(a.kernelShape.length<=2){let y="",w="",v="",S=r-(h?2:1);if(c?y=`
                for (var i: u32 = 0u; i < uniforms.kw; i++) {
                  xIndices[${S}] = indices[${S}] * uniforms.sw - uniforms.pwStart + i;
                  if (xIndices[${S}] < 0 || xIndices[${S}]
                      >= uniforms.x_shape[${S}]) {
                    pad++;
                    continue;
                  }
                  let x_val = x[${e.indicesToOffset("xIndices")}];
                  ${i}
                }`:y=`
                for (var i: u32 = 0u; i < uniforms.kw; i++) {
                  xIndices[${S}] = indices[${S}] * uniforms.sw - uniforms.pwStart + i;
                  let x_val = x[${e.indicesToOffset("xIndices")}];
                  ${i}
                }`,a.kernelShape.length===2){let E=r-(h?3:2);u?w=`
                for (var j: u32 = 0u; j < uniforms.kh; j++) {
                  xIndices[${E}] = indices[${E}] * uniforms.sh - uniforms.phStart + j;
                  if (xIndices[${E}] < 0 || xIndices[${E}] >= uniforms.x_shape[${E}]) {
                    pad += i32(uniforms.kw);
                    continue;
                  }
              `:w=`
                for (var j: u32 = 0u; j < uniforms.kh; j++) {
                  xIndices[${E}] = indices[${E}] * uniforms.sh - uniforms.phStart + j;
                `,v=`
              }
            `}return`
            ${t.registerUniforms(l).declareVariables(e,g)}

            ${t.mainStart()}
              ${t.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}

              let indices = ${g.offsetToIndices("global_idx")};
              var xIndices = ${g.offsetToIndices("global_idx")};

              var value = ${f}(${o});
              var pad = 0;
              ${w}
              ${y}
              ${v}
              ${s}

              output[global_idx] = value;
            }`}else{if(h)throw new Error("Pooling with kernelShape.length > 2 is not supported for NHWC format.");let y=a.kernelShape.length,w=a.pads.length,v="";return d?v=`
                if (xIndices[j] >= uniforms.x_shape[j]) {
                  pad++;
                  isPad = true;
                  break;
                }
              }
              if (!isPad) {
                let x_val = x[${e.indicesToOffset("xIndices")}];
                ${i}
              }`:v=`
              }
              let x_val = x[${e.indicesToOffset("xIndices")}];
              ${i}
            `,`
            ${t.registerUniforms(l).declareVariables(e,g)}

            ${t.mainStart()}
              ${t.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
              let indices = ${g.offsetToIndices("global_idx")};
              var xIndices = ${g.offsetToIndices("global_idx")};

              var offsets: array<u32, ${y}>;

              var value = ${f}(${o});
              var pad = 0;
              var isPad = false;

              for (var i: u32 = 0u; i < uniforms.kernelSize; i++) {
                var offset = i;
                for (var j = 0u; j < ${y-1}u; j++) {
                  offsets[j] = offset / ${xe("uniforms.kernelStrides","j",y)};
                  offset -= offsets[j] * ${xe("uniforms.kernelStrides","j",y)};
                }
                offsets[${y-1}] = offset;

                isPad = false;
                for (var j = ${r-y}u; j < ${r}u; j++) {
                  xIndices[j] = indices[j] * ${xe("uniforms.strides",`j - ${r-y}u`,y)}
                    + offsets[j - ${r-y}u] - ${xe("uniforms.pads","j - 2u",w)};
                  ${v}
              }
              ${s}

              output[global_idx] = value;
            }`}},Es=t=>`${t.format};${t.ceilMode};${t.autoPad};${t.kernelShape.length}`,Jc=t=>`${Es(t)};${t.countIncludePad}`,ep=t=>`${Es(t)};${t.storageOrder};${t.dilations}`,Cs=t=>({format:t.format,autoPad:["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][t.auto_pad],ceilMode:t.ceil_mode,kernelShape:t.kernel_shape,strides:t.strides,pads:t.pads}),As=(t,e,r,n)=>{let[a,i]=xs(e,n,r),s=J("x",e.dataType,e.dims.length),o=s.type.value,l="value += x_val;",d="";a.countIncludePad?d+=`value /= ${o}(uniforms.kernelSize);`:d+=`value /= ${o}(i32(uniforms.kernelSize) - pad);`;let[c,u,h,f,g]=Ss(i,a);c.push(...ie(e.dims),...ie(i));let y=["rank"];return{name:t,shaderCache:{hint:`${n.cacheKey};${h};${f};${g}`,inputDependencies:y},getRunData:()=>({outputs:[{dims:i,dataType:e.dataType}],dispatchGroup:{x:Math.ceil(ee.size(i)/64)},programUniforms:c}),getShaderSource:w=>ks(w,s,e.dims.length,i.length,a,l,d,0,u,h,f,g)}},tp=t=>{let e=t.count_include_pad!==0,r=Cs(t);if(r.ceilMode!==0)throw new Error("using ceil() in shape computation is not yet supported for AveragePool");let n={countIncludePad:e,...r,cacheKey:""};return{...n,cacheKey:Jc(n)}},rp=(t,e)=>{fn(t.inputs),t.compute(As("AveragePool",t.inputs[0],!1,e))},Is={autoPad:"",ceilMode:0,countIncludePad:!1,kernelShape:[],strides:[],pads:[],storageOrder:0,dilations:[]},np=t=>{let e=t.format;return{format:e,...Is,cacheKey:e}},ap=(t,e)=>{fn(t.inputs),t.compute(As("GlobalAveragePool",t.inputs[0],!0,e))},Ts=(t,e,r,n)=>{let[a,i]=xs(e,n,r),s=`
      value = max(x_val, value);
    `,o="",l=J("x",e.dataType,e.dims.length),d=["rank"],[c,u,h,f,g]=Ss(i,a);return c.push(...ie(e.dims),...ie(i)),{name:t,shaderCache:{hint:`${n.cacheKey};${h};${f};${g}`,inputDependencies:d},getRunData:()=>({outputs:[{dims:i,dataType:e.dataType}],dispatchGroup:{x:Math.ceil(ee.size(i)/64)},programUniforms:c}),getShaderSource:y=>ks(y,l,e.dims.length,i.length,a,s,o,-1e5,u,h,f,g)}},ip=(t,e)=>{fn(t.inputs),t.compute(Ts("MaxPool",t.inputs[0],!1,e))},sp=t=>{let e=t.storage_order,r=t.dilations,n=Cs(t);if(e!==0)throw new Error("column major storage order is not yet supported for MaxPool");if(n.ceilMode!==0)throw new Error("using ceil() in shape computation is not yet supported for MaxPool");let a={storageOrder:e,dilations:r,...n,cacheKey:""};return{...a,cacheKey:ep(a)}},op=t=>{let e=t.format;return{format:e,...Is,cacheKey:e}},lp=(t,e)=>{fn(t.inputs),t.compute(Ts("GlobalMaxPool",t.inputs[0],!0,e))}}),up,dp,cp,A_=Q(()=>{Dt(),Ye(),Ce(),up=(t,e,r)=>{let n=t===e,a=t<e&&r<0,i=t>e&&r>0;if(n||a||i)throw new Error("Range these inputs' contents are invalid.")},dp=(t,e,r,n)=>{let a=Math.abs(Math.ceil((e-t)/r)),i=[a],s=a,o=qt(n),l=[{type:"uint32",data:s},{type:o,data:t},{type:o,data:r},...ie(i)],d=c=>{let u=ve("output",n,i.length),h=u.type.value,f=[{name:"outputSize",type:"u32"},{name:"start",type:h},{name:"delta",type:h}];return`
        ${c.registerUniforms(f).declareVariables(u)}
        ${c.mainStart()}
        ${c.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
        output[global_idx] = uniforms.start + ${h}(global_idx) * uniforms.delta;
      }`};return{name:"Range",shaderCache:{hint:`${n}`},getShaderSource:d,getRunData:()=>({outputs:[{dims:i,dataType:n}],dispatchGroup:{x:Math.ceil(s/64)},programUniforms:l})}},cp=t=>{let e=0,r=0,n=0;t.inputs[0].dataType===6?(e=t.inputs[0].getInt32Array()[0],r=t.inputs[1].getInt32Array()[0],n=t.inputs[2].getInt32Array()[0]):t.inputs[0].dataType===1&&(e=t.inputs[0].getFloat32Array()[0],r=t.inputs[1].getFloat32Array()[0],n=t.inputs[2].getFloat32Array()[0]),Pe.webgpu.validateInputContent&&up(e,r,n),t.compute(dp(e,r,n,t.inputs[0].dataType),{inputs:[]})}}),pp,hp,fp,mp,gp,_p,yp,wp,vp,bp,$p,Os,xp,Sp,kp,Ep,Cp,Ap,Ip,I_=Q(()=>{Ae(),it(),Ce(),pp=(t,e)=>{if(t.every(r=>r>0||(()=>{throw new Error("Resize requires scales input values to be positive")})),t.length>0){if(e.mode==="linear"){if(!(t.length===2||t.length===3||t.length===4&&t[0]===1&&t[1]===1||t.length===4&&t[0]===1&&t[3]===1||t.length===5&&t[0]===1&&t[1]===1))throw new Error(`For linear mode, Resize requires scales to be 2D, 3D, 4D with either two outermost or one innermost and
            one outermost scale values equal to 1, or 5D with two outermost scale values equal to 1`)}else if(e.mode==="cubic"&&!(t.length===2||t.length===4&&t[0]===1&&t[1]===1||t.length===4&&t[0]===1&&t[3]===1))throw new Error("Resize requires scales input size to be 2 or 4 for cubic mode")}},hp=(t,e,r)=>{e.every(a=>a>=0&&a<r||(()=>{throw new Error("Resize requires axes input values to be positive and less than rank")}));let n=new Array(r).fill(1);return e.forEach((a,i)=>n[a]=t[i]),n},fp=(t,e,r,n,a,i)=>{let[s,o,l]=r>10?[1,2,3]:[-1,t.length>1?1:-1,-1],d=t[0].dims.length;if(s>0&&t.length>s&&t[s].dims.length>0)t[s].getFloat32Array().forEach(c=>i.push(c));else if(e.coordinateTransformMode==="tf_crop_and_resize")throw new Error("Resize requires RoI input to be specified when coordinateTransformMode is tfCropAndResize");if(o>0&&t.length>o&&t[o].dims.length>0){if(t[o].getFloat32Array().forEach(c=>n.push(c)),n.length!==0&&n.length!==d&&r>=18&&n.length!==e.axes.length)throw new Error("Resize requires scales input size to be same as input rank or axes size for opset 18 and up");pp(n,e),e.axes.length>0&&hp(n,e.axes,d).forEach((c,u)=>n[u]=c)}if(l>0&&t.length>l&&(t[l].getBigInt64Array().forEach(c=>a.push(Number(c))),a.length!==d||r>=18&&a.length===e.axes.length))throw new Error("Resize requires sizes input size to be same as input rank or axes size for opset 18 and up");if(e.axes.length>0){if(n.length!==e.axes.length)throw new Error('Resize requires "scales" input size to be of axes rank when axes attributes is specified');if(a.length!==e.axes.length)throw new Error('Resize requires "sizes" input size to be of rank axes rank when axes attributes is specified')}if(typeof n<"u"&&typeof a<"u"&&n.length>0&&a.length>d)throw new Error("Resize requires only of scales or sizes to be specified")},mp=(t,e)=>`fn getOriginalCoordinateFromResizedCoordinate(xResized: u32, xScale: f32, lengthResized: u32,
     lengthOriginal: u32, roiStart: f32, roiEnd: f32) -> ${e} { `+(()=>{switch(t){case"asymmetric":return`return ${e}(xResized) / ${e}(xScale);`;case"pytorch_half_pixel":return`if (lengthResized > 1) {
                    return (${e}(xResized) + 0.5) / ${e}(xScale) - 0.5;
                  } else {
                    return 0.0;
                  }`;case"tf_half_pixel_for_nn":return`return (${e}(xResized) + 0.5) / ${e}(xScale);`;case"align_corners":return`if (lengthResized == 1) {
                    return 0.0;
                  } else {
                    // The whole part and the fractional part are calculated separately due to inaccuracy of floating
                    // point division. As an example, f32(21) / f32(7) may evaluate to 2.99... instead of 3, causing an
                    // offset-by-one error later in floor().
                    let whole = ${e}(xResized * (lengthOriginal - 1) / (lengthResized - 1));
                    let fract =
                        ${e}(xResized * (lengthOriginal - 1) % (lengthResized - 1)) / ${e}(lengthResized - 1);
                    return whole + fract;
                  }`;case"tf_crop_and_resize":return`if (lengthResized > 1) {
                    return ${e}(roiStart) * ${e}(lengthOriginal - 1) +
                        (${e}(xResized) * ${e}(roiEnd - roiStart) * ${e}(lengthOriginal - 1)) /
                        ${e}(lengthResized - 1);
                  } else {
                    return 0.5 * ${e}(roiStart + roiEnd) * ${e}(lengthOriginal - 1);
                  }`;case"half_pixel_symmetric":return`const outputWidth = ${e}xScale * ${e}(lengthResized);
                  const adjustment = ${e}(lengthResized) / outputWidth;
                  const center = ${e}(lengthOriginal) / 2;
                  const offset = center * (1 - adjustment);
                  return offset + ((${e}(xResized) + 0.5) / ${e}(xScale)) - 0.5;`;case"half_pixel":return`return ((${e}(xResized) + 0.5) / ${e}(xScale)) - 0.5;`;default:throw new Error(`Coordinate transform mode ${t} is not supported`)}})()+"}",gp=(t,e,r)=>`fn getNearestPixelFromOriginal(xOriginal: ${r}, isDownSample: bool) -> ${r} {`+(()=>{switch(t){case"round_prefer_ceil":return"if (fract(xOriginal) == 0.5) {             return ceil(xOriginal);           } else {             return round(xOriginal);           }";case"floor":return"return floor(xOriginal);";case"ceil":return"return ceil(xOriginal);";case"round_prefer_floor":return"if (fract(xOriginal) == 0.5) {                     return floor(xOriginal);                   } else {                     return round(xOriginal);                   }";case"simple":default:if(e<11)return"if (isDownSample)                     {                       return ceil(xOriginal);                     } else {                       return xOriginal;                     }";throw new Error(`Nearest mode ${t} is not supported`)}})()+"}",_p=(t,e,r)=>{let n=new Array(r).fill(0).concat(new Array(r).fill(1)),a=t.length===0?n:t.slice();return e.length>0?(e.forEach((i,s)=>{n[i]=a[s],n[s+r]=a[e.length+s]}),n):a},yp=(t,e,r,n)=>{let a=[];if(r.length>0)if(n.length>0){if(t.forEach(i=>a.push(i)),Math.max(...n)>t.length)throw new Error("axes is out of bound");n.forEach((i,s)=>a[i]=r[s])}else r.forEach(i=>a.push(i));else{if(e.length===0)throw new Error("Resize requires either scales or sizes.");a=t.map((i,s)=>Math.round(i*e[s]))}return a},wp=(t,e,r)=>{let n=(()=>{switch(r.keepAspectRatioPolicy){case"not_larger":return r.axes.length>0?Math.min(...r.axes.map(i=>e[i]),Number.MAX_VALUE):Math.min(...e,Number.MAX_VALUE);case"not_smaller":return r.axes.length>0?Math.max(...r.axes.map(i=>e[i]),Number.MIN_VALUE):Math.max(...e,Number.MIN_VALUE);default:throw new Error(`Keep aspect ratio policy ${r.keepAspectRatioPolicy} is not supported`)}})();e.fill(1,0,e.length);let a=t.slice();return r.axes.length>0?(r.axes.forEach(i=>e[i]=n),r.axes.forEach(i=>a[i]=Math.round(t[i]*e[i]))):(e.fill(n,0,e.length),a.forEach((i,s)=>a[s]=Math.round(i*e[s]))),a},vp=(t,e,r,n,a)=>`
    fn calculateOriginalIndicesFromOutputIndices(output_indices: ${t.type.indices}) -> array<${t.type.value}, ${r.length}> {
      var original_indices: array<${t.type.value}, ${r.length}>;
      for (var i:u32 = 0; i < ${r.length}; i++) {
        var output_index = ${t.indicesGet("output_indices","i")};
        var scale = ${xe("uniforms.scales","i",n)};
        var roi_low = ${xe("uniforms.roi","i",a)};
        var roi_hi = ${xe("uniforms.roi",`i + ${e.length}`,a)};
        if (scale == 1.0) {
          original_indices[i] = ${t.type.value}(output_index);
        } else {
          var input_shape_i = ${xe("uniforms.input_shape","i",e.length)};
          var output_shape_i = ${xe("uniforms.output_shape","i",r.length)};
          original_indices[i] = getOriginalCoordinateFromResizedCoordinate(output_index, scale, output_shape_i,
                                                                           input_shape_i, roi_low, roi_hi);
        }
      }
      return original_indices;
    }`,bp=(t,e,r,n,a,i,s)=>`
    fn calculateInputIndicesFromOutputIndices(output_indices: ${e.type.indices}) -> ${t.type.indices} {
      var input_indices: ${t.type.indices};
      for (var i:u32 = 0; i < ${n.length}; i++) {
        var output_index = ${e.indicesGet("output_indices","i")};
        var input_index: u32;
        var scale = ${xe("uniforms.scales","i",a)};
        if (scale == 1.0) {
          input_index = output_index;
        } else {
          var roi_low = ${xe("uniforms.roi","i",i)};
          var roi_hi = ${xe("uniforms.roi",`i + ${r.length}`,i)};
          var input_shape_i = ${xe("uniforms.input_shape","i",r.length)};
          var output_shape_i = ${xe("uniforms.output_shape","i",n.length)};
          var original_idx = getOriginalCoordinateFromResizedCoordinate(output_index, scale, output_shape_i,
                                                                        input_shape_i, roi_low, roi_hi);
          if (!${s} || (original_idx >= 0 && original_idx < ${e.type.value}(input_shape_i))) {
            if (original_idx < 0) {
              input_index = 0;
            } else if (original_idx > ${e.type.value}(input_shape_i - 1)) {
              input_index = input_shape_i - 1;
            } else {
              input_index = u32(getNearestPixelFromOriginal(original_idx, scale < 1));
            }
          } else {
            input_index = u32(original_idx);
          }
        }
        ${t.indicesSet("input_indices","i"," input_index")}
      }
      return input_indices;
    }`,$p=(t,e)=>`
    fn checkInputIndices(input_indices: ${t.type.indices}) -> bool {
      for (var i:u32 = 0; i < ${e.length}; i++) {
        var input_index = ${t.indicesGet("input_indices","i")};
        if (input_index < 0 || input_index >= ${xe("uniforms.input_shape","i",e.length)}) {
          return false;
        }
      }
      return true;
    }`,Os=(t,e,r,n)=>t.rank>n?`
    ${t.indicesSet("input_indices",e,"channel")};
    ${t.indicesSet("input_indices",r,"batch")};
`:"",xp=(t,e,r,n,a)=>{let[i,s,o,l]=r.length===2?[-1,0,1,-1]:[0,2,3,1],d=t.type.value;return`
    fn getInputValue(batch: u32, channel: u32, row: u32, col: u32) -> ${d} {
      var input_indices: ${t.type.indices};
      ${t.indicesSet("input_indices",s,`max(0, min(row, ${r[s]} - 1))`)};
      ${t.indicesSet("input_indices",o,`max(0, min(col, ${r[o]} - 1))`)};
      ${Os(t,l,i,2)}
      return ${t.getByIndices("input_indices")};
    }

    fn bilinearInterpolation(output_indices: ${e.type.indices}) -> ${d} {
      var originalIndices = calculateOriginalIndicesFromOutputIndices(output_indices);
      var row:${d} = originalIndices[${s}];
      var col:${d} = originalIndices[${o}];
      ${n?`if (row < 0 || row > (${r[s]} - 1) || col < 0 || col > (${r[o]} - 1)) {
        return ${a};
      }`:""};
      row = max(0, min(row, ${r[s]} - 1));
      col = max(0, min(col, ${r[o]} - 1));
      var row1: u32 = u32(row);
      var col1: u32 = u32(col);
      var row2: u32 = u32(row + 1);
      var col2: u32 = u32(col + 1);
      var channel: u32 = ${r.length>2?`u32(originalIndices[${l}])`:"0"};
      var batch: u32 =  ${r.length>2?`u32(originalIndices[${i}])`:"0"};
      var x11: ${d} = getInputValue(batch, channel, row1, col1);
      var x12: ${d} = getInputValue(batch, channel, row1, col2);
      var x21: ${d} = getInputValue(batch, channel, row2, col1);
      var x22: ${d} = getInputValue(batch, channel, row2, col2);
      var dx1: ${d} = abs(row - ${d}(row1));
      var dx2: ${d} = abs(${d}(row2) - row);
      var dy1: ${d} = abs(col - ${d}(col1));
      var dy2: ${d} = abs(${d}(col2) - col);
      if (row1 == row2) {
        dx1 = 0.5;
        dx2 = 0.5;
      }
      if (col1 == col2) {
        dy1 = 0.5;
        dy2 = 0.5;
      }
      return (x11 * dx2 * dy2 + x12 * dx2 * dy1 + x21 * dx1 * dy2 + x22 * dx1 * dy1);
    }`},Sp=(t,e,r,n,a,i,s,o,l,d)=>{let c=r.length===2,[u,h]=c?[0,1]:[2,3],f=t.type.value,g=y=>{let w=y===u?"row":"col";return`
      fn ${w}CubicInterpolation(input_indices: ${t.type.indices}, output_indices: ${e.type.indices}) -> ${f} {
        var output_index = ${e.indicesGet("output_indices",y)};
        var originalIdx: ${f} = getOriginalCoordinateFromResizedCoordinate(output_index, ${a[y]},
        ${n[y]}, ${r[y]}, ${i[y]}, ${i[y]} + ${r.length});
        var fractOriginalIdx: ${f} = originalIdx - floor(originalIdx);
        var coefs = getCubicInterpolationCoefs(fractOriginalIdx);

        if (${o} && (originalIdx < 0 || originalIdx > (${r[y]} - 1))) {
          return ${l};
        }
        var data: array<${f}, 4> = array<${f}, 4>(0.0, 0.0, 0.0, 0.0);
        for (var i: i32 = -1; i < 3; i++) {
          var ${w}: ${f} = originalIdx + ${f}(i);
          if (${w} < 0 || ${w} >= ${r[y]}) {
            ${d?`coefs[i + 1] = 0.0;
                        continue;`:o?`return ${l};`:`${w} = max(0, min(${w}, ${r[y]} - 1));`};
          }
        var input_indices_copy: ${t.type.indices} = input_indices;
          ${t.indicesSet("input_indices_copy",y,`u32(${w})`)};
          data[i + 1] = ${y===u?t.getByIndices("input_indices_copy"):"rowCubicInterpolation(input_indices_copy, output_indices)"};
        }
        return cubicInterpolation1D(data, coefs);
      }`};return`
    ${g(u)};
    ${g(h)};
  fn getCubicInterpolationCoefs(s: ${f}) -> array<${f}, 4> {
    var absS = abs(s);
    var coeffs: array<${f}, 4> = array<${f}, 4>(0.0, 0.0, 0.0, 0.0);
    var oneMinusAbsS: ${f} = 1.0 - absS;
    var twoMinusAbsS: ${f} = 2.0 - absS;
    var onePlusAbsS: ${f} = 1.0 + absS;
    coeffs[0] = ((${s} * onePlusAbsS - 5 * ${s}) * onePlusAbsS + 8 * ${s}) * onePlusAbsS - 4 * ${s};
    coeffs[1] = ((${s} + 2) * absS - (${s} + 3)) * absS * absS + 1;
    coeffs[2] = ((${s} + 2) * oneMinusAbsS - (${s} + 3)) * oneMinusAbsS * oneMinusAbsS + 1;
    coeffs[3] = ((${s} * twoMinusAbsS - 5 * ${s}) * twoMinusAbsS + 8 * ${s}) * twoMinusAbsS - 4 * ${s};
    return coeffs;
  }

  fn cubicInterpolation1D(x: array<${f}, 4>, coefs: array<${f}, 4>) -> ${f} {
    var coefsSum: ${f} = coefs[0] + coefs[1] + coefs[2] + coefs[3];
    return (x[0] * coefs[0] + x[1] * coefs[1]+ x[2] * coefs[2]+ x[3] * coefs[3]) / coefsSum;
  }

  fn bicubicInterpolation(output_indices: ${e.type.indices}) -> ${f} {
    var input_indices: ${t.type.indices} = output_indices;
    return colCubicInterpolation(input_indices, output_indices);
  }
    `},kp=(t,e,r,n,a)=>{let[i,s,o,l,d]=r.length===3?[-1,0,1,2,-1]:[0,2,3,4,1],c=t.type.value;return`
    fn getInputValue(batch: u32, channel: u32, depth:u32, height: u32, width: u32) -> ${c} {
      var input_indices: ${t.type.indices};
      ${t.indicesSet("input_indices",s,`max(0, min(depth, ${r[s]} - 1))`)};
      ${t.indicesSet("input_indices",o,`max(0, min(height, ${r[o]} - 1))`)};
      ${t.indicesSet("input_indices",l,`max(0, min(width, ${r[l]} - 1))`)};
      ${Os(t,d,i,3)}
      return ${t.getByIndices("input_indices")};
    }

    fn trilinearInterpolation(output_indices: ${e.type.indices}) -> ${c} {
      var originalIndices = calculateOriginalIndicesFromOutputIndices(output_indices);
      var depth:${c} = originalIndices[${s}];
      var height:${c} = originalIndices[${o}];
      var width:${c} = originalIndices[${l}];
      ${n?`if (depth < 0 || depth > (${r[s]} - 1) || height < 0 || height > (${r[o]} - 1) || width < 0 || (width > ${r[l]} - 1)) {
      return ${a};
        }`:""};

    depth = max(0, min(depth, ${r[s]} - 1));
      height = max(0, min(height, ${r[o]} - 1));
      width = max(0, min(width, ${r[l]} - 1));
      var depth1: u32 = u32(depth);
      var height1: u32 = u32(height);
      var width1: u32 = u32(width);
      var depth2: u32 = u32(depth + 1);
      var height2: u32 = u32(height + 1);
      var width2: u32 = u32(width + 1);
      var channel: u32 = ${r.length>3?`u32(originalIndices[${d}])`:"0"};
      var batch: u32 =  ${r.length>3?`u32(originalIndices[${i}])`:"0"};

      var x111: ${c} = getInputValue(batch, channel, depth1, height1, width1);
      var x112: ${c} = getInputValue(batch, channel, depth1, height1, width2);
      var x121: ${c} = getInputValue(batch, channel, depth1, height2, width1);
      var x122: ${c} = getInputValue(batch, channel, depth1, height2, width2);
      var x211: ${c} = getInputValue(batch, channel, depth2, height1, width1);
      var x212: ${c} = getInputValue(batch, channel, depth2, height1, width2);
      var x221: ${c} = getInputValue(batch, channel, depth2, height2, width1);
      var x222: ${c} = getInputValue(batch, channel, depth2, height2, width2);
      var dx1: ${c} = abs(depth - ${c}(depth1));
      var dx2: ${c} = abs(${c}(depth2) - depth);
      var dy1: ${c} = abs(height - ${c}(height1));
      var dy2: ${c} = abs(${c}(height2) - height);
      var dz1: ${c} = abs(width - ${c}(width1));
      var dz2: ${c} = abs(${c}(width2) - width);
      if (depth1 == depth2) {
        dx1 = 0.5;
        dx2 = 0.5;
      }
      if (height1 == height2) {
        dy1 = 0.5;
        dy2 = 0.5;
      }
      if (width1 == width2) {
        dz1 = 0.5;
        dz2 = 0.5;
      }
      return (x111 * dx2 * dy2 * dz2 + x112 * dx2 * dy2 * dz1 + x121 * dx2 * dy1 *dz2 + x122 * dx2 * dy1 * dz1 +
              x211 * dx1 * dy2 * dz2 + x212 * dx1 * dy2 * dz1 + x221 * dx1 * dy1 *dz2 + x222 * dx1 * dy1 * dz1);
    }`},Ep=(t,e,r,n,a,i)=>{let s=t.dims,o=_p(i,e.axes,s.length),l=yp(s,n,a,e.axes),d=n.slice();n.length===0&&(d=s.map((S,E)=>S===0?1:l[E]/S),e.keepAspectRatioPolicy!=="stretch"&&(l=wp(s,d,e)));let c=ve("output",t.dataType,l.length),u=J("input",t.dataType,s.length),h=ee.size(l),f=s.length===l.length&&s.every((S,E)=>S===l[E]),g=e.coordinateTransformMode==="tf_crop_and_resize",y=e.extrapolationValue,w=u.type.value,v=S=>`
      ${f?"":`
      ${mp(e.coordinateTransformMode,w)};
      ${(()=>{switch(e.mode){case"nearest":return`
              ${$p(u,s)};
              ${gp(e.nearestMode,r,w)};
              ${bp(u,c,s,l,d.length,o.length,g)};
              `;case"linear":return`
              ${vp(c,s,l,d.length,o.length)};
              ${(()=>{if(s.length===2||s.length===4)return`${xp(u,c,s,g,y)}`;if(s.length===3||s.length===5)return`${kp(u,c,s,g,y)}`;throw Error("Linear mode only supports input dims 2, 3, 4 and 5 are supported in linear mode.")})()};
            `;case"cubic":return`
            ${(()=>{if(s.length===2||s.length===4)return`${Sp(u,c,s,l,d,o,e.cubicCoeffA,g,e.extrapolationValue,e.excludeOutside)}`;throw Error("Cubic mode only supports input dims 2 and 4 are supported in linear mode.")})()};
            `;default:throw Error("Invalid resize mode")}})()};
      `}
      ${S.registerUniform("output_size","u32").registerUniform("scales","f32",d.length).registerUniform("roi","f32",o.length).declareVariables(u,c)}
      ${S.mainStart()}
        ${S.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
        ${f?"output[global_idx] = input[global_idx];":`
        let output_indices = ${c.offsetToIndices("global_idx")};
        var input_indices: ${u.type.indices};
        ${(()=>{switch(e.mode){case"nearest":return`input_indices = calculateInputIndicesFromOutputIndices(output_indices);
                if (checkInputIndices(input_indices)) {
                  output[global_idx] = ${u.getByIndices("input_indices")};
                } else {
                  output[global_idx] = ${e.extrapolationValue};
                }`;case"linear":return`output[global_idx] = ${s.length===2||s.length===4?"bilinearInterpolation":"trilinearInterpolation"}(output_indices);`;case"cubic":return"output[global_idx] = bicubicInterpolation(output_indices);";default:throw Error(`Unsupported resize mode: ${e.mode}`)}})()};
`}
      }`;return{name:"Resize",shaderCache:{hint:`${e.cacheKey}|${r}|${d.length>0?d:""}|${a.length>0?a:""}|${o.length>0?o:""}|${f}|${s}`,inputDependencies:["rank"]},getShaderSource:v,getRunData:()=>({outputs:[{dims:l,dataType:t.dataType}],dispatchGroup:{x:Math.ceil(h/64)},programUniforms:[{type:"uint32",data:h},{type:"float32",data:d},{type:"float32",data:o},...ie(s),...ie(l)]})}},Cp=t=>{let e=t.customDataBuffer;return new Uint32Array(e,e.byteOffset,1)[0]},Ap=(t,e)=>{let r=[],n=[],a=[],i=Cp(t);if(e.antialias!==0)throw Error("Only default value (0) for Antialias attribute is supported");fp(t.inputs,e,i,r,n,a),t.compute(Ep(t.inputs[0],e,i,r,n,a),{inputs:[0]})},Ip=t=>{let e=t.antialias,r=t.axes,n=t.coordinateTransformMode,a=t.cubicCoeffA,i=t.excludeOutside!==0,s=t.extrapolationValue,o=t.keepAspectRatioPolicy,l=t.mode,d=t.nearestMode===""?"simple":t.nearestMode;return qe({antialias:e,axes:r,coordinateTransformMode:n,cubicCoeffA:a,excludeOutside:i,extrapolationValue:s,keepAspectRatioPolicy:o,mode:l,nearestMode:d})}}),Tp,Op,Mp,zp,T_=Q(()=>{Ye(),Ae(),it(),Ce(),Tp=t=>{if(!t||t.length<3)throw new Error("layerNorm requires at least 3 inputs.");let e=t[0],r=t[1],n=t[2];if(e.dataType!==r.dataType||e.dataType!==n.dataType)throw new Error("All inputs must have the same data type");if(e.dims.length!==3&&e.dims.length!==2)throw new Error("Input must be 2D or 3D");if(r.dims.length!==3&&r.dims.length!==2)throw new Error("Skip must be 2D or 3D");let a=e.dims[e.dims.length-1],i=e.dims[e.dims.length-2];if(r.dims[r.dims.length-1]!==a)throw new Error("Skip must have the same hidden size as input");if(r.dims[r.dims.length-2]!==i)throw new Error("Skip must have the same sequence length as input");if(n.dims.length!==1)throw new Error("Gamma must be 1D");if(n.dims[n.dims.length-1]!==a)throw new Error("Gamma must have the same hidden size as input");if(t.length>3){let s=t[3];if(s.dims.length!==1)throw new Error("Beta must be 1D");if(s.dims[s.dims.length-1]!==a)throw new Error("Beta must have the same hidden size as input")}if(t.length>4){let s=t[4];if(s.dims.length!==1)throw new Error("Bias must be 1D");if(s.dims[s.dims.length-1]!==a)throw new Error("Bias must have the same hidden size as input")}},Op=(t,e,r,n)=>{let a=t[0].dims,i=ee.size(a),s=a,o=i,l=a.slice(-1)[0],d=n?a.slice(0,-1).concat(1):[],c=t.length>3,u=t.length>4,h=n&&r>1,f=n&&r>2,g=r>3,y=wt(l),w=[J("x",t[0].dataType,t[0].dims,y),J("skip",t[1].dataType,t[1].dims,y),J("gamma",t[2].dataType,t[2].dims,y)];c&&w.push(J("beta",t[3].dataType,t[3].dims,y)),u&&w.push(J("bias",t[4].dataType,t[4].dims,y)),w.push(ve("output",t[0].dataType,s,y)),h&&w.push(ve("meanOutput",1,d)),f&&w.push(ve("invStdOutput",1,d)),g&&w.push(ve("inputSkipBiasSum",t[0].dataType,s,y));let v=Ct(t[0].dataType),S=x=>`
      const hiddenSize: f32 = ${l};
      const hiddenSizeVectorized: u32 = ${l/y};
      const epsilon: f32 = ${e.epsilon};

      ${x.declareVariables(...w)}

      ${x.mainStart()}
        ${x.guardAgainstOutOfBoundsWorkgroupSizes(o/l)}
        let offset = global_idx * hiddenSizeVectorized;
        var sum = ${vt("f32",y)};
        var squareSum = ${vt("f32",y)};
        for (var i: u32 = 0; i < hiddenSizeVectorized; i++) {
          let skipValue = skip[offset + i];
          let biasValue = ${u?"bias[i]":"0.0"};
          let inputValue = x[offset + i];
          let value = inputValue + skipValue + biasValue;
          ${g?"inputSkipBiasSum[offset + i] = value;":""}
          output[offset + i] = value;
          let f32Value = ${nr(v,y,"value")};
          sum += f32Value;
          squareSum += f32Value * f32Value;
        }
        let mean = ${jt("sum",y)} / hiddenSize;
        let invStdDev = inverseSqrt(${jt("squareSum",y)} / hiddenSize - mean * mean + epsilon);
        ${h?"meanOutput[global_idx] = mean;":""}
        ${f?"invStdOutput[global_idx] = invStdDev;":""}
        for (var i: u32 = 0; i < hiddenSizeVectorized; i++) {
          output[offset + i] = (output[offset + i] - ${v}(mean)) * ${v}(invStdDev) * gamma[i]
           + ${c?"beta[i]":"0.0"};
        }
      }`,E=[{dims:s,dataType:t[0].dataType}];return r>1&&E.push({dims:d,dataType:1}),r>2&&E.push({dims:d,dataType:1}),r>3&&E.push({dims:a,dataType:t[0].dataType}),{name:"SkipLayerNormalization",shaderCache:{hint:e.cacheKey},getShaderSource:S,getRunData:()=>({outputs:E,dispatchGroup:{x:Math.ceil(o/l/64)}})}},Mp=(t,e)=>{Tp(t.inputs);let r=[0];t.outputCount>1&&r.push(-3),t.outputCount>2&&r.push(-3),t.outputCount>3&&r.push(3),t.compute(Op(t.inputs,e,t.outputCount,!1),{outputs:r})},zp=t=>{let e=t.epsilon;return qe({epsilon:e})}}),Bp,mn,Rp,Ms,Dp,Pp,Np,Up,O_=Q(()=>{Ye(),Ae(),it(),Ce(),Bp=(t,e)=>{if(!t||t.length<1)throw new Error("too few inputs");if(e.axes.length!==0){if(e.axes.length!==e.starts.length||e.axes.length!==e.ends.length)throw new Error("axes, starts and ends must have the same length")}else if(e.starts.length!==e.ends.length)throw new Error("starts and ends must have the same length");t.slice(1).forEach((r,n)=>{if(t[n+1].dataType!==6&&t[n+1].dataType!==7)throw new Error(`Input ${n} must be an array of int32 or int64`)})},mn=(t,e)=>{let r=[];if(t.length>e)if(t[e].dataType===7)t[e].getBigInt64Array().forEach(n=>r.push(Number(n)));else if(t[e].dataType===6)t[e].getInt32Array().forEach(n=>r.push(Number(n)));else throw new Error(`Input ${e} must be an array of int32 or int64`);return r},Rp=(t,e)=>{if(t.length>1){let r=mn(t,1),n=mn(t,2),a=mn(t,3);return a.length===0&&(a=[...Array(t[0].dims.length).keys()]),qe({starts:r,ends:n,axes:a})}else return e},Ms=(t,e,r,n,a)=>{let i=t;return t<0&&(i+=r[n[e]]),a[e]<0?Math.max(0,Math.min(i,r[n[e]]-1)):Math.max(0,Math.min(i,r[n[e]]))},Dp=(t,e,r)=>`fn calculateInputIndices(output_indices: ${e.type.indices}) -> ${t.type.indices} {
          var input_indices: ${t.type.indices};
          var carry = 0u;
          for (var i = ${r.length}; i >= 0; i--) {
            let input_shape_i = ${xe("uniforms.input_shape","i",r.length)};
            let steps_i = ${xe("uniforms.steps","i",r.length)};
            let signs_i = ${xe("uniforms.signs","i",r.length)};
            let starts_i = ${xe("uniforms.starts","i",r.length)};
            var output_index = ${e.indicesGet("output_indices","i")};
            var input_index = output_index * steps_i + starts_i + carry;
            carry = input_index / input_shape_i;
            input_index = input_index % input_shape_i;
            if (signs_i < 0) {
              input_index = input_shape_i - input_index - 1u + starts_i;
            }
            ${t.indicesSet("input_indices","i","input_index")};
          }
          return input_indices;
      }`,Pp=(t,e)=>{let r=t[0].dims,n=ee.size(r),a=e.axes.length>0?ee.normalizeAxes(e.axes,r.length):[...Array(r.length).keys()],i=mn(t,4);i.forEach(v=>v!==0||(()=>{throw new Error("step cannot be 0")})),i.length===0&&(i=Array(a.length).fill(1));let s=e.starts.map((v,S)=>Ms(v,S,r,a,i)),o=e.ends.map((v,S)=>Ms(v,S,r,a,i));if(a.length!==s.length||a.length!==o.length)throw new Error("start, ends and axes should have the same number of elements");if(a.length!==r.length)for(let v=0;v<r.length;++v)a.includes(v)||(s.splice(v,0,0),o.splice(v,0,r[v]),i.splice(v,0,1));let l=i.map(v=>Math.sign(v));i.forEach((v,S,E)=>{if(v<0){let x=(o[S]-s[S])/v,A=s[S],T=A+x*i[S];s[S]=T,o[S]=A,E[S]=-v}});let d=r.slice(0);a.forEach((v,S)=>{d[v]=Math.ceil((o[v]-s[v])/i[v])});let c={dims:d,dataType:t[0].dataType},u=ve("output",t[0].dataType,d.length),h=J("input",t[0].dataType,t[0].dims.length),f=ee.size(d),g=[{name:"outputSize",type:"u32"},{name:"starts",type:"u32",length:s.length},{name:"signs",type:"i32",length:l.length},{name:"steps",type:"u32",length:i.length}],y=[{type:"uint32",data:f},{type:"uint32",data:s},{type:"int32",data:l},{type:"uint32",data:i},...ie(t[0].dims),...ie(d)],w=v=>`
      ${v.registerUniforms(g).declareVariables(h,u)}
        ${Dp(h,u,r)}
        ${v.mainStart()}
          ${v.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
          let output_indices = ${u.offsetToIndices("global_idx")};
          let input_indices = calculateInputIndices(output_indices);
          ${u.setByOffset("global_idx",h.getByIndices("input_indices"))}
      }`;return{name:"Slice",shaderCache:{hint:`${l.length}_${s.length}_${i.length}`,inputDependencies:["rank"]},getShaderSource:w,getRunData:()=>({outputs:[c],dispatchGroup:{x:Math.ceil(n/64)},programUniforms:y})}},Np=(t,e)=>{Bp(t.inputs,e);let r=Rp(t.inputs,e);t.compute(Pp(t.inputs,r),{inputs:[0]})},Up=t=>{let e=t.starts,r=t.ends,n=t.axes;return qe({starts:e,ends:r,axes:n})}}),Wp,Lp,Fp,Vp,M_=Q(()=>{Ae(),it(),Ce(),Wp=t=>{if(!t||t.length!==1)throw new Error("Softmax op requires 1 input.")},Lp=(t,e)=>{let r=t.dims,n=ee.size(r),a=64,i=e.axis;if(i<0&&(i=r.length+i),i<r.length-1)throw new Error("softmax only supports last axis for now.");let s=r[i],o=n/s,l=wt(s),d=s/l,c=(w,v)=>v===4?`max(max(${w}.x, ${w}.y), max(${w}.z, ${w}.w))`:v===2?`max(${w}.x, ${w}.y)`:v===3?`max(max(${w}.x, ${w}.y), ${w}.z)`:w,u=J("x",t.dataType,t.dims,l),h=ve("result",t.dataType,t.dims,l),f=u.type.value,g=Ct(t.dataType)==="f32"?`var threadMax = ${f}(-3.402823e+38f);`:`var threadMax = ${f}(-65504.0h);`,y=w=>`
      var<workgroup> rowMaxShared : ${f};
      var<workgroup> rowSumShared : ${f};
      var<workgroup> threadShared : array<${f}, ${a}>;

      fn getValue(row: i32, col: i32, row_stride: i32) -> ${f} {
        let index = row * row_stride + col;
        return x[index];
      }

      fn setValue(row: i32, col: i32, row_stride: i32, value: ${f}) {
        let index = row * row_stride + col;
        result[index] = value;
      }
      ${w.registerUniform("packedCols","i32").declareVariables(u,h)}
      ${w.mainStart()}
        let gindex = i32(global_idx);
        let lindex = i32(local_idx);
        const wg = ${a};
        let row = gindex / wg;
        let cols = uniforms.packedCols;
        let row_stride : i32 = uniforms.packedCols;

        // find the rows max
        ${g}
        for (var col = lindex; col < cols; col += wg) {
          let value = getValue(row, col, row_stride);
          threadMax = max(threadMax, value);
        }
        if (lindex < cols) {
          threadShared[lindex] = threadMax;
        }
        workgroupBarrier();

        var reduceSize = min(cols, wg);
        for (var currSize = reduceSize >> 1;  currSize > 0; currSize = reduceSize >> 1) {
          reduceSize = currSize + (reduceSize & 1);
          if (lindex < currSize) {
            threadShared[lindex] = max(threadShared[lindex], threadShared[lindex + reduceSize]);
          }
          workgroupBarrier();
        }
        if (lindex == 0) {
          rowMaxShared = ${f}(${c("threadShared[0]",l)});
        }
        workgroupBarrier();

        // find the rows sum
        var threadSum = ${f}(0.0);
        for (var col = lindex; col < cols; col += wg) {
          let subExp = exp(getValue(row, col, row_stride) - rowMaxShared);
          threadSum += subExp;
        }
        threadShared[lindex] = threadSum;
        workgroupBarrier();

        for (var currSize = wg >> 1;  currSize > 0; currSize = currSize >> 1) {
          if (lindex < currSize) {
            threadShared[lindex] = threadShared[lindex] + threadShared[lindex + currSize];
          }
          workgroupBarrier();
        }
        if (lindex == 0) {
          rowSumShared = ${f}(${jt("threadShared[0]",l)});
        }
        workgroupBarrier();

        // calculate final value for each element in the row
        for (var col = lindex; col < cols; col += wg) {
          let value = exp(getValue(row, col, row_stride) - rowMaxShared) / rowSumShared;
          setValue(row, col, row_stride, value);
        }
      }`;return{name:"Softmax",shaderCache:{hint:`${l}`,inputDependencies:["type"]},getRunData:()=>({outputs:[{dims:r,dataType:t.dataType}],dispatchGroup:{x:o},programUniforms:[{type:"uint32",data:d}]}),getShaderSource:y}},Fp=(t,e)=>{Wp(t.inputs),t.compute(Lp(t.inputs[0],e))},Vp=t=>qe({axis:t.axis})}),Hp,Gp,qp,jp,Kp,Yp,Xp,z_=Q(()=>{Ae(),it(),Ce(),Hp=t=>{if(!t||t.length<1)throw new Error("too few inputs")},Gp=(t,e)=>{let r=[],n=e.numOutputs;return t[1].dims[0]>0&&(t[1].getBigInt64Array().forEach(a=>r.push(Number(a))),n=r.length),qe({numOutputs:n,axis:e.axis,splitSizes:r})},qp=t=>`
fn calculateOutputIndex(index: u32) -> u32 {
    for (var i: u32 = 0u; i < ${t}u; i += 1u ) {
    if (index < ${xe("uniforms.size_in_split_axis","i",t)}) {
        return i;
    }
    }
    return ${t}u;
}`,jp=t=>{let e=t.length,r=[];for(let n=0;n<e;++n){let a=t[n].setByIndices("indices","input[global_idx]");e===1?r.push(a):n===0?r.push(`if (output_number == ${n}u) { ${a} }`):n===e-1?r.push(`else { ${a} }`):r.push(`else if (output_number == ${n}) { ${a} }`)}return`
      fn writeBufferData(output_number: u32, indices: ${t[0].type.indices}, global_idx: u32) {
        ${r.join(`
`)}
      }`},Kp=(t,e)=>{let r=t[0].dims,n=ee.size(r),a=t[0].dataType,i=ee.normalizeAxis(e.axis,r.length),s=new Array(e.numOutputs),o=J("input",a,r),l=new Array(e.numOutputs),d=[],c=[],u=0,h=[{type:"uint32",data:n}];for(let g=0;g<e.numOutputs;g++){u+=e.splitSizes[g],l[g]=u;let y=r.slice();y[e.axis]=e.splitSizes[g],c.push(y),s[g]=ve(`output${g}`,a,y),d.push({dims:c[g],dataType:t[0].dataType})}h.push({type:"uint32",data:l}),h.push(...ie(r)),c.forEach(g=>h.push(...ie(g)));let f=g=>`
  ${g.registerUniform("input_size","u32").registerUniform("size_in_split_axis","u32",l.length).declareVariables(o,...s)}
  ${qp(l.length)}
  ${jp(s)}

  ${g.mainStart()}
    ${g.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.input_size")}

    var indices = ${o.offsetToIndices("global_idx")};
    var index = ${o.indicesGet("indices",i)};
    let output_number = calculateOutputIndex(index);
    if (output_number != 0) {
      index -= ${xe("uniforms.size_in_split_axis","output_number - 1u",l.length)};
      ${o.indicesSet("indices",i,"index")};
    }
    writeBufferData(output_number, indices, global_idx);
  }`;return{name:"Split",shaderCache:{hint:e.cacheKey,inputDependencies:["rank"]},getShaderSource:f,getRunData:()=>({outputs:d,dispatchGroup:{x:Math.ceil(n/64)},programUniforms:h})}},Yp=(t,e)=>{Hp(t.inputs);let r=t.inputs.length===1?e:Gp(t.inputs,e);t.compute(Kp(t.inputs,r),{inputs:[0]})},Xp=t=>{let e=t.axis,r=t.splitSizes,n=t.numOutputs<0?r.length:t.numOutputs;if(n!==r.length)throw new Error("numOutputs and splitSizes lengh must be equal");return qe({axis:e,numOutputs:n,splitSizes:r})}}),zs,Qp,Zp,Jp,eh,B_=Q(()=>{Ye(),Ae(),Ce(),zs=t=>Array.from(t.getBigInt64Array(),Number),Qp=t=>{if(!t||t.length!==2)throw new Error("Tile requires 2 inputs.");if(t[0].dataType!==1&&t[0].dataType!==6&&t[0].dataType!==12)throw new Error("Tile only support float, int32, and uint32 data types");if(t[1].dataType!==7)throw new Error("Tile `repeats` input should be of int64 data type");if(t[1].dims.length!==1)throw new Error("Tile `repeats` input should be 1-D");if(zs(t[1]).length!==t[0].dims.length)throw new Error("Tile `repeats` input should have same number of elements as rank of input data tensor")},Zp=(t,e)=>{let r=[];for(let n=0;n<t.length;++n)r.push(t[n]*e[n]);return r},Jp=t=>{let e=t[0].dims,r=zs(t[1]),n=Zp(e,r),a=ee.size(n),i=t[0].dataType,s=J("input",i,e.length),o=ve("output",i,n.length),l=d=>`
      const inputShape = ${s.indices(...e)};
      ${d.registerUniform("output_size","u32").declareVariables(s,o)}
      ${d.mainStart()}
      ${d.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
      let output_indices = ${o.offsetToIndices("global_idx")};
      var input_indices: ${s.type.indices};
      for (var i = 0; i < ${e.length}; i++) {
        let input_dim_i = ${s.indicesGet("uniforms.input_shape","i")};
        let input_dim_value = ${o.indicesGet("output_indices","i")}  % input_dim_i;

        ${s.indicesSet("input_indices","i","input_dim_value")}
      }
      ${o.setByOffset("global_idx",s.getByIndices("input_indices"))}
    }`;return{name:"Tile",shaderCache:{hint:`${r}`,inputDependencies:["rank"]},getRunData:()=>({outputs:[{dims:n,dataType:t[0].dataType}],dispatchGroup:{x:Math.ceil(a/64)},programUniforms:[{type:"uint32",data:a},...ie(t[0].dims),...ie(n)]}),getShaderSource:l}},eh=t=>{Qp(t.inputs),t.compute(Jp(t.inputs),{inputs:[0]})}}),th,rh,nh,R_=Q(()=>{Ye(),Ae(),Ce(),th=(t,e,r,n,a)=>{let i=ve("output_data",a,r.length,4),s=J("a_data",e[1].dataType,e[1].dims.length,4),o=J("b_data",e[2].dataType,e[2].dims.length,4),l=J("c_data",e[0].dataType,e[0].dims.length,4),d,c=(u,h,f)=>`select(${h}, ${u}, ${f})`;if(!n)d=i.setByOffset("global_idx",c(s.getByOffset("global_idx"),o.getByOffset("global_idx"),l.getByOffset("global_idx")));else{let u=(h,f,g="")=>{let y=`a_data[index_a${f}][component_a${f}]`,w=`b_data[index_b${f}][component_b${f}]`,v=`bool(c_data[index_c${f}] & ${4278190080>>>(3-f)*8}u)`;return`
            let output_indices${f} = ${i.offsetToIndices(`global_idx * 4u + ${f}u`)};
            let offset_a${f} = ${s.broadcastedIndicesToOffset(`output_indices${f}`,i)};
            let offset_b${f} = ${o.broadcastedIndicesToOffset(`output_indices${f}`,i)};
            let offset_c${f} = ${l.broadcastedIndicesToOffset(`output_indices${f}`,i)};
            let index_a${f} = offset_a${f} / 4u;
            let index_b${f} = offset_b${f} / 4u;
            let index_c${f} = offset_c${f} / 4u;
            let component_a${f} = offset_a${f} % 4u;
            let component_b${f} = offset_b${f} % 4u;
            ${h}[${f}] = ${g}(${c(y,w,v)});
          `};a===9?d=`
            var data = vec4<u32>(0);
            ${u("data",0,"u32")}
            ${u("data",1,"u32")}
            ${u("data",2,"u32")}
            ${u("data",3,"u32")}
            output_data[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));`:d=`
            ${u("output_data[global_idx]",0)}
            ${u("output_data[global_idx]",1)}
            ${u("output_data[global_idx]",2)}
            ${u("output_data[global_idx]",3)}
          `}return`
        ${t.registerUniform("vec_size","u32").declareVariables(l,s,o,i)}
        ${t.mainStart()}
        ${t.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}
        ${d}
      }`},rh=t=>{let e=t[1].dims,r=t[2].dims,n=t[0].dims,a=t[1].dataType,i=!(ee.areEqual(e,r)&&ee.areEqual(r,n)),s=e,o=ee.size(e);if(i){let d=Wr.calcShape(Wr.calcShape(e,r,!1),n,!1);if(!d)throw new Error("Can't perform where op on the given tensors");s=d,o=ee.size(s)}let l=Math.ceil(o/4);return{name:"Where",shaderCache:{inputDependencies:["rank","rank","rank"]},getShaderSource:d=>th(d,t,s,i,a),getRunData:()=>({outputs:[{dims:s,dataType:a}],dispatchGroup:{x:Math.ceil(o/64/4)},programUniforms:[{type:"uint32",data:l},...ie(n),...ie(e),...ie(r),...ie(s)]})}},nh=t=>{t.compute(rh(t.inputs))}}),ah,D_=Q(()=>{s_(),Eu(),o_(),l_(),u_(),d_(),c_(),Kd(),g_(),__(),y_(),w_(),v_(),b_(),$_(),x_(),S_(),Hd(),k_(),E_(),C_(),A_(),ts(),I_(),T_(),O_(),M_(),z_(),B_(),pn(),hd(),R_(),ah=new Map([["Abs",[Ru]],["Acos",[Du]],["Acosh",[Pu]],["Add",[wd]],["ArgMax",[wu,ns]],["ArgMin",[yu,ns]],["Asin",[Nu]],["Asinh",[Uu]],["Atan",[Wu]],["Atanh",[Lu]],["Attention",[ku]],["AveragePool",[rp,tp]],["BatchNormalization",[Tu]],["BiasAdd",[zu]],["BiasSplitGelu",[gd]],["Cast",[Vu,Fu]],["Ceil",[qu]],["Clip",[Gu]],["Concat",[zd,Bd]],["Conv",[gs,ms]],["ConvTranspose",[sc,tc]],["Cos",[ju]],["Cosh",[Ku]],["CumSum",[lc,uc]],["Div",[vd]],["Einsum",[mc,gc]],["Elu",[Yu,ka]],["Equal",[bd]],["Erf",[Xu]],["Exp",[Qu]],["Expand",[vc]],["Floor",[Zu]],["FusedConv",[gs,ms]],["Gather",[Sc,xc]],["GatherElements",[Ac,Cc]],["Gelu",[Ju]],["Gemm",[Mc,Oc]],["GlobalAveragePool",[ap,np]],["GlobalMaxPool",[lp,op]],["Greater",[kd]],["GreaterOrEqual",[Cd]],["InstanceNormalization",[Dc]],["LayerNormalization",[Uc]],["LeakyRelu",[ed,ka]],["Less",[Ed]],["LessOrEqual",[Ad]],["Log",[pd]],["MatMul",[Vd]],["MaxPool",[ip,sp]],["Mul",[$d]],["MultiHeadAttention",[Vc,Lc]],["Neg",[rd]],["Not",[td]],["Pad",[Zc]],["Pow",[xd]],["Range",[cp]],["Reciprocal",[nd]],["ReduceMin",[hu]],["ReduceMean",[lu]],["ReduceMax",[pu]],["ReduceSum",[mu]],["ReduceProd",[fu]],["ReduceL1",[uu]],["ReduceL2",[du]],["ReduceLogSum",[_u]],["ReduceLogSumExp",[cu]],["ReduceSumSquare",[gu]],["Relu",[ad]],["Resize",[Ap,Ip]],["Sigmoid",[id]],["Sin",[sd]],["Sinh",[od]],["Slice",[Np,Up]],["SkipLayerNormalization",[Mp,zp]],["Split",[Yp,Xp]],["Sqrt",[ld]],["Softmax",[Fp,Vp]],["Sub",[Sd]],["Tan",[ud]],["Tanh",[dd]],["ThresholdedRelu",[cd,ka]],["Tile",[eh]],["Transpose",[Il,Tl]],["Where",[nh]]])}),ih,P_=Q(()=>{Dt(),wr(),Ce(),ih=class{constructor(t){this.backend=t,this.repo=new Map,this.attributesBound=!1}getArtifact(t){return this.repo.get(t)}setArtifact(t,e){this.repo.set(t,e)}run(t,e,r,n,a){Bt(t.programInfo.name);let i=this.backend.device,s=this.backend.getComputePassEncoder();this.backend.writeTimestamp(this.backend.pendingDispatchNumber*2),s.setPipeline(t.computePipeline);let o=[];for(let d of e)o.push({binding:o.length,resource:{buffer:d.buffer}});for(let d of r)o.push({binding:o.length,resource:{buffer:d.buffer}});a&&o.push({binding:o.length,resource:a});let l=i.createBindGroup({layout:t.computePipeline.getBindGroupLayout(0),entries:o,label:t.programInfo.name});s.setBindGroup(0,l),s.dispatchWorkgroups(...n),this.backend.writeTimestamp(this.backend.pendingDispatchNumber*2+1),this.backend.pendingDispatchNumber++,(this.backend.pendingDispatchNumber>=this.backend.maxDispatchNumber||this.backend.queryType==="at-passes")&&this.backend.endComputePass(),this.backend.pendingDispatchNumber>=this.backend.maxDispatchNumber&&this.backend.flush(),Rt(t.programInfo.name)}dispose(){}build(t,e){Bt(t.name);let r=this.backend.device,n=[];r.features.has("shader-f16")&&n.push("enable f16;");let a=kl(e),i=t.getShaderSource(a),s=`${n.join(`
`)}
${a.additionalImplementations}
${i}`,o=r.createShaderModule({code:s,label:t.name});at("verbose",()=>`[WebGPU] ${t.name} shader code: ${s}`);let l=r.createComputePipeline({compute:{module:o,entryPoint:"main"},layout:"auto",label:t.name});return Rt(t.name),{programInfo:t,computePipeline:l}}normalizeDispatchGroupSize(t){let e=typeof t=="number"?t:t.x,r=typeof t=="number"?1:t.y||1,n=typeof t=="number"?1:t.z||1,a=this.backend.device.limits.maxComputeWorkgroupsPerDimension;if(e<=a&&r<=a&&n<=a)return[e,r,n];let i=e*r*n,s=Math.ceil(Math.sqrt(i));if(s>a){if(s=Math.ceil(Math.cbrt(i)),s>a)throw new Error("Total dispatch size exceeds WebGPU maximum.");return[s,s,s]}else return[s,s,1]}}}),sh,oh,lh,N_=Q(()=>{Dt(),Ye(),wr(),n_(),a_(),D_(),P_(),sh=(t,e)=>{if(e.length!==t.length)throw new Error(`inputDependencies length ${e.length} is not equal to inputTensors length ${t.length}.`);let r=[];for(let n=0;n<t.length;++n){let a=t[n].dataType;switch(e[n]){case"none":{r.push("");break}case"type":{r.push(`${a}`);break}case"rank":{let i=t[n].dims.length;r.push(`${a};${i}`);break}case"dims":{let i=t[n].dims.join(",");r.push(`${a};${i}`);break}default:throw new Error(`unsupported input dependency: ${e[n]}`)}}return r.join("|")},oh=(t,e,r)=>{let n=t.name;return t.shaderCache?.hint&&(n+="["+t.shaderCache.hint+"]"),n+=":"+r+`:${sh(e,t.shaderCache?.inputDependencies??new Array(e.length).fill("dims"))}`,n},lh=class{constructor(){this.currentKernelId=null,this.commandEncoder=null,this.computePassEncoder=null,this.maxDispatchNumber=16,this.pendingDispatchNumber=0,this.pendingKernels=[],this.pendingQueries=new Map,this.sessionExternalDataMapping=new Map}get currentKernelCustomData(){if(this.currentKernelId===null)throw new Error("currentKernelCustomData(): currentKernelId is null. (should not happen)");let t=this.kernelCustomData.get(this.currentKernelId);return t||(t={},this.kernelCustomData.set(this.currentKernelId,t)),t}async initialize(t,e){this.env=t;let r=[],n={requiredLimits:{maxComputeWorkgroupStorageSize:e.limits.maxComputeWorkgroupStorageSize,maxComputeWorkgroupsPerDimension:e.limits.maxComputeWorkgroupsPerDimension,maxStorageBufferBindingSize:e.limits.maxStorageBufferBindingSize,maxBufferSize:e.limits.maxBufferSize,maxComputeInvocationsPerWorkgroup:e.limits.maxComputeInvocationsPerWorkgroup,maxComputeWorkgroupSizeX:e.limits.maxComputeWorkgroupSizeX,maxComputeWorkgroupSizeY:e.limits.maxComputeWorkgroupSizeY,maxComputeWorkgroupSizeZ:e.limits.maxComputeWorkgroupSizeZ},requiredFeatures:r};e.features.has("chromium-experimental-timestamp-query-inside-passes")?r.push("chromium-experimental-timestamp-query-inside-passes"):e.features.has("timestamp-query")&&r.push("timestamp-query"),e.features.has("shader-f16")&&r.push("shader-f16"),this.device=await e.requestDevice(n),this.gpuDataManager=wl(this),this.programManager=new ih(this),this.kernels=new Map,this.kernelPersistentData=new Map,this.kernelCustomData=new Map,fl(t.logLevel,!!t.debug),this.device.onuncapturederror=a=>{a.error instanceof GPUValidationError&&console.error(`An uncaught WebGPU validation error was raised: ${a.error.message}`)},Object.defineProperty(this.env.webgpu,"device",{value:this.device}),this.setQueryType()}dispose(){typeof this.querySet<"u"&&this.querySet.destroy(),this.gpuDataManager.dispose()}getCommandEncoder(){return this.commandEncoder||(this.commandEncoder=this.device.createCommandEncoder(),this.setQueryType(),this.queryType!=="none"&&typeof this.querySet>"u"&&(this.querySet=this.device.createQuerySet({type:"timestamp",count:this.maxDispatchNumber*2}),this.queryResolveBuffer=this.device.createBuffer({size:this.maxDispatchNumber*2*8,usage:GPUBufferUsage.COPY_SRC|GPUBufferUsage.QUERY_RESOLVE}))),this.commandEncoder}getComputePassEncoder(){if(!this.computePassEncoder){let t={};this.queryType==="at-passes"&&(t.timestampWrites={querySet:this.querySet,beginningOfPassWriteIndex:this.pendingDispatchNumber*2,endOfPassWriteIndex:this.pendingDispatchNumber*2+1}),this.computePassEncoder=this.getCommandEncoder().beginComputePass(t)}return this.computePassEncoder}endComputePass(){this.computePassEncoder&&(this.computePassEncoder.end(),this.computePassEncoder=null)}flush(){if(!this.commandEncoder)return;Bt(),this.endComputePass();let t;this.queryType!=="none"&&(this.commandEncoder.resolveQuerySet(this.querySet,0,this.pendingDispatchNumber*2,this.queryResolveBuffer,0),t=this.device.createBuffer({size:this.pendingDispatchNumber*2*8,usage:GPUBufferUsage.MAP_READ|GPUBufferUsage.COPY_DST}),this.pendingQueries.set(t,this.pendingKernels),this.pendingKernels=[],this.commandEncoder.copyBufferToBuffer(this.queryResolveBuffer,0,t,0,this.pendingDispatchNumber*2*8)),this.device.queue.submit([this.commandEncoder.finish()]),this.gpuDataManager.refreshPendingBuffers(),this.commandEncoder=null,this.pendingDispatchNumber=0,this.queryType!=="none"&&t.mapAsync(GPUMapMode.READ).then(()=>{let e=new BigUint64Array(t.getMappedRange()),r=this.pendingQueries.get(t);for(let n=0;n<e.length/2;n++){let a=r[n],i=a.kernelId,s=this.kernels.get(i),o=s.kernelType,l=s.kernelName,d=a.programName,c=a.inputTensorViews,u=a.outputTensorViews,h=e[n*2],f=e[n*2+1];typeof this.queryTimeBase>"u"&&(this.queryTimeBase=h);let g=Number(h-this.queryTimeBase),y=Number(f-this.queryTimeBase);if(!Number.isSafeInteger(g)||!Number.isSafeInteger(y))throw new RangeError("incorrect timestamp range");if(this.env.webgpu.profiling?.ondata)this.env.webgpu.profiling.ondata({version:1,inputsMetadata:c.map(w=>({dims:w.dims,dataType:qt(w.dataType)})),outputsMetadata:u.map(w=>({dims:w.dims,dataType:qt(w.dataType)})),kernelId:i,kernelType:o,kernelName:l,programName:d,startTime:g,endTime:y});else{let w="";c.forEach((S,E)=>{w+=`input[${E}]: [${S.dims}] | ${qt(S.dataType)}, `});let v="";u.forEach((S,E)=>{v+=`output[${E}]: [${S.dims}] | ${qt(S.dataType)}, `}),console.log(`[profiling] kernel "${i}|${o}|${l}|${d}" ${w}${v}execution time: ${y-g} ns`)}on("GPU",`${d}::${h}::${f}`)}t.unmap(),this.pendingQueries.delete(t)}),Rt()}run(t,e,r,n,a){Bt(t.name);let i=[];for(let v=0;v<e.length;++v){let S=this.gpuDataManager.get(e[v].data);if(!S)throw new Error(`no GPU data for input: ${e[v].data}`);i[v]=S}let{outputs:s,dispatchGroup:o,programUniforms:l}=t.getRunData(e),d=r.length===0?s.map((v,S)=>S):r;if(d.length!==s.length)throw new Error(`Output size ${d.length} must be equal to ${s.length}.`);let c=[],u=[];for(let v=0;v<s.length;++v){if(!Number.isInteger(d[v])||d[v]<-3||d[v]>=s.length)throw new Error(`Invalid output index: ${d[v]}`);if(d[v]===-3)continue;let S=d[v]===-1,E=d[v]===-2,x=S||E?a(s[v].dataType,s[v].dims):n(d[v],s[v].dataType,s[v].dims),A=this.gpuDataManager.get(x.data);if(!A)throw new Error(`no GPU data for output: ${x.data}`);if(S&&this.temporaryData.push(A),E){let T=this.kernelPersistentData.get(this.currentKernelId);T||(T=[],this.kernelPersistentData.set(this.currentKernelId,T)),T.push(A)}c.push(x),u.push(A)}let h;if(l){let v=0,S=[];l.forEach(T=>{let B=typeof T.data=="number"?[T.data]:T.data;if(B.length===0)return;let U=B.length<=2?B.length*4:16;v=Math.ceil(v/U)*U,S.push(v),v+=B.length>4?Math.ceil(B.length/4)*16:B.length*4});let E=16;v=Math.ceil(v/E)*E;let x=new ArrayBuffer(v);l.forEach((T,B)=>{let U=S[B],H=typeof T.data=="number"?[T.data]:T.data;T.type==="int32"?new Int32Array(x,U,H.length).set(H):T.type==="uint32"?new Uint32Array(x,U,H.length).set(H):new Float32Array(x,U,H.length).set(H)});let A=this.gpuDataManager.create(v,GPUBufferUsage.COPY_DST|GPUBufferUsage.UNIFORM);this.device.queue.writeBuffer(A.buffer,0,x,0,v),this.gpuDataManager.release(A.id),h={offset:0,size:v,buffer:A.buffer}}let f=this.programManager.normalizeDispatchGroupSize(o),g=f[1]===1&&f[2]===1,y=oh(t,e,g),w=this.programManager.getArtifact(y);if(w||(w=this.programManager.build(t,f),this.programManager.setArtifact(y,w),at("info",()=>`[artifact] key: ${y}, programName: ${t.name}`)),at("info",()=>`[ProgramManager] run "${t.name}" (key=${y}) with ${f[0]}x${f[1]}x${f[2]}`),this.queryType!=="none"){let v={kernelId:this.currentKernelId,programName:w.programInfo.name,inputTensorViews:e,outputTensorViews:c};this.pendingKernels.push(v)}return this.programManager.run(w,i,u,f,h),Rt(t.name),c}upload(t,e){this.gpuDataManager.upload(t,e)}memcpy(t,e){this.gpuDataManager.memcpy(t,e)}async download(t,e){await this.gpuDataManager.download(t,e)}alloc(t){return this.gpuDataManager.create(t).id}free(t){return this.gpuDataManager.release(t)}createKernel(t,e,r,n){let a=ah.get(t);if(!a)throw new Error(`kernel not implemented: ${t}`);let i={kernelType:t,kernelName:n,kernelEntry:a[0],attributes:[a[1],r]};this.kernels.set(e,i)}releaseKernel(t){let e=this.kernelPersistentData.get(t);if(e){for(let r of e)this.gpuDataManager.release(r.id);this.kernelPersistentData.delete(t)}this.kernelCustomData.delete(t),this.kernels.delete(t)}computeKernel(t,e,r){let n=this.kernels.get(t);if(!n)throw new Error(`kernel not created: ${t}`);let a=n.kernelType,i=n.kernelName,s=n.kernelEntry,o=n.attributes;if(this.currentKernelId!==null)throw new Error(`kernel "[${a}] ${i}" is not allowed to be called recursively`);this.currentKernelId=t,o[0]&&(o[1]=o[0](o[1]),o[0]=void 0),at("info",()=>`[WebGPU] Start to run kernel "[${a}] ${i}"...`);let l=this.env.debug;this.temporaryData=[];try{return l&&this.device.pushErrorScope("validation"),s(e,o[1]),0}catch(d){return r.push(Promise.resolve(`[WebGPU] Kernel "[${a}] ${i}" failed. ${d}`)),1}finally{l&&r.push(this.device.popErrorScope().then(d=>d?`GPU validation error for kernel "[${a}] ${i}": ${d.message}`:null));for(let d of this.temporaryData)this.gpuDataManager.release(d.id);this.temporaryData=[],this.currentKernelId=null}}registerBuffer(t,e,r,n){let a=this.sessionExternalDataMapping.get(t);a||(a=new Map,this.sessionExternalDataMapping.set(t,a));let i=a.get(e),s=this.gpuDataManager.registerExternalBuffer(r,n,i?.[1]);return a.set(e,[s,r]),s}unregisterBuffers(t){let e=this.sessionExternalDataMapping.get(t);e&&(e.forEach(r=>this.gpuDataManager.unregisterExternalBuffer(r[1])),this.sessionExternalDataMapping.delete(t))}getBuffer(t){let e=this.gpuDataManager.get(t);if(!e)throw new Error(`no GPU data for buffer: ${t}`);return e.buffer}createDownloader(t,e,r){return async()=>{let n=await Yi(this,t,e);return gl(n.buffer,r)}}writeTimestamp(t){this.queryType==="inside-passes"&&this.computePassEncoder.writeTimestamp(this.querySet,t)}setQueryType(){this.queryType="none",(this.env.webgpu.profiling?.mode==="default"||this.env.wasm.trace)&&(this.device.features.has("chromium-experimental-timestamp-query-inside-passes")?this.queryType="inside-passes":this.device.features.has("timestamp-query")&&(this.queryType="at-passes"))}}}),uh={};Pr(uh,{init:()=>ch});var Ma,dh,ch,U_=Q(()=>{Ye(),N_(),wr(),Ae(),Ma=class cg{constructor(e,r,n,a){this.module=e,this.dataType=r,this.data=n,this.dims=a}getFloat32Array(){if(this.dataType!==1)throw new Error("Invalid data type");let e=ee.size(this.dims);return e===0?new Float32Array:new Float32Array(this.module.HEAP8.buffer,this.data,e)}getBigInt64Array(){if(this.dataType!==7)throw new Error("Invalid data type");let e=ee.size(this.dims);return e===0?new BigInt64Array:new BigInt64Array(this.module.HEAP8.buffer,this.data,e)}getInt32Array(){if(this.dataType!==6)throw new Error("Invalid data type");let e=ee.size(this.dims);return e===0?new Int32Array:new Int32Array(this.module.HEAP8.buffer,this.data,e)}reshape(e){if(ee.size(e)!==ee.size(this.dims))throw new Error("Invalid new shape");return new cg(this.module,this.dataType,this.data,e)}},dh=class{constructor(t,e,r){this.module=t,this.backend=e,this.customDataOffset=0,this.customDataSize=0;let n=t.HEAPU32,a=r>>>2;this.opKernelContext=n[a++];let i=n[a++];this.outputCount=n[a++],this.customDataOffset=n[a++],this.customDataSize=n[a++];let s=[];for(let o=0;o<i;o++){let l=n[a++],d=n[a++],c=n[a++],u=[];for(let h=0;h<c;h++)u.push(n[a++]);s.push(new Ma(t,l,d,u))}this.inputs=s}get kernelCustomData(){return this.backend.currentKernelCustomData}get customDataBuffer(){return this.module.HEAPU8.subarray(this.customDataOffset,this.customDataOffset+this.customDataSize)}compute(t,e){let r=e?.inputs?.map(s=>typeof s=="number"?this.inputs[s]:s)??this.inputs,n=e?.outputs??[],a=(s,o,l)=>new Ma(this.module,o,this.output(s,l),l),i=(s,o)=>{let l=_a(s);if(!l)throw new Error(`Unsupported data type: ${s}`);let d=l*ee.size(o);return new Ma(this.module,s,this.backend.gpuDataManager.create(d).id,o)};return this.backend.run(t,r,n,a,i)}output(t,e){let r=this.module.stackSave();try{let n=this.module.stackAlloc((1+e.length)*4),a=n>>2;this.module.HEAPU32[a++]=e.length;for(let i=0;i<e.length;i++)this.module.HEAPU32[a++]=e[i];return this.module._JsepOutput(this.opKernelContext,t,n)}catch(n){throw new Error(`Failed to generate kernel's output[${t}] with dims [${e}]. If you are running with pre-allocated output, please make sure the output type/dims are correct. Error: ${n}`)}finally{this.module.stackRestore(r)}}},ch=async(t,e,r)=>{let n=t.jsepInit;if(!n)throw new Error("Failed to initialize JSEP. The WebAssembly module is not built with JSEP support.");let a=new lh;await a.initialize(e,r),n(a,i=>a.alloc(i),i=>a.free(i),(i,s,o,l=!1)=>{if(l)at("verbose",()=>`[WebGPU] jsepCopyGpuToGpu: src=${i}, dst=${s}, size=${o}`),a.memcpy(i,s);else{at("verbose",()=>`[WebGPU] jsepCopyCpuToGpu: dataOffset=${i}, gpuDataId=${s}, size=${o}`);let d=t.HEAPU8.subarray(i>>>0,(i>>>0)+o);a.upload(s,d)}},async(i,s,o)=>{at("verbose",()=>`[WebGPU] jsepCopyGpuToCpu: gpuDataId=${i}, dataOffset=${s}, size=${o}`),await a.download(i,()=>t.HEAPU8.subarray(s>>>0,(s>>>0)+o))},(i,s,o)=>a.createKernel(i,s,o,t.UTF8ToString(t._JsepGetNodeName(s))),i=>a.releaseKernel(i),(i,s,o,l)=>{at("verbose",()=>`[WebGPU] jsepRun: sessionHandle=${o}, kernel=${i}, contextDataOffset=${s}`);let d=new dh(t,a,s);return a.computeKernel(i,d,l)})}}),ph,hh,fh,Fr,mh,Bs,gh,_h,Rs,yh,wh,vh,W_=Q(()=>{t_(),r_(),Ye(),un(),Fi(),ul(),ph=(t,e)=>{rt()._OrtInit(t,e)!==0&&Ge("Can't initialize onnxruntime.")},hh=async t=>{ph(t.wasm.numThreads,ya(t.logLevel))},fh=async(t,e)=>{if(e==="webgpu"){if(typeof navigator>"u"||!navigator.gpu)throw new Error("WebGPU is not supported in current environment");let r=await navigator.gpu.requestAdapter();if(!r)throw new Error('Failed to get GPU adapter. You may need to enable flag "--enable-unsafe-webgpu" if you are using Chrome.');if(!t.wasm.simd)throw new Error("Not supported for WebGPU=ON and SIMD=OFF. Please set `env.wasm.simd` to true when using `webgpu` EP");let n=(U_(),yr(uh)).init;await n(rt(),t,r)}},Fr=new Map,mh=t=>{let e=rt(),r=e.stackSave();try{let n=e.stackAlloc(8);return e._OrtGetInputOutputCount(t,n,n+4)!==0&&Ge("Can't get session input/output count."),[e.HEAP32[n/4],e.HEAP32[n/4+1]]}finally{e.stackRestore(r)}},Bs=t=>{let e=rt(),r=e._malloc(t.byteLength);if(r===0)throw new Error(`Can't create a session. failed to allocate a buffer of size ${t.byteLength}.`);return e.HEAPU8.set(t,r),[r,t.byteLength]},gh=async(t,e)=>{let r,n,a=rt();Array.isArray(t)?[r,n]=t:t.buffer===a.HEAPU8.buffer?[r,n]=[t.byteOffset,t.byteLength]:[r,n]=Bs(t);let i=0,s=0,o=0,l=[],d=[],c=[];try{if([s,l]=ll(e),e?.externalData&&a.mountExternalData){let v=[];for(let S of e.externalData){let E=typeof S=="string"?S:S.path;v.push(wa(typeof S=="string"?S:S.data).then(x=>{a.mountExternalData(E,x)}))}await Promise.all(v)}i=a._OrtCreateSession(r,n,s),i===0&&Ge("Can't create a session.");let[u,h]=mh(i),f=[],g=[],y=[];for(let v=0;v<u;v++){let S=a._OrtGetInputName(i,v);S===0&&Ge("Can't get an input name."),d.push(S),f.push(a.UTF8ToString(S))}for(let v=0;v<h;v++){let S=a._OrtGetOutputName(i,v);S===0&&Ge("Can't get an output name."),c.push(S);let E=a.UTF8ToString(S);g.push(E);{let x=typeof e?.preferredOutputLocation=="string"?e.preferredOutputLocation:e?.preferredOutputLocation?.[E]??"cpu";if(x!=="cpu"&&x!=="cpu-pinned"&&x!=="gpu-buffer")throw new Error(`Not supported preferred output location: ${x}.`);y.push(x)}}let w=null;return y.some(v=>v==="gpu-buffer")&&(o=a._OrtCreateBinding(i),o===0&&Ge("Can't create IO binding."),w={handle:o,outputPreferredLocations:y,outputPreferredLocationsEncoded:y.map(v=>qi(v))}),Fr.set(i,[i,d,c,w]),[i,f,g]}catch(u){throw d.forEach(h=>a._OrtFree(h)),c.forEach(h=>a._OrtFree(h)),o!==0&&a._OrtReleaseBinding(o),i!==0&&a._OrtReleaseSession(i),u}finally{a._free(r),s!==0&&a._OrtReleaseSessionOptions(s),l.forEach(u=>a._free(u)),a.unmountExternalData?.()}},_h=t=>{let e=rt(),r=Fr.get(t);if(!r)throw new Error(`cannot release session. invalid session id: ${t}`);let[n,a,i,s]=r;s&&e._OrtReleaseBinding(s.handle),e.jsepUnregisterBuffers?.(t),a.forEach(o=>e._OrtFree(o)),i.forEach(o=>e._OrtFree(o)),e._OrtReleaseSession(n),Fr.delete(t)},Rs=(t,e,r,n,a)=>{if(!t){e.push(0);return}let i=rt(),s=t[0],o=t[1],l=t[3],d,c;if(s==="string"&&l==="gpu-buffer")throw new Error("String tensor is not supported on GPU.");if(l==="gpu-buffer"){let f=t[2].gpuBuffer,g=_a(Vi(s));c=o.reduce((y,w)=>y*w,1)*g,d=i.jsepRegisterBuffer(n,a,f,c)}else{let f=t[2];if(Array.isArray(f)){c=4*f.length,d=i._malloc(c),r.push(d);let g=d/4;for(let y=0;y<f.length;y++){if(typeof f[y]!="string")throw new TypeError(`tensor data at index ${y} is not a string`);i.HEAPU32[g++]=nt(f[y],r)}}else c=f.byteLength,d=i._malloc(c),r.push(d),i.HEAPU8.set(new Uint8Array(f.buffer,f.byteOffset,c),d)}let u=i.stackSave(),h=i.stackAlloc(4*o.length);try{let f=h/4;o.forEach(y=>i.HEAP32[f++]=y);let g=i._OrtCreateTensor(Vi(s),d,c,h,o.length,qi(l));g===0&&Ge(`Can't create tensor for input/output. session=${n}, index=${a}.`),e.push(g)}finally{i.stackRestore(u)}},yh=async(t,e,r,n,a,i)=>{let s=rt(),o=Fr.get(t);if(!o)throw new Error(`cannot run inference. invalid session id: ${t}`);let[l,d,c,u]=o,h=e.length,f=n.length,g=0,y=[],w=[],v=[],S=[],E=s.stackSave(),x=s.stackAlloc(h*4),A=s.stackAlloc(h*4),T=s.stackAlloc(f*4),B=s.stackAlloc(f*4);try{[g,y]=nl(i);for(let q=0;q<h;q++)Rs(r[q],w,S,t,e[q]);for(let q=0;q<f;q++)Rs(a[q],v,S,t,h+n[q]);let U=x/4,H=A/4,K=T/4,O=B/4;for(let q=0;q<h;q++)s.HEAPU32[U++]=w[q],s.HEAPU32[H++]=d[e[q]];for(let q=0;q<f;q++)s.HEAPU32[K++]=v[q],s.HEAPU32[O++]=c[n[q]];if(u){let{handle:q,outputPreferredLocations:D,outputPreferredLocationsEncoded:L}=u;if(d.length!==h)throw new Error(`input count from feeds (${h}) is expected to be always equal to model's input count (${d.length}).`);for(let V=0;V<h;V++){let te=e[V];await s._OrtBindInput(q,d[te],w[V])!==0&&Ge(`Can't bind input[${V}] for session=${t}.`)}for(let V=0;V<f;V++){let te=n[V];a[V]?.[3]?s._OrtBindOutput(q,c[te],v[V],0)!==0&&Ge(`Can't bind pre-allocated output[${V}] for session=${t}.`):s._OrtBindOutput(q,c[te],0,L[te])!==0&&Ge(`Can't bind output[${V}] to ${D[V]} for session=${t}.`)}}let G;u?G=await s._OrtRunWithBinding(l,u.handle,f,T,g):G=await s._OrtRun(l,A,x,h,B,f,T,g),G!==0&&Ge("failed to call OrtRun().");let ne=[];for(let q=0;q<f;q++){let D=s.HEAPU32[T/4+q];if(D===v[q]){ne.push(a[q]);continue}let L=s.stackSave(),V=s.stackAlloc(4*4),te=!1,X,ue=0;try{s._OrtGetTensorData(D,V,V+4,V+8,V+12)!==0&&Ge(`Can't access output tensor data on index ${q}.`);let F=V/4,oe=s.HEAPU32[F++];ue=s.HEAPU32[F++];let $e=s.HEAPU32[F++],Ue=s.HEAPU32[F++],De=[];for(let We=0;We<Ue;We++)De.push(s.HEAPU32[$e/4+We]);s._OrtFree($e);let Ve=De.reduce((We,He)=>We*He,1);X=qt(oe);let St=u?.outputPreferredLocations[n[q]];if(X==="string"){if(St==="gpu-buffer")throw new Error("String tensor is not supported on GPU.");let We=[],He=ue/4;for(let Ot=0;Ot<Ve;Ot++){let Mt=s.HEAPU32[He++],Gt=Ot===Ve-1?void 0:s.HEAPU32[He]-Mt;We.push(s.UTF8ToString(Mt,Gt))}ne.push([X,De,We,"cpu"])}else if(St==="gpu-buffer"&&Ve>0){let We=s.jsepGetBuffer(ue),He=_a(oe);if(He===void 0||!Gi(X))throw new Error(`Unsupported data type: ${X}`);te=!0,ne.push([X,De,{gpuBuffer:We,download:s.jsepCreateDownloader(We,Ve*He,X),dispose:()=>{s._OrtReleaseTensor(D)}},"gpu-buffer"])}else{let We=Hi(X),He=new We(Ve);new Uint8Array(He.buffer,He.byteOffset,He.byteLength).set(s.HEAPU8.subarray(ue,ue+He.byteLength)),ne.push([X,De,He,"cpu"])}}finally{s.stackRestore(L),X==="string"&&ue&&s._free(ue),te||s._OrtReleaseTensor(D)}}return u&&s._OrtClearBoundOutputs(u.handle),ne}finally{s.stackRestore(E),w.forEach(U=>s._OrtReleaseTensor(U)),v.forEach(U=>s._OrtReleaseTensor(U)),S.forEach(U=>s._free(U)),g!==0&&s._OrtReleaseRunOptions(g),y.forEach(U=>s._free(U))}},wh=t=>{let e=rt(),r=Fr.get(t);if(!r)throw new Error("invalid session id");let n=r[0],a=e._OrtEndProfiling(n);a===0&&Ge("Can't get an profile file name."),e._OrtFree(a)},vh=t=>{let e=[];for(let r of t){let n=r[2];!Array.isArray(n)&&"buffer"in n&&e.push(n.buffer)}return e}}),L_=Dr((t,e)=>{e.exports='/*!\n * ONNX Runtime Web v1.17.1\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n"use strict";(()=>{var hn=Object.defineProperty;var Lu=Object.getOwnPropertyDescriptor;var Fu=Object.getOwnPropertyNames;var ju=Object.prototype.hasOwnProperty;var j=(e,t)=>()=>(e&&(t=e(e=0)),t);var dr=(e,t)=>()=>(t||e((t={exports:{}}).exports,t),t.exports),Br=(e,t)=>{for(var r in t)hn(e,r,{get:t[r],enumerable:!0})},qu=(e,t,r,o)=>{if(t&&typeof t=="object"||typeof t=="function")for(let n of Fu(t))!ju.call(e,n)&&n!==r&&hn(e,n,{get:()=>t[n],enumerable:!(o=Lu(t,n))||o.enumerable});return e};var Ht=e=>qu(hn({},"__esModule",{value:!0}),e);var gn={};Br(gn,{createReadStream:()=>xo,readFile:()=>Ku,readFileSync:()=>Yu});var Ku,Yu,xo,yn=j(()=>{Ku=void 0,Yu=void 0,xo=void 0});var bn={};Br(bn,{join:()=>Zu});var Zu,wn=j(()=>{Zu=void 0});var Io=dr((Co,vn)=>{"use strict";var _o=(()=>{var e=typeof document<"u"&&document.currentScript?document.currentScript.src:void 0;return typeof __filename<"u"&&(e=e||__filename),function(t={}){var r=t,o,n;r.ready=new Promise((d,m)=>{o=d,n=m}),r.mountExternalData=(d,m)=>{(r.Fa||(r.Fa=new Map)).set(d,m)},r.unmountExternalData=()=>{delete r.Fa},r.jsepInit=(d,m,v,C,B,H,q,le)=>{r.ab=d,r.Qa=m,r.Sa=v,r.La=C,r.Ra=B,r.sa=H,r.Ta=q,r.Ua=le,m=(J,re,se)=>(...we)=>{let _e=tt,P=re?.();we=J(...we);let ue=re?.();return P!==ue&&(J=ue,se(P),re=se=null),tt!=_e?xr():we},v=J=>async(...re)=>{try{if(r.Ea)throw Error("Session already started");let se=r.Ea={Va:re[0],errors:[]},we=await J(...re);if(r.Ea!==se)throw Error("Session mismatch");d.flush();let _e=se.errors;if(0<_e.length){let P=await Promise.all(_e);if(P=P.filter(ue=>ue),0<P.length)throw Error(P.join(`\n`))}return we}finally{r.Ea=null}},r._OrtRun=v(m(r._OrtRun,()=>r._OrtRun,J=>r._OrtRun=J)),r._OrtRunWithBinding=v(m(r._OrtRunWithBinding,()=>r._OrtRunWithBinding,J=>r._OrtRunWithBinding=J)),r._OrtBindInput=m(r._OrtBindInput,()=>r._OrtBindInput,J=>r._OrtBindInput=J),r.jsepRegisterBuffer=(J,re,se,we)=>d.registerBuffer(J,re,se,we),r.jsepUnregisterBuffers=J=>{d.unregisterBuffers(J)},r.jsepGetBuffer=J=>d.getBuffer(J),r.jsepCreateDownloader=(J,re,se)=>d.createDownloader(J,re,se)};var s=Object.assign({},r),u="./this.program",l=(d,m)=>{throw m},a=typeof window=="object",p=typeof importScripts=="function",h=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string",g="",b,w,y;if(h){var _=(yn(),Ht(gn)),I=(wn(),Ht(bn));g=p?I.dirname(g)+"/":__dirname+"/",b=(d,m)=>(d=We(d)?new URL(d):I.normalize(d),_.readFileSync(d,m?void 0:"utf8")),y=d=>(d=b(d,!0),d.buffer||(d=new Uint8Array(d)),d),w=(d,m,v,C=!0)=>{d=We(d)?new URL(d):I.normalize(d),_.readFile(d,C?void 0:"utf8",(B,H)=>{B?v(B):m(C?H.buffer:H)})},!r.thisProgram&&1<process.argv.length&&(u=process.argv[1].replace(/\\\\/g,"/")),process.argv.slice(2),l=(d,m)=>{throw process.exitCode=d,m},r.inspect=()=>"[Emscripten Module object]"}else(a||p)&&(p?g=self.location.href:typeof document<"u"&&document.currentScript&&(g=document.currentScript.src),e&&(g=e),g.indexOf("blob:")!==0?g=g.substr(0,g.replace(/[?#].*/,"").lastIndexOf("/")+1):g="",b=d=>{var m=new XMLHttpRequest;return m.open("GET",d,!1),m.send(null),m.responseText},p&&(y=d=>{var m=new XMLHttpRequest;return m.open("GET",d,!1),m.responseType="arraybuffer",m.send(null),new Uint8Array(m.response)}),w=(d,m,v)=>{var C=new XMLHttpRequest;C.open("GET",d,!0),C.responseType="arraybuffer",C.onload=()=>{C.status==200||C.status==0&&C.response?m(C.response):v()},C.onerror=v,C.send(null)});var $=console.log.bind(console),x=console.error.bind(console);Object.assign(r,s),s=null,typeof WebAssembly!="object"&&he("no native wasm support detected");var E,A=!1,z,R,V,T,N,te,Y;function K(){var d=E.buffer;r.HEAP8=R=new Int8Array(d),r.HEAP16=new Int16Array(d),r.HEAPU8=V=new Uint8Array(d),r.HEAPU16=new Uint16Array(d),r.HEAP32=T=new Int32Array(d),r.HEAPU32=N=new Uint32Array(d),r.HEAPF32=te=new Float32Array(d),r.HEAPF64=Y=new Float64Array(d)}var Q=[],Z=[],Ee=[],Pe=0,fe=null,Ie=null;function he(d){throw d="Aborted("+d+")",x(d),A=!0,z=1,d=new WebAssembly.RuntimeError(d+". Build with -sASSERTIONS for more info."),n(d),d}var ye=d=>d.startsWith("data:application/octet-stream;base64,"),We=d=>d.startsWith("file://"),De;if(De="ort-wasm-simd.wasm",!ye(De)){var Ge=De;De=r.locateFile?r.locateFile(Ge,g):g+Ge}function G(d){if(y)return y(d);throw"both async and sync fetching of the wasm failed"}function ee(d){if(a||p){if(typeof fetch=="function"&&!We(d))return fetch(d,{credentials:"same-origin"}).then(m=>{if(!m.ok)throw"failed to load wasm binary file at \'"+d+"\'";return m.arrayBuffer()}).catch(()=>G(d));if(w)return new Promise((m,v)=>{w(d,C=>m(new Uint8Array(C)),v)})}return Promise.resolve().then(()=>G(d))}function be(d,m,v){return ee(d).then(C=>WebAssembly.instantiate(C,m)).then(C=>C).then(v,C=>{x(`failed to asynchronously prepare wasm: ${C}`),he(C)})}function et(d,m){var v=De;return typeof WebAssembly.instantiateStreaming!="function"||ye(v)||We(v)||h||typeof fetch!="function"?be(v,d,m):fetch(v,{credentials:"same-origin"}).then(C=>WebAssembly.instantiateStreaming(C,d).then(m,function(B){return x(`wasm streaming compile failed: ${B}`),x("falling back to ArrayBuffer instantiation"),be(v,d,m)}))}var ze,Ue={931056:(d,m,v,C)=>{if(typeof r>"u"||!r.Fa)return 1;if(d=qe(d>>>0),d.startsWith("./")&&(d=d.substring(2)),d=r.Fa.get(d),!d)return 2;if(m>>>=0,v>>>=0,m+v>d.byteLength)return 3;try{return V.set(d.subarray(m,m+v),C>>>0>>>0),0}catch{return 4}},931557:d=>r.Qa(d),931590:d=>r.Sa(d),931622:(d,m,v)=>{r.La(d,m,v,!0)},931661:(d,m,v)=>{r.La(d,m,v)},931694:d=>{r.sa("Abs",d,void 0)},931745:d=>{r.sa("Neg",d,void 0)},931796:d=>{r.sa("Floor",d,void 0)},931849:d=>{r.sa("Ceil",d,void 0)},931901:d=>{r.sa("Reciprocal",d,void 0)},931959:d=>{r.sa("Sqrt",d,void 0)},932011:d=>{r.sa("Exp",d,void 0)},932062:d=>{r.sa("Erf",d,void 0)},932113:d=>{r.sa("Sigmoid",d,void 0)},932168:d=>{r.sa("Log",d,void 0)},932219:d=>{r.sa("Sin",d,void 0)},932270:d=>{r.sa("Cos",d,void 0)},932321:d=>{r.sa("Tan",d,void 0)},932372:d=>{r.sa("Asin",d,void 0)},932424:d=>{r.sa("Acos",d,void 0)},932476:d=>{r.sa("Atan",d,void 0)},932528:d=>{r.sa("Sinh",d,void 0)},932580:d=>{r.sa("Cosh",d,void 0)},932632:d=>{r.sa("Asinh",d,void 0)},932685:d=>{r.sa("Acosh",d,void 0)},932738:d=>{r.sa("Atanh",d,void 0)},932791:d=>{r.sa("Tanh",d,void 0)},932843:d=>{r.sa("Not",d,void 0)},932894:(d,m,v)=>{r.sa("Clip",d,{min:m,max:v})},932963:d=>{r.sa("Clip",d,void 0)},933015:(d,m)=>{r.sa("Elu",d,{alpha:m})},933073:d=>{r.sa("Relu",d,void 0)},933125:(d,m)=>{r.sa("LeakyRelu",d,{alpha:m})},933189:(d,m)=>{r.sa("ThresholdedRelu",d,{alpha:m})},933259:(d,m)=>{r.sa("Cast",d,{to:m})},933317:d=>{r.sa("Add",d,void 0)},933368:d=>{r.sa("Sub",d,void 0)},933419:d=>{r.sa("Mul",d,void 0)},933470:d=>{r.sa("Div",d,void 0)},933521:d=>{r.sa("Pow",d,void 0)},933572:d=>{r.sa("Equal",d,void 0)},933625:d=>{r.sa("Greater",d,void 0)},933680:d=>{r.sa("GreaterOrEqual",d,void 0)},933742:d=>{r.sa("Less",d,void 0)},933794:d=>{r.sa("LessOrEqual",d,void 0)},933853:(d,m,v,C,B)=>{r.sa("ReduceMean",d,{keepDims:!!m,noopWithEmptyAxes:!!v,axes:C?Array.from(T.subarray(C>>>0,B>>>0)):[]})},934012:(d,m,v,C,B)=>{r.sa("ReduceMax",d,{keepDims:!!m,noopWithEmptyAxes:!!v,axes:C?Array.from(T.subarray(C>>>0,B>>>0)):[]})},934170:(d,m,v,C,B)=>{r.sa("ReduceMin",d,{keepDims:!!m,noopWithEmptyAxes:!!v,axes:C?Array.from(T.subarray(C>>>0,B>>>0)):[]})},934328:(d,m,v,C,B)=>{r.sa("ReduceProd",d,{keepDims:!!m,noopWithEmptyAxes:!!v,axes:C?Array.from(T.subarray(C>>>0,B>>>0)):[]})},934487:(d,m,v,C,B)=>{r.sa("ReduceSum",d,{keepDims:!!m,noopWithEmptyAxes:!!v,axes:C?Array.from(T.subarray(C>>>0,B>>>0)):[]})},934645:(d,m,v,C,B)=>{r.sa("ReduceL1",d,{keepDims:!!m,noopWithEmptyAxes:!!v,axes:C?Array.from(T.subarray(C>>>0,B>>>0)):[]})},934802:(d,m,v,C,B)=>{r.sa("ReduceL2",d,{keepDims:!!m,noopWithEmptyAxes:!!v,axes:C?Array.from(T.subarray(C>>>0,B>>>0)):[]})},934959:(d,m,v,C,B)=>{r.sa("ReduceLogSum",d,{keepDims:!!m,noopWithEmptyAxes:!!v,axes:C?Array.from(T.subarray(C>>>0,B>>>0)):[]})},935120:(d,m,v,C,B)=>{r.sa("ReduceSumSquare",d,{keepDims:!!m,noopWithEmptyAxes:!!v,axes:C?Array.from(T.subarray(C>>>0,B>>>0)):[]})},935284:(d,m,v,C,B)=>{r.sa("ReduceLogSumExp",d,{keepDims:!!m,noopWithEmptyAxes:!!v,axes:C?Array.from(T.subarray(C>>>0,B>>>0)):[]})},935448:d=>{r.sa("Where",d,void 0)},935501:(d,m,v)=>{r.sa("Transpose",d,{perm:m?Array.from(T.subarray(m>>>0,v>>>0)):[]})},935609:(d,m,v,C,B,H,q,le,J,re,se,we,_e,P,ue)=>{r.sa("ConvTranspose",d,{format:J?"NHWC":"NCHW",autoPad:m,dilations:[v],group:C,kernel_shape:[B],pads:[H,q],strides:[le],wIsConst:()=>!!R[re>>>0],outputPadding:se?Array.from(T.subarray(se>>>0,we>>>0)):[],outputShape:_e?Array.from(T.subarray(_e>>>0,P>>>0)):[],activation:qe(ue)})},936011:(d,m,v,C,B,H,q,le,J,re,se,we,_e,P)=>{r.sa("ConvTranspose",d,{format:le?"NHWC":"NCHW",autoPad:m,dilations:Array.from(T.subarray(v>>>0,(v>>>0)+2>>>0)),group:C,kernelShape:Array.from(T.subarray(B>>>0,(B>>>0)+2>>>0)),pads:Array.from(T.subarray(H>>>0,(H>>>0)+4>>>0)),strides:Array.from(T.subarray(q>>>0,(q>>>0)+2>>>0)),wIsConst:()=>!!R[J>>>0],outputPadding:re?Array.from(T.subarray(re>>>0,se>>>0)):[],outputShape:we?Array.from(T.subarray(we>>>0,_e>>>0)):[],activation:qe(P)})},936576:(d,m,v,C,B,H,q,le,J,re,se,we,_e,P,ue)=>{r.sa("ConvTranspose",d,{format:J?"NHWC":"NCHW",autoPad:m,dilations:[v],group:C,kernel_shape:[B],pads:[H,q],strides:[le],wIsConst:()=>!!R[re>>>0],outputPadding:se?Array.from(T.subarray(se>>>0,we>>>0)):[],outputShape:_e?Array.from(T.subarray(_e>>>0,P>>>0)):[],activation:qe(ue)})},936978:(d,m,v,C,B,H,q,le,J,re,se,we,_e,P)=>{r.sa("ConvTranspose",d,{format:le?"NHWC":"NCHW",autoPad:m,dilations:Array.from(T.subarray(v>>>0,(v>>>0)+2>>>0)),group:C,kernelShape:Array.from(T.subarray(B>>>0,(B>>>0)+2>>>0)),pads:Array.from(T.subarray(H>>>0,(H>>>0)+4>>>0)),strides:Array.from(T.subarray(q>>>0,(q>>>0)+2>>>0)),wIsConst:()=>!!R[J>>>0],outputPadding:re?Array.from(T.subarray(re>>>0,se>>>0)):[],outputShape:we?Array.from(T.subarray(we>>>0,_e>>>0)):[],activation:qe(P)})},937543:(d,m)=>{r.sa("GlobalAveragePool",d,{format:m?"NHWC":"NCHW"})},937634:(d,m,v,C,B,H,q,le,J,re,se,we,_e,P,ue,Se)=>{r.sa("AveragePool",d,{format:Se?"NHWC":"NCHW",auto_pad:m,ceil_mode:v,count_include_pad:C,storage_order:B,dilations:[H,q],kernel_shape:[le,J],pads:[re,se,we,_e],strides:[P,ue]})},937918:(d,m)=>{r.sa("GlobalAveragePool",d,{format:m?"NHWC":"NCHW"})},938009:(d,m,v,C,B,H,q,le,J,re,se,we,_e,P,ue,Se)=>{r.sa("AveragePool",d,{format:Se?"NHWC":"NCHW",auto_pad:m,ceil_mode:v,count_include_pad:C,storage_order:B,dilations:[H,q],kernel_shape:[le,J],pads:[re,se,we,_e],strides:[P,ue]})},938293:(d,m)=>{r.sa("GlobalMaxPool",d,{format:m?"NHWC":"NCHW"})},938380:(d,m,v,C,B,H,q,le,J,re,se,we,_e,P,ue,Se)=>{r.sa("MaxPool",d,{format:Se?"NHWC":"NCHW",auto_pad:m,ceil_mode:v,count_include_pad:C,storage_order:B,dilations:[H,q],kernel_shape:[le,J],pads:[re,se,we,_e],strides:[P,ue]})},938660:(d,m)=>{r.sa("GlobalMaxPool",d,{format:m?"NHWC":"NCHW"})},938747:(d,m,v,C,B,H,q,le,J,re,se,we,_e,P,ue,Se)=>{r.sa("MaxPool",d,{format:Se?"NHWC":"NCHW",auto_pad:m,ceil_mode:v,count_include_pad:C,storage_order:B,dilations:[H,q],kernel_shape:[le,J],pads:[re,se,we,_e],strides:[P,ue]})},939027:(d,m,v,C,B)=>{r.sa("Gemm",d,{alpha:m,beta:v,transA:C,transB:B})},939131:d=>{r.sa("MatMul",d,void 0)},939185:(d,m,v,C)=>{r.sa("ArgMax",d,{keepDims:!!m,selectLastIndex:!!v,axis:C})},939293:(d,m,v,C)=>{r.sa("ArgMin",d,{keepDims:!!m,selectLastIndex:!!v,axis:C})},939401:(d,m)=>{r.sa("Softmax",d,{axis:m})},939464:(d,m)=>{r.sa("Concat",d,{axis:m})},939524:(d,m,v,C,B)=>{r.sa("Split",d,{axis:m,numOutputs:v,splitSizes:C?Array.from(T.subarray(C>>>0,B>>>0)):[]})},939664:d=>{r.sa("Expand",d,void 0)},939718:(d,m)=>{r.sa("Gather",d,{axis:Number(m)})},939789:(d,m)=>{r.sa("GatherElements",d,{axis:Number(m)})},939868:(d,m,v,C,B,H,q,le,J,re,se)=>{r.sa("Resize",d,{antialias:m,axes:v?Array.from(T.subarray(v>>>0,C>>>0)):[],coordinateTransformMode:qe(B),cubicCoeffA:H,excludeOutside:q,extrapolationValue:le,keepAspectRatioPolicy:qe(J),mode:qe(re),nearestMode:qe(se)})},940214:(d,m,v,C,B,H,q)=>{r.sa("Slice",d,{starts:m?Array.from(T.subarray(m>>>0,v>>>0)):[],ends:C?Array.from(T.subarray(C>>>0,B>>>0)):[],axes:H?Array.from(T.subarray(H>>>0,q>>>0)):[]})},940430:d=>{r.sa("Tile",d,void 0)},940482:(d,m,v)=>{r.sa("LayerNormalization",d,{axis:Number(m),epsilon:Number(v)})},940589:(d,m,v)=>{r.sa("InstanceNormalization",d,{epsilon:m,format:v?"NHWC":"NCHW"})},940703:(d,m,v)=>{r.sa("InstanceNormalization",d,{epsilon:m,format:v?"NHWC":"NCHW"})},940817:d=>{r.sa("Range",d,void 0)},940870:(d,m)=>{r.sa("Einsum",d,{equation:qe(m)})},940951:(d,m,v,C,B)=>{r.sa("Pad",d,{mode:m,value:v,pads:C?Array.from(T.subarray(C>>>0,B>>>0)):[]})},941078:(d,m,v,C,B,H)=>{r.sa("BatchNormalization",d,{epsilon:m,momentum:v,spatial:!!B,trainingMode:!!C,format:H?"NHWC":"NCHW"})},941247:(d,m,v,C,B,H)=>{r.sa("BatchNormalization",d,{epsilon:m,momentum:v,spatial:!!B,trainingMode:!!C,format:H?"NHWC":"NCHW"})},941416:(d,m,v)=>{r.sa("CumSum",d,{exclusive:Number(m),reverse:Number(v)})},941513:(d,m,v,C,B,H,q,le,J)=>{r.sa("Attention",d,{numHeads:m,isUnidirectional:v,maskFilterValue:C,scale:B,doRotary:H,qkvHiddenSizes:q?Array.from(T.subarray(Number(le)>>>0,Number(le)+q>>>0)):[],pastPresentShareBuffer:!!J})},941785:d=>{r.sa("Gelu",d,void 0)},941837:(d,m,v,C,B,H)=>{r.sa("MultiHeadAttention",d,{numHeads:m,isUnidirectional:v,maskFilterValue:C,scale:B,doRotary:H})},941996:d=>{r.sa("BiasAdd",d,void 0)},942051:d=>{r.sa("BiasSplitGelu",d,void 0)},942112:(d,m)=>{r.sa("SkipLayerNormalization",d,{epsilon:m})},942193:(d,m,v,C,B,H,q,le,J,re,se,we,_e)=>{r.sa("Conv",d,{format:J?"NHWC":"NCHW",auto_pad:m,dilations:[v],group:C,kernel_shape:[B],pads:H?Array.from(T.subarray(H>>>0,q>>>0)):[],strides:[le],w_is_const:()=>!!R[re>>>0],activation:qe(se),activation_params:we?Array.from(te.subarray(we>>>0,_e>>>0)):[]})},942563:(d,m,v,C,B,H,q,le,J,re,se,we,_e,P,ue,Se)=>{r.sa("Conv",d,{format:we?"NHWC":"NCHW",auto_pad:m,dilations:[v,C],group:B,kernel_shape:[H,q],pads:le?Array.from(T.subarray(le>>>0,J>>>0)):[],strides:[re,se],w_is_const:()=>!!R[_e>>>0],activation:qe(P),activation_params:ue?Array.from(te.subarray(ue>>>0,Se>>>0)):[]})},942954:d=>{r.Ta(d)},942988:(d,m)=>r.Ua(d,m,r.Ea.Va,r.Ea.errors)};function Me(d){this.name="ExitStatus",this.message=`Program terminated with exit(${d})`,this.status=d}function wt(d){this.Ja=d-24,this.Oa=function(m){N[this.Ja+4>>>2>>>0]=m},this.Na=function(m){N[this.Ja+8>>>2>>>0]=m},this.$a=function(m,v){this.Ma(),this.Oa(m),this.Na(v)},this.Ma=function(){N[this.Ja+16>>>2>>>0]=0}}var rt=0,Dt=0,At=typeof TextDecoder<"u"?new TextDecoder("utf8"):void 0,vt=(d,m,v)=>{m>>>=0;var C=m+v;for(v=m;d[v]&&!(v>=C);)++v;if(16<v-m&&d.buffer&&At)return At.decode(d.subarray(m,v));for(C="";m<v;){var B=d[m++];if(B&128){var H=d[m++]&63;if((B&224)==192)C+=String.fromCharCode((B&31)<<6|H);else{var q=d[m++]&63;B=(B&240)==224?(B&15)<<12|H<<6|q:(B&7)<<18|H<<12|q<<6|d[m++]&63,65536>B?C+=String.fromCharCode(B):(B-=65536,C+=String.fromCharCode(55296|B>>10,56320|B&1023))}}else C+=String.fromCharCode(B)}return C},qe=(d,m)=>(d>>>=0)?vt(V,d,m):"",qt=d=>{for(var m=0,v=0;v<d.length;++v){var C=d.charCodeAt(v);127>=C?m++:2047>=C?m+=2:55296<=C&&57343>=C?(m+=4,++v):m+=3}return m},Mt=(d,m,v,C)=>{if(v>>>=0,!(0<C))return 0;var B=v;C=v+C-1;for(var H=0;H<d.length;++H){var q=d.charCodeAt(H);if(55296<=q&&57343>=q){var le=d.charCodeAt(++H);q=65536+((q&1023)<<10)|le&1023}if(127>=q){if(v>=C)break;m[v++>>>0]=q}else{if(2047>=q){if(v+1>=C)break;m[v++>>>0]=192|q>>6}else{if(65535>=q){if(v+2>=C)break;m[v++>>>0]=224|q>>12}else{if(v+3>=C)break;m[v++>>>0]=240|q>>18,m[v++>>>0]=128|q>>12&63}m[v++>>>0]=128|q>>6&63}m[v++>>>0]=128|q&63}}return m[v>>>0]=0,v-B},$t=d=>d%4===0&&(d%100!==0||d%400===0),yt=[0,31,60,91,121,152,182,213,244,274,305,335],zt=[0,31,59,90,120,151,181,212,243,273,304,334],Ut=d=>{var m=qt(d)+1,v=Wt(m);return v&&Mt(d,V,v,m),v},Tt=[],Kt=(d,m)=>{Tt.length=0;for(var v;v=V[d++>>>0];){var C=v!=105;C&=v!=112,m+=C&&m%8?4:0,Tt.push(v==112?N[m>>>2>>>0]:v==105?T[m>>>2>>>0]:Y[m>>>3>>>0]),m+=C?8:4}return Tt},nt={},Yt=()=>{if(!Vt){var d={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:(typeof navigator=="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:u||"./this.program"},m;for(m in nt)nt[m]===void 0?delete d[m]:d[m]=nt[m];var v=[];for(m in d)v.push(`${m}=${d[m]}`);Vt=v}return Vt},Vt,Ye=[null,[],[]],br=[31,29,31,30,31,30,31,31,30,31,30,31],Oe=[31,28,31,30,31,30,31,31,30,31,30,31];function wr(d){var m=Array(qt(d)+1);return Mt(d,m,0,m.length),m}function Nt(d,m,v,C){function B(P,ue,Se){for(P=typeof P=="number"?P.toString():P||"";P.length<ue;)P=Se[0]+P;return P}function H(P,ue){return B(P,ue,"0")}function q(P,ue){function Se(Tr){return 0>Tr?-1:0<Tr?1:0}var st;return(st=Se(P.getFullYear()-ue.getFullYear()))===0&&(st=Se(P.getMonth()-ue.getMonth()))===0&&(st=Se(P.getDate()-ue.getDate())),st}function le(P){switch(P.getDay()){case 0:return new Date(P.getFullYear()-1,11,29);case 1:return P;case 2:return new Date(P.getFullYear(),0,3);case 3:return new Date(P.getFullYear(),0,2);case 4:return new Date(P.getFullYear(),0,1);case 5:return new Date(P.getFullYear()-1,11,31);case 6:return new Date(P.getFullYear()-1,11,30)}}function J(P){var ue=P.Ca;for(P=new Date(new Date(P.Da+1900,0,1).getTime());0<ue;){var Se=P.getMonth(),st=($t(P.getFullYear())?br:Oe)[Se];if(ue>st-P.getDate())ue-=st-P.getDate()+1,P.setDate(1),11>Se?P.setMonth(Se+1):(P.setMonth(0),P.setFullYear(P.getFullYear()+1));else{P.setDate(P.getDate()+ue);break}}return Se=new Date(P.getFullYear()+1,0,4),ue=le(new Date(P.getFullYear(),0,4)),Se=le(Se),0>=q(ue,P)?0>=q(Se,P)?P.getFullYear()+1:P.getFullYear():P.getFullYear()-1}d>>>=0,m>>>=0,v>>>=0,C>>>=0;var re=N[C+40>>>2>>>0];C={Ya:T[C>>>2>>>0],Xa:T[C+4>>>2>>>0],Ga:T[C+8>>>2>>>0],Ka:T[C+12>>>2>>>0],Ha:T[C+16>>>2>>>0],Da:T[C+20>>>2>>>0],xa:T[C+24>>>2>>>0],Ca:T[C+28>>>2>>>0],bb:T[C+32>>>2>>>0],Wa:T[C+36>>>2>>>0],Za:re?qe(re):""},v=qe(v),re={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(var se in re)v=v.replace(new RegExp(se,"g"),re[se]);var we="Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),_e="January February March April May June July August September October November December".split(" ");re={"%a":P=>we[P.xa].substring(0,3),"%A":P=>we[P.xa],"%b":P=>_e[P.Ha].substring(0,3),"%B":P=>_e[P.Ha],"%C":P=>H((P.Da+1900)/100|0,2),"%d":P=>H(P.Ka,2),"%e":P=>B(P.Ka,2," "),"%g":P=>J(P).toString().substring(2),"%G":P=>J(P),"%H":P=>H(P.Ga,2),"%I":P=>(P=P.Ga,P==0?P=12:12<P&&(P-=12),H(P,2)),"%j":P=>{for(var ue=0,Se=0;Se<=P.Ha-1;ue+=($t(P.Da+1900)?br:Oe)[Se++]);return H(P.Ka+ue,3)},"%m":P=>H(P.Ha+1,2),"%M":P=>H(P.Xa,2),"%n":()=>`\n`,"%p":P=>0<=P.Ga&&12>P.Ga?"AM":"PM","%S":P=>H(P.Ya,2),"%t":()=>"	","%u":P=>P.xa||7,"%U":P=>H(Math.floor((P.Ca+7-P.xa)/7),2),"%V":P=>{var ue=Math.floor((P.Ca+7-(P.xa+6)%7)/7);if(2>=(P.xa+371-P.Ca-2)%7&&ue++,ue)ue==53&&(Se=(P.xa+371-P.Ca)%7,Se==4||Se==3&&$t(P.Da)||(ue=1));else{ue=52;var Se=(P.xa+7-P.Ca-1)%7;(Se==4||Se==5&&$t(P.Da%400-1))&&ue++}return H(ue,2)},"%w":P=>P.xa,"%W":P=>H(Math.floor((P.Ca+7-(P.xa+6)%7)/7),2),"%y":P=>(P.Da+1900).toString().substring(2),"%Y":P=>P.Da+1900,"%z":P=>{P=P.Wa;var ue=0<=P;return P=Math.abs(P)/60,(ue?"+":"-")+("0000"+(P/60*100+P%60)).slice(-4)},"%Z":P=>P.Za,"%%":()=>"%"},v=v.replace(/%%/g,"\\0\\0");for(se in re)v.includes(se)&&(v=v.replace(new RegExp(se,"g"),re[se](C)));return v=v.replace(/\\0\\0/g,"%"),se=wr(v),se.length>m?0:(R.set(se,d>>>0),se.length-1)}var St=d=>{try{d()}catch(m){he(m)}};function un(){var d=ae,m={};for(let[v,C]of Object.entries(d))m[v]=typeof C=="function"?function(){bt.push(v);try{return C.apply(null,arguments)}finally{A||(bt.pop(),tt&&ot===1&&bt.length===0&&(ot=0,St(ir),typeof Fibers<"u"&&Fibers.cb()))}}:C;return m}var ot=0,tt=null,de=0,bt=[],Zt={},vr={},$r=0,Qt=null,Sr=[];function xr(){return new Promise((d,m)=>{Qt={resolve:d,reject:m}})}function _r(){var d=Wt(65548),m=d+12;N[d>>>2>>>0]=m,N[d+4>>>2>>>0]=m+65536,m=bt[0];var v=Zt[m];return v===void 0&&(v=$r++,Zt[m]=v,vr[v]=m),T[d+8>>>2>>>0]=v,d}function Cr(d){if(!A){if(ot===0){var m=!1,v=!1;d((C=0)=>{if(!A&&(de=C,m=!0,v)){ot=2,St(()=>sr(tt)),typeof Browser<"u"&&Browser.Ia.Pa&&Browser.Ia.resume(),C=!1;try{var B=(0,ae[vr[T[tt+8>>>2>>>0]]])()}catch(le){B=le,C=!0}var H=!1;if(!tt){var q=Qt;q&&(Qt=null,(C?q.reject:q.resolve)(B),H=!0)}if(C&&!H)throw B}}),v=!0,m||(ot=1,tt=_r(),typeof Browser<"u"&&Browser.Ia.Pa&&Browser.Ia.pause(),St(()=>ar(tt)))}else ot===2?(ot=0,St(ur),er(tt),tt=null,Sr.forEach(C=>{if(!A)try{C();try{z=z=C=z,r.onExit?.(C),A=!0,l(C,new Me(C))}catch(B){B instanceof Me||B=="unwind"||l(1,B)}}catch(B){B instanceof Me||B=="unwind"||l(1,B)}})):he(`invalid state: ${ot}`);return de}}function Xt(d){return Cr(m=>{d().then(m)})}var Ir={n:function(d,m,v){return Xt(async()=>{await r.Ra(d,m,v)})},a:function(d,m,v){throw d>>>=0,new wt(d).$a(m>>>0,v>>>0),rt=d,Dt++,rt},g:function(){return 0},J:function(){},A:function(){},C:function(){},L:function(){return 0},H:function(){},D:function(){},G:function(){},l:function(){},B:function(){},y:function(){},I:function(){},z:function(){},m:()=>1,q:function(d,m,v){d=m+2097152>>>0<4194305-!!d?(d>>>0)+4294967296*m:NaN,v>>>=0,d=new Date(1e3*d),T[v>>>2>>>0]=d.getUTCSeconds(),T[v+4>>>2>>>0]=d.getUTCMinutes(),T[v+8>>>2>>>0]=d.getUTCHours(),T[v+12>>>2>>>0]=d.getUTCDate(),T[v+16>>>2>>>0]=d.getUTCMonth(),T[v+20>>>2>>>0]=d.getUTCFullYear()-1900,T[v+24>>>2>>>0]=d.getUTCDay(),T[v+28>>>2>>>0]=(d.getTime()-Date.UTC(d.getUTCFullYear(),0,1,0,0,0,0))/864e5|0},r:function(d,m,v){d=m+2097152>>>0<4194305-!!d?(d>>>0)+4294967296*m:NaN,v>>>=0,d=new Date(1e3*d),T[v>>>2>>>0]=d.getSeconds(),T[v+4>>>2>>>0]=d.getMinutes(),T[v+8>>>2>>>0]=d.getHours(),T[v+12>>>2>>>0]=d.getDate(),T[v+16>>>2>>>0]=d.getMonth(),T[v+20>>>2>>>0]=d.getFullYear()-1900,T[v+24>>>2>>>0]=d.getDay(),T[v+28>>>2>>>0]=($t(d.getFullYear())?yt:zt)[d.getMonth()]+d.getDate()-1|0,T[v+36>>>2>>>0]=-(60*d.getTimezoneOffset()),m=new Date(d.getFullYear(),6,1).getTimezoneOffset();var C=new Date(d.getFullYear(),0,1).getTimezoneOffset();T[v+32>>>2>>>0]=(m!=C&&d.getTimezoneOffset()==Math.min(C,m))|0},s:function(d){d>>>=0;var m=new Date(T[d+20>>>2>>>0]+1900,T[d+16>>>2>>>0],T[d+12>>>2>>>0],T[d+8>>>2>>>0],T[d+4>>>2>>>0],T[d>>>2>>>0],0),v=T[d+32>>>2>>>0],C=m.getTimezoneOffset(),B=new Date(m.getFullYear(),6,1).getTimezoneOffset(),H=new Date(m.getFullYear(),0,1).getTimezoneOffset(),q=Math.min(H,B);return 0>v?T[d+32>>>2>>>0]=+(B!=H&&q==C):0<v!=(q==C)&&(B=Math.max(H,B),m.setTime(m.getTime()+6e4*((0<v?q:B)-C))),T[d+24>>>2>>>0]=m.getDay(),T[d+28>>>2>>>0]=($t(m.getFullYear())?yt:zt)[m.getMonth()]+m.getDate()-1|0,T[d>>>2>>>0]=m.getSeconds(),T[d+4>>>2>>>0]=m.getMinutes(),T[d+8>>>2>>>0]=m.getHours(),T[d+12>>>2>>>0]=m.getDate(),T[d+16>>>2>>>0]=m.getMonth(),T[d+20>>>2>>>0]=m.getYear(),d=m.getTime(),isNaN(d)?(T[Jt()>>>2>>>0]=61,d=-1):d/=1e3,tr((ze=d,1<=+Math.abs(ze)?0<ze?+Math.floor(ze/4294967296)>>>0:~~+Math.ceil((ze-+(~~ze>>>0))/4294967296)>>>0:0)),d>>>0},o:function(){return-52},p:function(){},w:function(d,m,v){function C(J){return(J=J.toTimeString().match(/\\(([A-Za-z ]+)\\)$/))?J[1]:"GMT"}v>>>=0;var B=new Date().getFullYear(),H=new Date(B,0,1),q=new Date(B,6,1);B=H.getTimezoneOffset();var le=q.getTimezoneOffset();N[d>>>0>>>2>>>0]=60*Math.max(B,le),T[m>>>0>>>2>>>0]=+(B!=le),d=C(H),m=C(q),d=Ut(d),m=Ut(m),le<B?(N[v>>>2>>>0]=d,N[v+4>>>2>>>0]=m):(N[v>>>2>>>0]=m,N[v+4>>>2>>>0]=d)},e:()=>{he("")},b:function(d,m,v){return d>>>=0,m=Kt(m>>>0,v>>>0),Ue[d].apply(null,m)},i:function(d,m,v){return d>>>=0,m=Kt(m>>>0,v>>>0),Ue[d].apply(null,m)},h:()=>Date.now(),x:function(){return 4294901760},c:()=>performance.now(),K:function(d,m,v){return m>>>=0,V.copyWithin(d>>>0>>>0,m>>>0,m+(v>>>0)>>>0)},u:function(d){d>>>=0;var m=V.length;if(4294901760<d)return!1;for(var v=1;4>=v;v*=2){var C=m*(1+.2/v);C=Math.min(C,d+100663296);var B=Math;C=Math.max(d,C);e:{B=(B.min.call(B,4294901760,C+(65536-C%65536)%65536)-E.buffer.byteLength+65535)/65536;try{E.grow(B),K();var H=1;break e}catch{}H=void 0}if(H)return!0}return!1},E:function(d,m){d>>>=0,m>>>=0;var v=0;return Yt().forEach((C,B)=>{var H=m+v;for(B=N[d+4*B>>>2>>>0]=H,H=0;H<C.length;++H)R[B++>>>0>>>0]=C.charCodeAt(H);R[B>>>0>>>0]=0,v+=C.length+1}),0},F:function(d,m){d>>>=0,m>>>=0;var v=Yt();N[d>>>2>>>0]=v.length;var C=0;return v.forEach(B=>C+=B.length+1),N[m>>>2>>>0]=C,0},f:()=>52,k:function(){return 52},t:function(){return 70},j:function(d,m,v,C){m>>>=0,v>>>=0,C>>>=0;for(var B=0,H=0;H<v;H++){var q=N[m>>>2>>>0],le=N[m+4>>>2>>>0];m+=8;for(var J=0;J<le;J++){var re=V[q+J>>>0],se=Ye[d];re===0||re===10?((d===1?$:x)(vt(se,0)),se.length=0):se.push(re)}B+=le}return N[C>>>2>>>0]=B,0},v:Nt,d:function(d,m,v,C){return Nt(d>>>0,m>>>0,v>>>0,C>>>0)}},ae=function(){function d(v){return ae=v.exports,ae=un(),ae=Ar(),E=ae.M,K(),Z.unshift(ae.N),Pe--,Pe==0&&(fe!==null&&(clearInterval(fe),fe=null),Ie&&(v=Ie,Ie=null,v())),ae}var m={a:Ir};if(Pe++,r.instantiateWasm)try{return r.instantiateWasm(m,d)}catch(v){x(`Module.instantiateWasm callback failed with error: ${v}`),n(v)}return et(m,function(v){d(v.instance)}).catch(n),{}}();r._OrtInit=(d,m)=>(r._OrtInit=ae.O)(d,m),r._OrtGetLastError=(d,m)=>(r._OrtGetLastError=ae.P)(d,m),r._OrtCreateSessionOptions=(d,m,v,C,B,H,q,le,J,re)=>(r._OrtCreateSessionOptions=ae.Q)(d,m,v,C,B,H,q,le,J,re),r._OrtAppendExecutionProvider=(d,m)=>(r._OrtAppendExecutionProvider=ae.R)(d,m),r._OrtAddFreeDimensionOverride=(d,m,v)=>(r._OrtAddFreeDimensionOverride=ae.S)(d,m,v),r._OrtAddSessionConfigEntry=(d,m,v)=>(r._OrtAddSessionConfigEntry=ae.T)(d,m,v),r._OrtReleaseSessionOptions=d=>(r._OrtReleaseSessionOptions=ae.U)(d),r._OrtCreateSession=(d,m,v)=>(r._OrtCreateSession=ae.V)(d,m,v),r._OrtReleaseSession=d=>(r._OrtReleaseSession=ae.W)(d),r._OrtGetInputOutputCount=(d,m,v)=>(r._OrtGetInputOutputCount=ae.X)(d,m,v),r._OrtGetInputName=(d,m)=>(r._OrtGetInputName=ae.Y)(d,m),r._OrtGetOutputName=(d,m)=>(r._OrtGetOutputName=ae.Z)(d,m),r._OrtFree=d=>(r._OrtFree=ae._)(d),r._OrtCreateTensor=(d,m,v,C,B,H)=>(r._OrtCreateTensor=ae.$)(d,m,v,C,B,H),r._OrtGetTensorData=(d,m,v,C,B)=>(r._OrtGetTensorData=ae.aa)(d,m,v,C,B),r._OrtReleaseTensor=d=>(r._OrtReleaseTensor=ae.ba)(d),r._OrtCreateRunOptions=(d,m,v,C)=>(r._OrtCreateRunOptions=ae.ca)(d,m,v,C),r._OrtAddRunConfigEntry=(d,m,v)=>(r._OrtAddRunConfigEntry=ae.da)(d,m,v),r._OrtReleaseRunOptions=d=>(r._OrtReleaseRunOptions=ae.ea)(d),r._OrtCreateBinding=d=>(r._OrtCreateBinding=ae.fa)(d),r._OrtBindInput=(d,m,v)=>(r._OrtBindInput=ae.ga)(d,m,v),r._OrtBindOutput=(d,m,v,C)=>(r._OrtBindOutput=ae.ha)(d,m,v,C),r._OrtClearBoundOutputs=d=>(r._OrtClearBoundOutputs=ae.ia)(d),r._OrtReleaseBinding=d=>(r._OrtReleaseBinding=ae.ja)(d),r._OrtRunWithBinding=(d,m,v,C,B)=>(r._OrtRunWithBinding=ae.ka)(d,m,v,C,B),r._OrtRun=(d,m,v,C,B,H,q,le)=>(r._OrtRun=ae.la)(d,m,v,C,B,H,q,le),r._OrtEndProfiling=d=>(r._OrtEndProfiling=ae.ma)(d),r._JsepOutput=(d,m,v)=>(r._JsepOutput=ae.na)(d,m,v),r._JsepGetNodeName=d=>(r._JsepGetNodeName=ae.oa)(d);var Jt=()=>(Jt=ae.pa)(),Wt=r._malloc=d=>(Wt=r._malloc=ae.qa)(d),er=r._free=d=>(er=r._free=ae.ra)(d),tr=d=>(tr=ae.ta)(d),rr=()=>(rr=ae.ua)(),nr=d=>(nr=ae.va)(d),or=d=>(or=ae.wa)(d),ar=d=>(ar=ae.ya)(d),ir=()=>(ir=ae.za)(),sr=d=>(sr=ae.Aa)(d),ur=()=>(ur=ae.Ba)();r.___start_em_js=943100,r.___stop_em_js=943261;function Ar(){var d=ae;d=Object.assign({},d);var m=C=>()=>C()>>>0,v=C=>B=>C(B)>>>0;return d.pa=m(d.pa),d.qa=v(d.qa),d.ua=m(d.ua),d.wa=v(d.wa),d}r.stackAlloc=or,r.stackSave=rr,r.stackRestore=nr,r.UTF8ToString=qe,r.stringToUTF8=(d,m,v)=>Mt(d,V,m,v),r.lengthBytesUTF8=qt;var xt;Ie=function d(){xt||Et(),xt||(Ie=d)};function Et(){if(!(0<Pe)){if(r.preRun)for(typeof r.preRun=="function"&&(r.preRun=[r.preRun]);r.preRun.length;){var d=r.preRun.shift();Q.unshift(d)}for(;0<Q.length;)Q.shift()(r);if(!(0<Pe||xt||(xt=!0,r.calledRun=!0,A))){for(;0<Z.length;)Z.shift()(r);for(o(r);0<Ee.length;)Ee.shift()(r)}}}return Et(),t.ready}})();typeof Co=="object"&&typeof vn=="object"?vn.exports=_o:typeof define=="function"&&define.amd&&define([],()=>_o)});var Ao=dr(()=>{});var To=dr(()=>{});var Eo={};Br(Eo,{cpus:()=>Qu});var Qu,Oo=j(()=>{Qu=void 0});var Ro=dr((ko,$n)=>{"use strict";var Po=(()=>{var e=typeof document<"u"&&document.currentScript?document.currentScript.src:void 0;return typeof __filename<"u"&&(e=e||__filename),function(t={}){function r(){return Q.buffer!=fe.buffer&&Ge(),fe}function o(){return Q.buffer!=fe.buffer&&Ge(),Ie}function n(){return Q.buffer!=fe.buffer&&Ge(),he}function s(){return Q.buffer!=fe.buffer&&Ge(),ye}function u(){return Q.buffer!=fe.buffer&&Ge(),We}function l(){return Q.buffer!=fe.buffer&&Ge(),De}var a=t,p,h;a.ready=new Promise((i,c)=>{p=i,h=c}),a.mountExternalData=(i,c)=>{(a.cb||(a.cb=new Map)).set(i,c)},a.unmountExternalData=()=>{delete a.cb},a.jsepInit=(i,c,f,S,O,D,W,ie)=>{a.Mb=i,a.wb=c,a.yb=f,a.kb=S,a.xb=O,a.Ea=D,a.zb=W,a.Ab=ie,c=(ne,oe,pe)=>(...xe)=>{let Te=ut,k=oe?.();xe=ne(...xe);let me=oe?.();return k!==me&&(ne=me,pe(k),oe=pe=null),ut!=Te?Mu():xe},f=ne=>async(...oe)=>{try{if(a.bb)throw Error("Session already started");let pe=a.bb={Cb:oe[0],errors:[]},xe=await ne(...oe);if(a.bb!==pe)throw Error("Session mismatch");i.flush();let Te=pe.errors;if(0<Te.length){let k=await Promise.all(Te);if(k=k.filter(me=>me),0<k.length)throw Error(k.join(`\n`))}return xe}finally{a.bb=null}},a._OrtRun=f(c(a._OrtRun,()=>a._OrtRun,ne=>a._OrtRun=ne)),a._OrtRunWithBinding=f(c(a._OrtRunWithBinding,()=>a._OrtRunWithBinding,ne=>a._OrtRunWithBinding=ne)),a._OrtBindInput=c(a._OrtBindInput,()=>a._OrtBindInput,ne=>a._OrtBindInput=ne),a.jsepRegisterBuffer=(ne,oe,pe,xe)=>i.registerBuffer(ne,oe,pe,xe),a.jsepUnregisterBuffers=ne=>{i.unregisterBuffers(ne)},a.jsepGetBuffer=ne=>i.getBuffer(ne),a.jsepCreateDownloader=(ne,oe,pe)=>i.createDownloader(ne,oe,pe)};var g=Object.assign({},a),b="./this.program",w=(i,c)=>{throw c},y=typeof window=="object",_=typeof importScripts=="function",I=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string",$=a.ENVIRONMENT_IS_PTHREAD||!1,x="";function E(i){return a.locateFile?a.locateFile(i,x):x+i}var A,z,R;if(I){var V=(yn(),Ht(gn)),T=(wn(),Ht(bn));x=_?T.dirname(x)+"/":__dirname+"/",A=(c,f)=>(c=At(c)?new URL(c):T.normalize(c),V.readFileSync(c,f?void 0:"utf8")),R=c=>(c=A(c,!0),c.buffer||(c=new Uint8Array(c)),c),z=(c,f,S,O=!0)=>{c=At(c)?new URL(c):T.normalize(c),V.readFile(c,O?void 0:"utf8",(D,W)=>{D?S(D):f(O?W.buffer:W)})},!a.thisProgram&&1<process.argv.length&&(b=process.argv[1].replace(/\\\\/g,"/")),process.argv.slice(2),w=(c,f)=>{throw process.exitCode=c,f},a.inspect=()=>"[Emscripten Module object]";let i;try{i=Ao()}catch(c){throw console.error(\'The "worker_threads" module is not supported in this node.js build - perhaps a newer version is needed?\'),c}global.Worker=i.Worker}else(y||_)&&(_?x=self.location.href:typeof document<"u"&&document.currentScript&&(x=document.currentScript.src),typeof e<"u"&&e&&(x=e),x.indexOf("blob:")!==0?x=x.substr(0,x.replace(/[?#].*/,"").lastIndexOf("/")+1):x="",I||(A=i=>{var c=new XMLHttpRequest;return c.open("GET",i,!1),c.send(null),c.responseText},_&&(R=i=>{var c=new XMLHttpRequest;return c.open("GET",i,!1),c.responseType="arraybuffer",c.send(null),new Uint8Array(c.response)}),z=(i,c,f)=>{var S=new XMLHttpRequest;S.open("GET",i,!0),S.responseType="arraybuffer",S.onload=()=>{S.status==200||S.status==0&&S.response?c(S.response):f()},S.onerror=f,S.send(null)}));I&&typeof performance>"u"&&(global.performance=To().performance);var N=console.log.bind(console),te=console.error.bind(console);I&&(N=(...i)=>V.writeSync(1,i.join(" ")+`\n`),te=(...i)=>V.writeSync(2,i.join(" ")+`\n`));var Y=N,K=te;Object.assign(a,g),g=null,typeof WebAssembly!="object"&&rt("no native wasm support detected");var Q,Z,Ee=!1,Pe,fe,Ie,he,ye,We,De;function Ge(){var i=Q.buffer;a.HEAP8=fe=new Int8Array(i),a.HEAP16=new Int16Array(i),a.HEAPU8=Ie=new Uint8Array(i),a.HEAPU16=new Uint16Array(i),a.HEAP32=he=new Int32Array(i),a.HEAPU32=ye=new Uint32Array(i),a.HEAPF32=We=new Float32Array(i),a.HEAPF64=De=new Float64Array(i)}var G=16777216;if($)Q=a.wasmMemory;else if(a.wasmMemory)Q=a.wasmMemory;else if(Q=new WebAssembly.Memory({initial:G/65536,maximum:65536,shared:!0}),!(Q.buffer instanceof SharedArrayBuffer))throw K("requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag"),I&&K("(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and/or recent version)"),Error("bad memory");Ge(),G=Q.buffer.byteLength;var ee=[],be=[],et=[],ze=0,Ue=null,Me=null;function wt(){if(ze--,ze==0&&(Ue!==null&&(clearInterval(Ue),Ue=null),Me)){var i=Me;Me=null,i()}}function rt(i){throw i="Aborted("+i+")",K(i),Ee=!0,Pe=1,i=new WebAssembly.RuntimeError(i+". Build with -sASSERTIONS for more info."),h(i),i}var Dt=i=>i.startsWith("data:application/octet-stream;base64,"),At=i=>i.startsWith("file://"),vt;vt="ort-wasm-simd-threaded.wasm",Dt(vt)||(vt=E(vt));function qe(i){if(R)return R(i);throw"both async and sync fetching of the wasm failed"}function qt(i){if(y||_){if(typeof fetch=="function"&&!At(i))return fetch(i,{credentials:"same-origin"}).then(c=>{if(!c.ok)throw"failed to load wasm binary file at \'"+i+"\'";return c.arrayBuffer()}).catch(()=>qe(i));if(z)return new Promise((c,f)=>{z(i,S=>c(new Uint8Array(S)),f)})}return Promise.resolve().then(()=>qe(i))}function Mt(i,c,f){return qt(i).then(S=>WebAssembly.instantiate(S,c)).then(S=>S).then(f,S=>{K(`failed to asynchronously prepare wasm: ${S}`),rt(S)})}function $t(i,c){var f=vt;return typeof WebAssembly.instantiateStreaming!="function"||Dt(f)||At(f)||I||typeof fetch!="function"?Mt(f,i,c):fetch(f,{credentials:"same-origin"}).then(S=>WebAssembly.instantiateStreaming(S,i).then(c,function(O){return K(`wasm streaming compile failed: ${O}`),K("falling back to ArrayBuffer instantiation"),Mt(f,i,c)}))}var yt,zt={932428:(i,c,f,S)=>{if(typeof a>"u"||!a.cb)return 1;if(i=Ye(i>>>0),i.startsWith("./")&&(i=i.substring(2)),i=a.cb.get(i),!i)return 2;if(c>>>=0,f>>>=0,S>>>=0,c+f>i.byteLength)return 3;try{return o().set(i.subarray(c,c+f),S>>>0),0}catch{return 4}},932929:i=>a.wb(i),932962:i=>a.yb(i),932994:(i,c,f)=>{a.kb(i,c,f,!0)},933033:(i,c,f)=>{a.kb(i,c,f)},933066:i=>{a.Ea("Abs",i,void 0)},933117:i=>{a.Ea("Neg",i,void 0)},933168:i=>{a.Ea("Floor",i,void 0)},933221:i=>{a.Ea("Ceil",i,void 0)},933273:i=>{a.Ea("Reciprocal",i,void 0)},933331:i=>{a.Ea("Sqrt",i,void 0)},933383:i=>{a.Ea("Exp",i,void 0)},933434:i=>{a.Ea("Erf",i,void 0)},933485:i=>{a.Ea("Sigmoid",i,void 0)},933540:i=>{a.Ea("Log",i,void 0)},933591:i=>{a.Ea("Sin",i,void 0)},933642:i=>{a.Ea("Cos",i,void 0)},933693:i=>{a.Ea("Tan",i,void 0)},933744:i=>{a.Ea("Asin",i,void 0)},933796:i=>{a.Ea("Acos",i,void 0)},933848:i=>{a.Ea("Atan",i,void 0)},933900:i=>{a.Ea("Sinh",i,void 0)},933952:i=>{a.Ea("Cosh",i,void 0)},934004:i=>{a.Ea("Asinh",i,void 0)},934057:i=>{a.Ea("Acosh",i,void 0)},934110:i=>{a.Ea("Atanh",i,void 0)},934163:i=>{a.Ea("Tanh",i,void 0)},934215:i=>{a.Ea("Not",i,void 0)},934266:(i,c,f)=>{a.Ea("Clip",i,{min:c,max:f})},934335:i=>{a.Ea("Clip",i,void 0)},934387:(i,c)=>{a.Ea("Elu",i,{alpha:c})},934445:i=>{a.Ea("Relu",i,void 0)},934497:(i,c)=>{a.Ea("LeakyRelu",i,{alpha:c})},934561:(i,c)=>{a.Ea("ThresholdedRelu",i,{alpha:c})},934631:(i,c)=>{a.Ea("Cast",i,{to:c})},934689:i=>{a.Ea("Add",i,void 0)},934740:i=>{a.Ea("Sub",i,void 0)},934791:i=>{a.Ea("Mul",i,void 0)},934842:i=>{a.Ea("Div",i,void 0)},934893:i=>{a.Ea("Pow",i,void 0)},934944:i=>{a.Ea("Equal",i,void 0)},934997:i=>{a.Ea("Greater",i,void 0)},935052:i=>{a.Ea("GreaterOrEqual",i,void 0)},935114:i=>{a.Ea("Less",i,void 0)},935166:i=>{a.Ea("LessOrEqual",i,void 0)},935225:(i,c,f,S,O)=>{a.Ea("ReduceMean",i,{keepDims:!!c,noopWithEmptyAxes:!!f,axes:S?Array.from(n().subarray(S>>>0,O>>>0)):[]})},935384:(i,c,f,S,O)=>{a.Ea("ReduceMax",i,{keepDims:!!c,noopWithEmptyAxes:!!f,axes:S?Array.from(n().subarray(S>>>0,O>>>0)):[]})},935542:(i,c,f,S,O)=>{a.Ea("ReduceMin",i,{keepDims:!!c,noopWithEmptyAxes:!!f,axes:S?Array.from(n().subarray(S>>>0,O>>>0)):[]})},935700:(i,c,f,S,O)=>{a.Ea("ReduceProd",i,{keepDims:!!c,noopWithEmptyAxes:!!f,axes:S?Array.from(n().subarray(S>>>0,O>>>0)):[]})},935859:(i,c,f,S,O)=>{a.Ea("ReduceSum",i,{keepDims:!!c,noopWithEmptyAxes:!!f,axes:S?Array.from(n().subarray(S>>>0,O>>>0)):[]})},936017:(i,c,f,S,O)=>{a.Ea("ReduceL1",i,{keepDims:!!c,noopWithEmptyAxes:!!f,axes:S?Array.from(n().subarray(S>>>0,O>>>0)):[]})},936174:(i,c,f,S,O)=>{a.Ea("ReduceL2",i,{keepDims:!!c,noopWithEmptyAxes:!!f,axes:S?Array.from(n().subarray(S>>>0,O>>>0)):[]})},936331:(i,c,f,S,O)=>{a.Ea("ReduceLogSum",i,{keepDims:!!c,noopWithEmptyAxes:!!f,axes:S?Array.from(n().subarray(S>>>0,O>>>0)):[]})},936492:(i,c,f,S,O)=>{a.Ea("ReduceSumSquare",i,{keepDims:!!c,noopWithEmptyAxes:!!f,axes:S?Array.from(n().subarray(S>>>0,O>>>0)):[]})},936656:(i,c,f,S,O)=>{a.Ea("ReduceLogSumExp",i,{keepDims:!!c,noopWithEmptyAxes:!!f,axes:S?Array.from(n().subarray(S>>>0,O>>>0)):[]})},936820:i=>{a.Ea("Where",i,void 0)},936873:(i,c,f)=>{a.Ea("Transpose",i,{perm:c?Array.from(n().subarray(c>>>0,f>>>0)):[]})},936981:(i,c,f,S,O,D,W,ie,ne,oe,pe,xe,Te,k,me)=>{a.Ea("ConvTranspose",i,{format:ne?"NHWC":"NCHW",autoPad:c,dilations:[f],group:S,kernel_shape:[O],pads:[D,W],strides:[ie],wIsConst:()=>!!r()[oe>>>0],outputPadding:pe?Array.from(n().subarray(pe>>>0,xe>>>0)):[],outputShape:Te?Array.from(n().subarray(Te>>>0,k>>>0)):[],activation:Ye(me)})},937383:(i,c,f,S,O,D,W,ie,ne,oe,pe,xe,Te,k)=>{a.Ea("ConvTranspose",i,{format:ie?"NHWC":"NCHW",autoPad:c,dilations:Array.from(n().subarray(f>>>0,(f>>>0)+2>>>0)),group:S,kernelShape:Array.from(n().subarray(O>>>0,(O>>>0)+2>>>0)),pads:Array.from(n().subarray(D>>>0,(D>>>0)+4>>>0)),strides:Array.from(n().subarray(W>>>0,(W>>>0)+2>>>0)),wIsConst:()=>!!r()[ne>>>0],outputPadding:oe?Array.from(n().subarray(oe>>>0,pe>>>0)):[],outputShape:xe?Array.from(n().subarray(xe>>>0,Te>>>0)):[],activation:Ye(k)})},937948:(i,c,f,S,O,D,W,ie,ne,oe,pe,xe,Te,k,me)=>{a.Ea("ConvTranspose",i,{format:ne?"NHWC":"NCHW",autoPad:c,dilations:[f],group:S,kernel_shape:[O],pads:[D,W],strides:[ie],wIsConst:()=>!!r()[oe>>>0],outputPadding:pe?Array.from(n().subarray(pe>>>0,xe>>>0)):[],outputShape:Te?Array.from(n().subarray(Te>>>0,k>>>0)):[],activation:Ye(me)})},938350:(i,c,f,S,O,D,W,ie,ne,oe,pe,xe,Te,k)=>{a.Ea("ConvTranspose",i,{format:ie?"NHWC":"NCHW",autoPad:c,dilations:Array.from(n().subarray(f>>>0,(f>>>0)+2>>>0)),group:S,kernelShape:Array.from(n().subarray(O>>>0,(O>>>0)+2>>>0)),pads:Array.from(n().subarray(D>>>0,(D>>>0)+4>>>0)),strides:Array.from(n().subarray(W>>>0,(W>>>0)+2>>>0)),wIsConst:()=>!!r()[ne>>>0],outputPadding:oe?Array.from(n().subarray(oe>>>0,pe>>>0)):[],outputShape:xe?Array.from(n().subarray(xe>>>0,Te>>>0)):[],activation:Ye(k)})},938915:(i,c)=>{a.Ea("GlobalAveragePool",i,{format:c?"NHWC":"NCHW"})},939006:(i,c,f,S,O,D,W,ie,ne,oe,pe,xe,Te,k,me,Ce)=>{a.Ea("AveragePool",i,{format:Ce?"NHWC":"NCHW",auto_pad:c,ceil_mode:f,count_include_pad:S,storage_order:O,dilations:[D,W],kernel_shape:[ie,ne],pads:[oe,pe,xe,Te],strides:[k,me]})},939290:(i,c)=>{a.Ea("GlobalAveragePool",i,{format:c?"NHWC":"NCHW"})},939381:(i,c,f,S,O,D,W,ie,ne,oe,pe,xe,Te,k,me,Ce)=>{a.Ea("AveragePool",i,{format:Ce?"NHWC":"NCHW",auto_pad:c,ceil_mode:f,count_include_pad:S,storage_order:O,dilations:[D,W],kernel_shape:[ie,ne],pads:[oe,pe,xe,Te],strides:[k,me]})},939665:(i,c)=>{a.Ea("GlobalMaxPool",i,{format:c?"NHWC":"NCHW"})},939752:(i,c,f,S,O,D,W,ie,ne,oe,pe,xe,Te,k,me,Ce)=>{a.Ea("MaxPool",i,{format:Ce?"NHWC":"NCHW",auto_pad:c,ceil_mode:f,count_include_pad:S,storage_order:O,dilations:[D,W],kernel_shape:[ie,ne],pads:[oe,pe,xe,Te],strides:[k,me]})},940032:(i,c)=>{a.Ea("GlobalMaxPool",i,{format:c?"NHWC":"NCHW"})},940119:(i,c,f,S,O,D,W,ie,ne,oe,pe,xe,Te,k,me,Ce)=>{a.Ea("MaxPool",i,{format:Ce?"NHWC":"NCHW",auto_pad:c,ceil_mode:f,count_include_pad:S,storage_order:O,dilations:[D,W],kernel_shape:[ie,ne],pads:[oe,pe,xe,Te],strides:[k,me]})},940399:(i,c,f,S,O)=>{a.Ea("Gemm",i,{alpha:c,beta:f,transA:S,transB:O})},940503:i=>{a.Ea("MatMul",i,void 0)},940557:(i,c,f,S)=>{a.Ea("ArgMax",i,{keepDims:!!c,selectLastIndex:!!f,axis:S})},940665:(i,c,f,S)=>{a.Ea("ArgMin",i,{keepDims:!!c,selectLastIndex:!!f,axis:S})},940773:(i,c)=>{a.Ea("Softmax",i,{axis:c})},940836:(i,c)=>{a.Ea("Concat",i,{axis:c})},940896:(i,c,f,S,O)=>{a.Ea("Split",i,{axis:c,numOutputs:f,splitSizes:S?Array.from(n().subarray(S>>>0,O>>>0)):[]})},941036:i=>{a.Ea("Expand",i,void 0)},941090:(i,c)=>{a.Ea("Gather",i,{axis:Number(c)})},941161:(i,c)=>{a.Ea("GatherElements",i,{axis:Number(c)})},941240:(i,c,f,S,O,D,W,ie,ne,oe,pe)=>{a.Ea("Resize",i,{antialias:c,axes:f?Array.from(n().subarray(f>>>0,S>>>0)):[],coordinateTransformMode:Ye(O),cubicCoeffA:D,excludeOutside:W,extrapolationValue:ie,keepAspectRatioPolicy:Ye(ne),mode:Ye(oe),nearestMode:Ye(pe)})},941586:(i,c,f,S,O,D,W)=>{a.Ea("Slice",i,{starts:c?Array.from(n().subarray(c>>>0,f>>>0)):[],ends:S?Array.from(n().subarray(S>>>0,O>>>0)):[],axes:D?Array.from(n().subarray(D>>>0,W>>>0)):[]})},941802:i=>{a.Ea("Tile",i,void 0)},941854:(i,c,f)=>{a.Ea("LayerNormalization",i,{axis:Number(c),epsilon:Number(f)})},941961:(i,c,f)=>{a.Ea("InstanceNormalization",i,{epsilon:c,format:f?"NHWC":"NCHW"})},942075:(i,c,f)=>{a.Ea("InstanceNormalization",i,{epsilon:c,format:f?"NHWC":"NCHW"})},942189:i=>{a.Ea("Range",i,void 0)},942242:(i,c)=>{a.Ea("Einsum",i,{equation:Ye(c)})},942323:(i,c,f,S,O)=>{a.Ea("Pad",i,{mode:c,value:f,pads:S?Array.from(n().subarray(S>>>0,O>>>0)):[]})},942450:(i,c,f,S,O,D)=>{a.Ea("BatchNormalization",i,{epsilon:c,momentum:f,spatial:!!O,trainingMode:!!S,format:D?"NHWC":"NCHW"})},942619:(i,c,f,S,O,D)=>{a.Ea("BatchNormalization",i,{epsilon:c,momentum:f,spatial:!!O,trainingMode:!!S,format:D?"NHWC":"NCHW"})},942788:(i,c,f)=>{a.Ea("CumSum",i,{exclusive:Number(c),reverse:Number(f)})},942885:(i,c,f,S,O,D,W,ie,ne)=>{a.Ea("Attention",i,{numHeads:c,isUnidirectional:f,maskFilterValue:S,scale:O,doRotary:D,qkvHiddenSizes:W?Array.from(n().subarray(Number(ie)>>>0,Number(ie)+W>>>0)):[],pastPresentShareBuffer:!!ne})},943157:i=>{a.Ea("Gelu",i,void 0)},943209:(i,c,f,S,O,D)=>{a.Ea("MultiHeadAttention",i,{numHeads:c,isUnidirectional:f,maskFilterValue:S,scale:O,doRotary:D})},943368:i=>{a.Ea("BiasAdd",i,void 0)},943423:i=>{a.Ea("BiasSplitGelu",i,void 0)},943484:(i,c)=>{a.Ea("SkipLayerNormalization",i,{epsilon:c})},943565:(i,c,f,S,O,D,W,ie,ne,oe,pe,xe,Te)=>{a.Ea("Conv",i,{format:ne?"NHWC":"NCHW",auto_pad:c,dilations:[f],group:S,kernel_shape:[O],pads:D?Array.from(n().subarray(D>>>0,W>>>0)):[],strides:[ie],w_is_const:()=>!!r()[oe>>>0],activation:Ye(pe),activation_params:xe?Array.from(u().subarray(xe>>>0,Te>>>0)):[]})},943935:(i,c,f,S,O,D,W,ie,ne,oe,pe,xe,Te,k,me,Ce)=>{a.Ea("Conv",i,{format:xe?"NHWC":"NCHW",auto_pad:c,dilations:[f,S],group:O,kernel_shape:[D,W],pads:ie?Array.from(n().subarray(ie>>>0,ne>>>0)):[],strides:[oe,pe],w_is_const:()=>!!r()[Te>>>0],activation:Ye(k),activation_params:me?Array.from(u().subarray(me>>>0,Ce>>>0)):[]})},944326:i=>{a.zb(i)},944360:(i,c)=>a.Ab(i,c,a.bb.Cb,a.bb.errors)};function Ut(i){this.name="ExitStatus",this.message=`Program terminated with exit(${i})`,this.status=i}var Tt=i=>{i.terminate(),i.onmessage=()=>{}},Kt=i=>{de.Ya.length==0&&(ot(),de.lb(de.Ya[0]));var c=de.Ya.pop();if(!c)return 6;de.Za.push(c),de.Qa[i.Xa]=c,c.Xa=i.Xa;var f={cmd:"run",start_routine:i.Db,arg:i.tb,pthread_ptr:i.Xa};return I&&c.unref(),c.postMessage(f,i.Jb),0},nt=0,Yt=typeof TextDecoder<"u"?new TextDecoder("utf8"):void 0,Vt=(i,c,f)=>{c>>>=0;var S=c+f;for(f=c;i[f]&&!(f>=S);)++f;if(16<f-c&&i.buffer&&Yt)return Yt.decode(i.buffer instanceof SharedArrayBuffer?i.slice(c,f):i.subarray(c,f));for(S="";c<f;){var O=i[c++];if(O&128){var D=i[c++]&63;if((O&224)==192)S+=String.fromCharCode((O&31)<<6|D);else{var W=i[c++]&63;O=(O&240)==224?(O&15)<<12|D<<6|W:(O&7)<<18|D<<12|W<<6|i[c++]&63,65536>O?S+=String.fromCharCode(O):(O-=65536,S+=String.fromCharCode(55296|O>>10,56320|O&1023))}}else S+=String.fromCharCode(O)}return S},Ye=(i,c)=>(i>>>=0)?Vt(o(),i,c):"",br=i=>{var c=mn();return i=i(),kr(c),i};function Oe(i,c){var f=arguments.length-2,S=arguments;return br(()=>{for(var O=fn(8*f),D=O>>>3,W=0;W<f;W++){var ie=S[2+W];l()[D+W>>>0]=ie}return po(i,f,O,c)})}function wr(i){if($)return Oe(0,1,i);Pe=i,0<nt||(de.Eb(),a.onExit?.(i),Ee=!0),w(i,new Ut(i))}var Nt=i=>{if(Pe=i,$)throw Zt(i),"unwind";wr(i)},St=i=>{i instanceof Ut||i=="unwind"||w(1,i)};function un(){for(var i=a.numThreads;i--;)ot();ee.unshift(()=>{ze++,tt(()=>wt())})}function ot(){var i=E("ort-wasm-simd-threaded.worker.js");i=new Worker(i),de.Ya.push(i)}function tt(i){$?i():Promise.all(de.Ya.map(de.lb)).then(i)}var de={Ya:[],Za:[],pb:[],Qa:{},hb(){$?(de.receiveObjectTransfer=de.Bb,de.threadInitTLS=de.ob,de.setExitStatus=de.nb):un()},nb:i=>Pe=i,Nb:["$terminateWorker"],Eb:()=>{for(var i of de.Za)Tt(i);for(i of de.Ya)Tt(i);de.Ya=[],de.Za=[],de.Qa=[]},mb:i=>{var c=i.Xa;delete de.Qa[c],de.Ya.push(i),de.Za.splice(de.Za.indexOf(i),1),i.Xa=0,cn(c)},Bb(){},ob(){de.pb.forEach(i=>i())},lb:i=>new Promise(c=>{i.onmessage=D=>{D=D.data;var W=D.cmd;if(D.targetThread&&D.targetThread!=Pr()){var ie=de.Qa[D.targetThread];ie?ie.postMessage(D,D.transferList):K(`Internal error! Worker sent a message "${W}" to target pthread ${D.targetThread}, but that thread no longer exists!`)}else W==="checkMailbox"?Et():W==="spawnThread"?Kt(D):W==="cleanupThread"?de.mb(de.Qa[D.thread]):W==="killThread"?(D=D.thread,W=de.Qa[D],delete de.Qa[D],Tt(W),cn(D),de.Za.splice(de.Za.indexOf(W),1),W.Xa=0):W==="cancelThread"?de.Qa[D.thread].postMessage({cmd:"cancel"}):W==="loaded"?(i.loaded=!0,I&&!i.Xa&&i.unref(),c(i)):W==="alert"?alert(`Thread ${D.threadId}: ${D.text}`):D.target==="setimmediate"?i.postMessage(D):W==="callHandler"?a[D.handler](...D.args):W&&K(`worker sent an unknown command ${W}`)},i.onerror=D=>{throw K(`worker sent an error! ${D.filename}:${D.lineno}: ${D.message}`),D},I&&(i.on("message",D=>i.onmessage({data:D})),i.on("error",D=>i.onerror(D)));var f=[],S=["onExit"],O;for(O of S)a.hasOwnProperty(O)&&f.push(O);i.postMessage({cmd:"load",handlers:f,urlOrBlob:a.mainScriptUrlOrBlob||e,wasmMemory:Q,wasmModule:Z})})};a.PThread=de;var bt=i=>{for(;0<i.length;)i.shift()(a)};a.establishStackSpace=()=>{var i=Pr(),c=s()[i+52>>>2>>>0];i=s()[i+56>>>2>>>0],ho(c,c-i),kr(c)};function Zt(i){if($)return Oe(1,0,i);Nt(i)}a.invokeEntryPoint=(i,c)=>{i=go.apply(null,[i,c]),0<nt?de.nb(i):pn(i)};function vr(i){this.gb=i-24,this.sb=function(c){s()[this.gb+4>>>2>>>0]=c},this.rb=function(c){s()[this.gb+8>>>2>>>0]=c},this.hb=function(c,f){this.qb(),this.sb(c),this.rb(f)},this.qb=function(){s()[this.gb+16>>>2>>>0]=0}}var $r=0,Qt=0;function Sr(i,c,f,S){return $?Oe(2,1,i,c,f,S):xr(i,c,f,S)}function xr(i,c,f,S){if(i>>>=0,c>>>=0,f>>>=0,S>>>=0,typeof SharedArrayBuffer>"u")return K("Current environment does not support SharedArrayBuffer, pthreads are not available!"),6;var O=[];return $&&O.length===0?Sr(i,c,f,S):(i={Db:f,Xa:i,tb:S,Jb:O},$?(i.Lb="spawnThread",postMessage(i,O),0):Kt(i))}function _r(i,c,f){return $?Oe(3,1,i,c,f):0}function Cr(i,c){if($)return Oe(4,1,i,c)}var Xt=i=>{for(var c=0,f=0;f<i.length;++f){var S=i.charCodeAt(f);127>=S?c++:2047>=S?c+=2:55296<=S&&57343>=S?(c+=4,++f):c+=3}return c},Ir=(i,c,f,S)=>{if(f>>>=0,!(0<S))return 0;var O=f;S=f+S-1;for(var D=0;D<i.length;++D){var W=i.charCodeAt(D);if(55296<=W&&57343>=W){var ie=i.charCodeAt(++D);W=65536+((W&1023)<<10)|ie&1023}if(127>=W){if(f>=S)break;c[f++>>>0]=W}else{if(2047>=W){if(f+1>=S)break;c[f++>>>0]=192|W>>6}else{if(65535>=W){if(f+2>=S)break;c[f++>>>0]=224|W>>12}else{if(f+3>=S)break;c[f++>>>0]=240|W>>18,c[f++>>>0]=128|W>>12&63}c[f++>>>0]=128|W>>6&63}c[f++>>>0]=128|W&63}}return c[f>>>0]=0,f-O},ae=(i,c,f)=>Ir(i,o(),c,f);function Jt(i,c){if($)return Oe(5,1,i,c)}function Wt(i,c,f){if($)return Oe(6,1,i,c,f)}function er(i,c,f){return $?Oe(7,1,i,c,f):0}function tr(i,c){if($)return Oe(8,1,i,c)}function rr(i,c,f){if($)return Oe(9,1,i,c,f)}function nr(i,c,f,S){if($)return Oe(10,1,i,c,f,S)}function or(i,c,f,S){if($)return Oe(11,1,i,c,f,S)}function ar(i,c,f,S){if($)return Oe(12,1,i,c,f,S)}function ir(i){if($)return Oe(13,1,i)}function sr(i,c){if($)return Oe(14,1,i,c)}function ur(i,c,f){if($)return Oe(15,1,i,c,f)}var Ar=()=>{if(!(0<nt))try{$?pn(Pe):Nt(Pe)}catch(i){St(i)}};function xt(i){i>>>=0,typeof Atomics.Kb=="function"&&(Atomics.Kb(n(),i>>>2,i).value.then(Et),i+=128,Atomics.store(n(),i>>>2,1))}a.__emscripten_thread_mailbox_await=xt;var Et=()=>{var i=Pr();if(i&&(xt(i),!Ee))try{mo(),Ar()}catch(c){St(c)}};a.checkMailbox=Et;var d=[],m=i=>i%4===0&&(i%100!==0||i%400===0),v=[0,31,60,91,121,152,182,213,244,274,305,335],C=[0,31,59,90,120,151,181,212,243,273,304,334];function B(i,c,f,S,O,D,W,ie){return $?Oe(16,1,i,c,f,S,O,D,W,ie):-52}function H(i,c,f,S,O,D,W){if($)return Oe(17,1,i,c,f,S,O,D,W)}var q=i=>{var c=Xt(i)+1,f=ln(c);return f&&ae(i,f,c),f},le=[],J=(i,c)=>{le.length=0;for(var f;f=o()[i++>>>0];){var S=f!=105;S&=f!=112,c+=S&&c%8?4:0,le.push(f==112?s()[c>>>2>>>0]:f==105?n()[c>>>2>>>0]:l()[c>>>3>>>0]),c+=S?8:4}return le},re={},se=()=>{if(!we){var i={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:(typeof navigator=="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:b||"./this.program"},c;for(c in re)re[c]===void 0?delete i[c]:i[c]=re[c];var f=[];for(c in i)f.push(`${c}=${i[c]}`);we=f}return we},we;function _e(i,c){if($)return Oe(18,1,i,c);i>>>=0,c>>>=0;var f=0;return se().forEach((S,O)=>{var D=c+f;for(O=s()[i+4*O>>>2>>>0]=D,D=0;D<S.length;++D)r()[O++>>>0>>>0]=S.charCodeAt(D);r()[O>>>0>>>0]=0,f+=S.length+1}),0}function P(i,c){if($)return Oe(19,1,i,c);i>>>=0,c>>>=0;var f=se();s()[i>>>2>>>0]=f.length;var S=0;return f.forEach(O=>S+=O.length+1),s()[c>>>2>>>0]=S,0}function ue(i){return $?Oe(20,1,i):52}function Se(i,c,f,S){return $?Oe(21,1,i,c,f,S):52}function st(i,c,f,S,O){return $?Oe(22,1,i,c,f,S,O):70}var Tr=[null,[],[]];function to(i,c,f,S){if($)return Oe(23,1,i,c,f,S);c>>>=0,f>>>=0,S>>>=0;for(var O=0,D=0;D<f;D++){var W=s()[c>>>2>>>0],ie=s()[c+4>>>2>>>0];c+=8;for(var ne=0;ne<ie;ne++){var oe=o()[W+ne>>>0],pe=Tr[i];oe===0||oe===10?((i===1?Y:K)(Vt(pe,0)),pe.length=0):pe.push(oe)}O+=ie}return s()[S>>>2>>>0]=O,0}var ro=[31,29,31,30,31,30,31,31,30,31,30,31],no=[31,28,31,30,31,30,31,31,30,31,30,31];function Pu(i){var c=Array(Xt(i)+1);return Ir(i,c,0,c.length),c}var ku=(i,c)=>{r().set(i,c>>>0)};function oo(i,c,f,S){function O(k,me,Ce){for(k=typeof k=="number"?k.toString():k||"";k.length<me;)k=Ce[0]+k;return k}function D(k,me){return O(k,me,"0")}function W(k,me){function Ce(So){return 0>So?-1:0<So?1:0}var Ot;return(Ot=Ce(k.getFullYear()-me.getFullYear()))===0&&(Ot=Ce(k.getMonth()-me.getMonth()))===0&&(Ot=Ce(k.getDate()-me.getDate())),Ot}function ie(k){switch(k.getDay()){case 0:return new Date(k.getFullYear()-1,11,29);case 1:return k;case 2:return new Date(k.getFullYear(),0,3);case 3:return new Date(k.getFullYear(),0,2);case 4:return new Date(k.getFullYear(),0,1);case 5:return new Date(k.getFullYear()-1,11,31);case 6:return new Date(k.getFullYear()-1,11,30)}}function ne(k){var me=k.$a;for(k=new Date(new Date(k.ab+1900,0,1).getTime());0<me;){var Ce=k.getMonth(),Ot=(m(k.getFullYear())?ro:no)[Ce];if(me>Ot-k.getDate())me-=Ot-k.getDate()+1,k.setDate(1),11>Ce?k.setMonth(Ce+1):(k.setMonth(0),k.setFullYear(k.getFullYear()+1));else{k.setDate(k.getDate()+me);break}}return Ce=new Date(k.getFullYear()+1,0,4),me=ie(new Date(k.getFullYear(),0,4)),Ce=ie(Ce),0>=W(me,k)?0>=W(Ce,k)?k.getFullYear()+1:k.getFullYear():k.getFullYear()-1}i>>>=0,c>>>=0,f>>>=0,S>>>=0;var oe=s()[S+40>>>2>>>0];S={Hb:n()[S>>>2>>>0],Gb:n()[S+4>>>2>>>0],eb:n()[S+8>>>2>>>0],jb:n()[S+12>>>2>>>0],fb:n()[S+16>>>2>>>0],ab:n()[S+20>>>2>>>0],Wa:n()[S+24>>>2>>>0],$a:n()[S+28>>>2>>>0],Ob:n()[S+32>>>2>>>0],Fb:n()[S+36>>>2>>>0],Ib:oe?Ye(oe):""},f=Ye(f),oe={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(var pe in oe)f=f.replace(new RegExp(pe,"g"),oe[pe]);var xe="Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),Te="January February March April May June July August September October November December".split(" ");oe={"%a":k=>xe[k.Wa].substring(0,3),"%A":k=>xe[k.Wa],"%b":k=>Te[k.fb].substring(0,3),"%B":k=>Te[k.fb],"%C":k=>D((k.ab+1900)/100|0,2),"%d":k=>D(k.jb,2),"%e":k=>O(k.jb,2," "),"%g":k=>ne(k).toString().substring(2),"%G":k=>ne(k),"%H":k=>D(k.eb,2),"%I":k=>(k=k.eb,k==0?k=12:12<k&&(k-=12),D(k,2)),"%j":k=>{for(var me=0,Ce=0;Ce<=k.fb-1;me+=(m(k.ab+1900)?ro:no)[Ce++]);return D(k.jb+me,3)},"%m":k=>D(k.fb+1,2),"%M":k=>D(k.Gb,2),"%n":()=>`\n`,"%p":k=>0<=k.eb&&12>k.eb?"AM":"PM","%S":k=>D(k.Hb,2),"%t":()=>"	","%u":k=>k.Wa||7,"%U":k=>D(Math.floor((k.$a+7-k.Wa)/7),2),"%V":k=>{var me=Math.floor((k.$a+7-(k.Wa+6)%7)/7);if(2>=(k.Wa+371-k.$a-2)%7&&me++,me)me==53&&(Ce=(k.Wa+371-k.$a)%7,Ce==4||Ce==3&&m(k.ab)||(me=1));else{me=52;var Ce=(k.Wa+7-k.$a-1)%7;(Ce==4||Ce==5&&m(k.ab%400-1))&&me++}return D(me,2)},"%w":k=>k.Wa,"%W":k=>D(Math.floor((k.$a+7-(k.Wa+6)%7)/7),2),"%y":k=>(k.ab+1900).toString().substring(2),"%Y":k=>k.ab+1900,"%z":k=>{k=k.Fb;var me=0<=k;return k=Math.abs(k)/60,(me?"+":"-")+("0000"+(k/60*100+k%60)).slice(-4)},"%Z":k=>k.Ib,"%%":()=>"%"},f=f.replace(/%%/g,"\\0\\0");for(pe in oe)f.includes(pe)&&(f=f.replace(new RegExp(pe,"g"),oe[pe](S)));return f=f.replace(/\\0\\0/g,"%"),pe=Pu(f),pe.length>c?0:(ku(pe,i),pe.length-1)}var Er=i=>{try{i()}catch(c){rt(c)}};function Ru(){var i=X,c={};for(let[f,S]of Object.entries(i))c[f]=typeof S=="function"?function(){Or.push(f);try{return S.apply(null,arguments)}finally{Ee||(Or.pop(),ut&&_t===1&&Or.length===0&&(_t=0,nt+=1,Er(bo),typeof Fibers<"u"&&Fibers.Pb()))}}:S;return c}var _t=0,ut=null,ao=0,Or=[],io={},so={},Bu=0,dn=null,Du=[];function Mu(){return new Promise((i,c)=>{dn={resolve:i,reject:c}})}function zu(){var i=ln(65548),c=i+12;s()[i>>>2>>>0]=c,s()[i+4>>>2>>>0]=c+65536,c=Or[0];var f=io[c];return f===void 0&&(f=Bu++,io[c]=f,so[f]=c),c=f,n()[i+8>>>2>>>0]=c,i}function Uu(){var i=n()[ut+8>>>2>>>0];return i=X[so[i]],--nt,i()}function Vu(i){if(!Ee){if(_t===0){var c=!1,f=!1;i((S=0)=>{if(!Ee&&(ao=S,c=!0,f)){_t=2,Er(()=>wo(ut)),typeof Browser<"u"&&Browser.ib.vb&&Browser.ib.resume(),S=!1;try{var O=Uu()}catch(ie){O=ie,S=!0}var D=!1;if(!ut){var W=dn;W&&(dn=null,(S?W.reject:W.resolve)(O),D=!0)}if(S&&!D)throw O}}),f=!0,c||(_t=1,ut=zu(),typeof Browser<"u"&&Browser.ib.vb&&Browser.ib.pause(),Er(()=>yo(ut)))}else _t===2?(_t=0,Er(vo),lo(ut),ut=null,Du.forEach(S=>{if(!Ee)try{S(),Ar()}catch(O){St(O)}})):rt(`invalid state: ${_t}`);return ao}}function Nu(i){return Vu(c=>{i().then(c)})}de.hb();var Wu=[wr,Zt,Sr,_r,Cr,Jt,Wt,er,tr,rr,nr,or,ar,ir,sr,ur,B,H,_e,P,ue,Se,st,to],Hu={r:function(i,c,f){return Nu(async()=>{await a.xb(i,c,f)})},b:function(i,c,f){throw i>>>=0,new vr(i).hb(c>>>0,f>>>0),$r=i,Qt++,$r},N:function(i){co(i>>>0,!_,1,!y,131072,!1),de.ob()},l:function(i){i>>>=0,$?postMessage({cmd:"cleanupThread",thread:i}):de.mb(de.Qa[i])},J:xr,i:_r,T:Cr,F:Jt,H:Wt,U:er,R:tr,L:rr,Q:nr,p:or,G:ar,D:ir,S:sr,E:ur,q:()=>1,B:function(i,c){i>>>=0,i==c>>>0?setTimeout(()=>Et()):$?postMessage({targetThread:i,cmd:"checkMailbox"}):(i=de.Qa[i])&&i.postMessage({cmd:"checkMailbox"})},K:function(i,c,f,S){c>>>=0,d.length=f,S=S>>>0>>>3;for(var O=0;O<f;O++)d[O]=l()[S+O>>>0];return i=0>i?zt[-i-1]:Wu[i],de.ub=c,c=i.apply(null,d),de.ub=0,c},M:xt,W:function(i){I&&de.Qa[i>>>0].ref()},u:function(i,c,f){i=c+2097152>>>0<4194305-!!i?(i>>>0)+4294967296*c:NaN,f>>>=0,i=new Date(1e3*i),n()[f>>>2>>>0]=i.getUTCSeconds(),n()[f+4>>>2>>>0]=i.getUTCMinutes(),n()[f+8>>>2>>>0]=i.getUTCHours(),n()[f+12>>>2>>>0]=i.getUTCDate(),n()[f+16>>>2>>>0]=i.getUTCMonth(),n()[f+20>>>2>>>0]=i.getUTCFullYear()-1900,n()[f+24>>>2>>>0]=i.getUTCDay(),i=(i.getTime()-Date.UTC(i.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,n()[f+28>>>2>>>0]=i},v:function(i,c,f){i=c+2097152>>>0<4194305-!!i?(i>>>0)+4294967296*c:NaN,f>>>=0,i=new Date(1e3*i),n()[f>>>2>>>0]=i.getSeconds(),n()[f+4>>>2>>>0]=i.getMinutes(),n()[f+8>>>2>>>0]=i.getHours(),n()[f+12>>>2>>>0]=i.getDate(),n()[f+16>>>2>>>0]=i.getMonth(),n()[f+20>>>2>>>0]=i.getFullYear()-1900,n()[f+24>>>2>>>0]=i.getDay(),c=(m(i.getFullYear())?v:C)[i.getMonth()]+i.getDate()-1|0,n()[f+28>>>2>>>0]=c,n()[f+36>>>2>>>0]=-(60*i.getTimezoneOffset()),c=new Date(i.getFullYear(),6,1).getTimezoneOffset();var S=new Date(i.getFullYear(),0,1).getTimezoneOffset();i=(c!=S&&i.getTimezoneOffset()==Math.min(S,c))|0,n()[f+32>>>2>>>0]=i},w:function(i){i>>>=0;var c=new Date(n()[i+20>>>2>>>0]+1900,n()[i+16>>>2>>>0],n()[i+12>>>2>>>0],n()[i+8>>>2>>>0],n()[i+4>>>2>>>0],n()[i>>>2>>>0],0),f=n()[i+32>>>2>>>0],S=c.getTimezoneOffset(),O=new Date(c.getFullYear(),6,1).getTimezoneOffset(),D=new Date(c.getFullYear(),0,1).getTimezoneOffset(),W=Math.min(D,O);return 0>f?n()[i+32>>>2>>>0]=+(O!=D&&W==S):0<f!=(W==S)&&(O=Math.max(D,O),c.setTime(c.getTime()+6e4*((0<f?W:O)-S))),n()[i+24>>>2>>>0]=c.getDay(),f=(m(c.getFullYear())?v:C)[c.getMonth()]+c.getDate()-1|0,n()[i+28>>>2>>>0]=f,n()[i>>>2>>>0]=c.getSeconds(),n()[i+4>>>2>>>0]=c.getMinutes(),n()[i+8>>>2>>>0]=c.getHours(),n()[i+12>>>2>>>0]=c.getDate(),n()[i+16>>>2>>>0]=c.getMonth(),n()[i+20>>>2>>>0]=c.getYear(),i=c.getTime(),isNaN(i)?(n()[uo()>>>2>>>0]=61,i=-1):i/=1e3,fo((yt=i,1<=+Math.abs(yt)?0<yt?+Math.floor(yt/4294967296)>>>0:~~+Math.ceil((yt-+(~~yt>>>0))/4294967296)>>>0:0)),i>>>0},s:B,t:H,A:function(i,c,f){function S(oe){return(oe=oe.toTimeString().match(/\\(([A-Za-z ]+)\\)$/))?oe[1]:"GMT"}i>>>=0,c>>>=0,f>>>=0;var O=new Date().getFullYear(),D=new Date(O,0,1),W=new Date(O,6,1);O=D.getTimezoneOffset();var ie=W.getTimezoneOffset(),ne=Math.max(O,ie);s()[i>>>2>>>0]=60*ne,n()[c>>>2>>>0]=+(O!=ie),i=S(D),c=S(W),i=q(i),c=q(c),ie<O?(s()[f>>>2>>>0]=i,s()[f+4>>>2>>>0]=c):(s()[f>>>2>>>0]=c,s()[f+4>>>2>>>0]=i)},d:()=>{rt("")},c:function(i,c,f){return i>>>=0,c=J(c>>>0,f>>>0),zt[i].apply(null,c)},k:function(i,c,f){return i>>>=0,c=J(c>>>0,f>>>0),zt[i].apply(null,c)},m:()=>{},j:()=>Date.now(),V:()=>{throw nt+=1,"unwind"},C:function(){return 4294901760},f:()=>performance.timeOrigin+performance.now(),g:()=>I?(Oo(),Ht(Eo)).cpus().length:navigator.hardwareConcurrency,y:function(i){i>>>=0;var c=o().length;if(i<=c||4294901760<i)return!1;for(var f=1;4>=f;f*=2){var S=c*(1+.2/f);S=Math.min(S,i+100663296);var O=Math;S=Math.max(i,S);e:{O=(O.min.call(O,4294901760,S+(65536-S%65536)%65536)-Q.buffer.byteLength+65535)/65536;try{Q.grow(O),Ge();var D=1;break e}catch{}D=void 0}if(D)return!0}return!1},O:_e,P,I:Nt,h:ue,o:Se,x:st,n:to,a:Q||a.wasmMemory,z:oo,e:function(i,c,f,S){return oo(i>>>0,c>>>0,f>>>0,S>>>0)}},X=function(){function i(f,S){return X=f.exports,X=Ru(),X=Gu(),de.pb.push(X.Da),be.unshift(X.X),Z=S,wt(),X}var c={a:Hu};if(ze++,a.instantiateWasm)try{return a.instantiateWasm(c,i)}catch(f){K(`Module.instantiateWasm callback failed with error: ${f}`),h(f)}return $t(c,function(f){i(f.instance,f.module)}).catch(h),{}}();a._OrtInit=(i,c)=>(a._OrtInit=X.Y)(i,c),a._OrtGetLastError=(i,c)=>(a._OrtGetLastError=X.Z)(i,c),a._OrtCreateSessionOptions=(i,c,f,S,O,D,W,ie,ne,oe)=>(a._OrtCreateSessionOptions=X._)(i,c,f,S,O,D,W,ie,ne,oe),a._OrtAppendExecutionProvider=(i,c)=>(a._OrtAppendExecutionProvider=X.$)(i,c),a._OrtAddFreeDimensionOverride=(i,c,f)=>(a._OrtAddFreeDimensionOverride=X.aa)(i,c,f),a._OrtAddSessionConfigEntry=(i,c,f)=>(a._OrtAddSessionConfigEntry=X.ba)(i,c,f),a._OrtReleaseSessionOptions=i=>(a._OrtReleaseSessionOptions=X.ca)(i),a._OrtCreateSession=(i,c,f)=>(a._OrtCreateSession=X.da)(i,c,f),a._OrtReleaseSession=i=>(a._OrtReleaseSession=X.ea)(i),a._OrtGetInputOutputCount=(i,c,f)=>(a._OrtGetInputOutputCount=X.fa)(i,c,f),a._OrtGetInputName=(i,c)=>(a._OrtGetInputName=X.ga)(i,c),a._OrtGetOutputName=(i,c)=>(a._OrtGetOutputName=X.ha)(i,c),a._OrtFree=i=>(a._OrtFree=X.ia)(i),a._OrtCreateTensor=(i,c,f,S,O,D)=>(a._OrtCreateTensor=X.ja)(i,c,f,S,O,D),a._OrtGetTensorData=(i,c,f,S,O)=>(a._OrtGetTensorData=X.ka)(i,c,f,S,O),a._OrtReleaseTensor=i=>(a._OrtReleaseTensor=X.la)(i),a._OrtCreateRunOptions=(i,c,f,S)=>(a._OrtCreateRunOptions=X.ma)(i,c,f,S),a._OrtAddRunConfigEntry=(i,c,f)=>(a._OrtAddRunConfigEntry=X.na)(i,c,f),a._OrtReleaseRunOptions=i=>(a._OrtReleaseRunOptions=X.oa)(i),a._OrtCreateBinding=i=>(a._OrtCreateBinding=X.pa)(i),a._OrtBindInput=(i,c,f)=>(a._OrtBindInput=X.qa)(i,c,f),a._OrtBindOutput=(i,c,f,S)=>(a._OrtBindOutput=X.ra)(i,c,f,S),a._OrtClearBoundOutputs=i=>(a._OrtClearBoundOutputs=X.sa)(i),a._OrtReleaseBinding=i=>(a._OrtReleaseBinding=X.ta)(i),a._OrtRunWithBinding=(i,c,f,S,O)=>(a._OrtRunWithBinding=X.ua)(i,c,f,S,O),a._OrtRun=(i,c,f,S,O,D,W,ie)=>(a._OrtRun=X.va)(i,c,f,S,O,D,W,ie),a._OrtEndProfiling=i=>(a._OrtEndProfiling=X.wa)(i),a._JsepOutput=(i,c,f)=>(a._JsepOutput=X.xa)(i,c,f),a._JsepGetNodeName=i=>(a._JsepGetNodeName=X.ya)(i);var uo=()=>(uo=X.za)(),Pr=a._pthread_self=()=>(Pr=a._pthread_self=X.Aa)(),ln=a._malloc=i=>(ln=a._malloc=X.Ba)(i),lo=a._free=i=>(lo=a._free=X.Ca)(i);a.__emscripten_tls_init=()=>(a.__emscripten_tls_init=X.Da)();var co=a.__emscripten_thread_init=(i,c,f,S,O,D)=>(co=a.__emscripten_thread_init=X.Fa)(i,c,f,S,O,D);a.__emscripten_thread_crashed=()=>(a.__emscripten_thread_crashed=X.Ga)();var po=(i,c,f,S)=>(po=X.Ha)(i,c,f,S),cn=i=>(cn=X.Ia)(i),pn=a.__emscripten_thread_exit=i=>(pn=a.__emscripten_thread_exit=X.Ja)(i),mo=()=>(mo=X.Ka)(),fo=i=>(fo=X.La)(i),ho=(i,c)=>(ho=X.Ma)(i,c),mn=()=>(mn=X.Na)(),kr=i=>(kr=X.Oa)(i),fn=i=>(fn=X.Pa)(i),go=a.dynCall_ii=(i,c)=>(go=a.dynCall_ii=X.Ra)(i,c),yo=i=>(yo=X.Sa)(i),bo=()=>(bo=X.Ta)(),wo=i=>(wo=X.Ua)(i),vo=()=>(vo=X.Va)();a.___start_em_js=944472,a.___stop_em_js=944633;function Gu(){var i=X;i=Object.assign({},i);var c=S=>()=>S()>>>0,f=S=>O=>S(O)>>>0;return i.za=c(i.za),i.Aa=c(i.Aa),i.Ba=f(i.Ba),i.emscripten_main_runtime_thread_id=c(i.emscripten_main_runtime_thread_id),i.Na=c(i.Na),i.Pa=f(i.Pa),i}a.wasmMemory=Q,a.stackAlloc=fn,a.stackSave=mn,a.stackRestore=kr,a.keepRuntimeAlive=()=>0<nt,a.UTF8ToString=Ye,a.stringToUTF8=ae,a.lengthBytesUTF8=Xt,a.ExitStatus=Ut,a.PThread=de;var Rr;Me=function i(){Rr||$o(),Rr||(Me=i)};function $o(){if(!(0<ze))if($)p(a),$||bt(be),startWorker(a);else{if(a.preRun)for(typeof a.preRun=="function"&&(a.preRun=[a.preRun]);a.preRun.length;)ee.unshift(a.preRun.shift());bt(ee),0<ze||Rr||(Rr=!0,a.calledRun=!0,Ee||($||bt(be),p(a),$||bt(et)))}}return $o(),t.ready}})();typeof ko=="object"&&typeof $n=="object"?$n.exports=Po:typeof define=="function"&&define.amd&&define([],()=>Po)});var Bo=dr((qc,Xu)=>{Xu.exports=\'"use strict";var Module={},ENVIRONMENT_IS_NODE=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string";if(ENVIRONMENT_IS_NODE){var nodeWorkerThreads=require("worker_threads"),parentPort=nodeWorkerThreads.parentPort;parentPort.on("message",e=>onmessage({data:e}));var fs=require("fs"),vm=require("vm");Object.assign(global,{self:global,require,Module,location:{href:__filename},Worker:nodeWorkerThreads.Worker,importScripts:e=>vm.runInThisContext(fs.readFileSync(e,"utf8"),{filename:e}),postMessage:e=>parentPort.postMessage(e),performance:global.performance||{now:Date.now}})}var initializedJS=!1;function threadPrintErr(){var e=Array.prototype.slice.call(arguments).join(" ");if(ENVIRONMENT_IS_NODE){fs.writeSync(2,e+`\\n`);return}console.error(e)}function threadAlert(){var e=Array.prototype.slice.call(arguments).join(" ");postMessage({cmd:"alert",text:e,threadId:Module._pthread_self()})}var err=threadPrintErr;self.alert=threadAlert,Module.instantiateWasm=(e,t)=>{var a=Module.wasmModule;Module.wasmModule=null;var r=new WebAssembly.Instance(a,e);return t(r)},self.onunhandledrejection=e=>{throw e.reason||e};function handleMessage(e){try{if(e.data.cmd==="load"){let a=[];self.onmessage=r=>a.push(r),self.startWorker=r=>{Module=r,postMessage({cmd:"loaded"});for(let s of a)handleMessage(s);self.onmessage=handleMessage},Module.wasmModule=e.data.wasmModule;for(const r of e.data.handlers)Module[r]=(...s)=>{postMessage({cmd:"callHandler",handler:r,args:s})};if(Module.wasmMemory=e.data.wasmMemory,Module.buffer=Module.wasmMemory.buffer,Module.ENVIRONMENT_IS_PTHREAD=!0,typeof e.data.urlOrBlob=="string")importScripts(e.data.urlOrBlob);else{var t=URL.createObjectURL(e.data.urlOrBlob);importScripts(t),URL.revokeObjectURL(t)}ortWasmThreaded(Module)}else if(e.data.cmd==="run"){Module.__emscripten_thread_init(e.data.pthread_ptr,0,0,1),Module.__emscripten_thread_mailbox_await(e.data.pthread_ptr),Module.establishStackSpace(),Module.PThread.receiveObjectTransfer(e.data),Module.PThread.threadInitTLS(),initializedJS||(initializedJS=!0);try{Module.invokeEntryPoint(e.data.start_routine,e.data.arg)}catch(a){if(a!="unwind")throw a}}else e.data.cmd==="cancel"?Module._pthread_self()&&Module.__emscripten_thread_exit(-1):e.data.target==="setimmediate"||(e.data.cmd==="checkMailbox"?initializedJS&&Module.checkMailbox():e.data.cmd&&(err(`worker.js received unknown command ${e.data.cmd}`),err(e.data)))}catch(a){throw Module.__emscripten_thread_crashed?.(),a}}self.onmessage=handleMessage;\\n\'});var _n,Xe,cr,Mr,pr,No,Cn,Ne=j(()=>{"use strict";_n=e=>{switch(e){case"int8":return 3;case"uint8":return 2;case"bool":return 9;case"int16":return 5;case"uint16":return 4;case"int32":return 6;case"uint32":return 12;case"float16":return 10;case"float32":return 1;case"float64":return 11;case"string":return 8;case"int64":return 7;case"uint64":return 13;default:throw new Error(`unsupported data type: ${e}`)}},Xe=e=>{switch(e){case 3:return"int8";case 2:return"uint8";case 9:return"bool";case 5:return"int16";case 4:return"uint16";case 6:return"int32";case 12:return"uint32";case 10:return"float16";case 1:return"float32";case 11:return"float64";case 8:return"string";case 7:return"int64";case 13:return"uint64";default:throw new Error(`unsupported data type: ${e}`)}},cr=e=>[void 0,4,1,1,2,2,4,8,void 0,1,2,8,4,8,void 0,void 0,void 0][e],Mr=e=>{switch(e){case"float16":return Uint16Array;case"float32":return Float32Array;case"uint8":return Uint8Array;case"int8":return Int8Array;case"uint16":return Uint16Array;case"int16":return Int16Array;case"int32":return Int32Array;case"bool":return Uint8Array;case"float64":return Float64Array;case"uint32":return Uint32Array;case"int64":return BigInt64Array;case"uint64":return BigUint64Array;default:throw new Error(`unsupported type: ${e}`)}},pr=e=>{switch(e){case"verbose":return 0;case"info":return 1;case"warning":return 2;case"error":return 3;case"fatal":return 4;default:throw new Error(`unsupported logging level: ${e}`)}},No=e=>e==="float32"||e==="int32"||e==="int64"||e==="bool"||e==="float16"||e==="uint32",Cn=e=>{switch(e){case"none":return 0;case"cpu":return 1;case"cpu-pinned":return 2;case"texture":return 3;case"gpu-buffer":return 4;default:throw new Error(`unsupported data location: ${e}`)}}});var zr=j(()=>{"use strict"});var Ho=j(()=>{"use strict";zr()});var Go,Lo=j(()=>{"use strict";Go="1.17.1"});var Fo,Pt,In=j(()=>{"use strict";Lo();Fo="warning",Pt={wasm:{},webgl:{},webgpu:{},versions:{common:Go},set logLevel(e){if(e!==void 0){if(typeof e!="string"||["verbose","info","warning","error","fatal"].indexOf(e)===-1)throw new Error(`Unsupported logging level: ${e}`);Fo=e}},get logLevel(){return Fo}};Object.defineProperty(Pt,"logLevel",{enumerable:!0})});var Gt,jo=j(()=>{"use strict";In();Gt=Pt});var qo=j(()=>{"use strict"});var Ko=j(()=>{"use strict";Ur()});var Zo=j(()=>{"use strict"});var Qo=j(()=>{"use strict";Ur()});var Ur=j(()=>{"use strict";qo();Ko();Zo();Qo()});var Vr=j(()=>{"use strict";Ur()});var An,Xo,kt,Rt,Tn=j(()=>{"use strict";In();An=(e,t)=>{Pt.wasm.trace&&console.timeStamp(`${e}::ORT::${t}`)},Xo=(e,t)=>{let r=new Error().stack?.split(/\\r\\n|\\r|\\n/g)||[],o=!1;for(let n=0;n<r.length;n++){if(o&&!r[n].includes("TRACE_FUNC")){let s=`FUNC_${e}::${r[n].trim().split(" ")[1]}`;t&&(s+=`::${t}`),An("CPU",s);return}r[n].includes("TRACE_FUNC")&&(o=!0)}},kt=e=>{Pt.wasm.trace&&Xo("BEGIN",e)},Rt=e=>{Pt.wasm.trace&&Xo("END",e)}});var Jo=j(()=>{"use strict";zr();Vr();Tn()});var ea=j(()=>{"use strict";Jo()});var ta=j(()=>{"use strict"});var ra=j(()=>{"use strict";zr();Vr()});var na=j(()=>{"use strict";ra()});var Lt=j(()=>{"use strict";Ho();jo();ea();Vr();Tn();ta();na()});var dd,ld,oa,aa,ia,cd,Be,Ct=j(()=>{"use strict";Ne();dd=["V","I","W","E","F"],ld=(e,t)=>{console.log(`[${dd[e]},${new Date().toISOString()}]${t}`)},ia=(e,t)=>{oa=e,aa=t},cd=(e,t)=>{let r=pr(e),o=pr(oa);r>=o&&ld(r,typeof t=="function"?t():t)},Be=(...e)=>{aa&&cd(...e)}});var sa,ua=j(()=>{"use strict";Ne();sa=(e,t)=>new(Mr(t))(e)});var Nr=j(()=>{"use strict"});var Wr,pd,da,On,En,ca,pa=j(()=>{"use strict";Ct();Nr();Wr=e=>Math.ceil(e/16)*16,pd=1,da=()=>pd++,On=async(e,t,r,o)=>{let n=Wr(r),s=e.device.createBuffer({size:n,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ});try{let u=e.getCommandEncoder();e.endComputePass(),u.copyBufferToBuffer(t,0,s,0,n),e.flush(),await s.mapAsync(GPUMapMode.READ);let l=s.getMappedRange();if(o){let a=o();return a.set(new Uint8Array(l,0,r)),a}else return new Uint8Array(l.slice(0,r))}finally{s.destroy()}},En=class{constructor(t){this.backend=t;this.storageCache=new Map,this.freeBuffers=new Map,this.freeUniformBuffers=new Map,this.buffersForUploadingPending=[],this.buffersPending=[],this.externalBuffers=new Map}upload(t,r){let o=r.buffer,n=r.byteOffset,s=r.byteLength,u=Wr(s),l=this.storageCache.get(t);if(!l)throw new Error("gpu data for uploading does not exist");if(l.originalSize!==s)throw new Error(`inconsistent data size. gpu data size=${l.originalSize}, data size=${s}`);let a=this.backend.device.createBuffer({mappedAtCreation:!0,size:u,usage:GPUBufferUsage.MAP_WRITE|GPUBufferUsage.COPY_SRC}),p=a.getMappedRange();new Uint8Array(p).set(new Uint8Array(o,n,s)),a.unmap();let h=this.backend.getCommandEncoder();this.backend.endComputePass(),h.copyBufferToBuffer(a,0,l.gpuData.buffer,0,u),Be("verbose",()=>`[WebGPU] GpuDataManager.upload(id=${t})`),this.buffersForUploadingPending.push(a)}memcpy(t,r){let o=this.storageCache.get(t);if(!o)throw new Error("source gpu data for memcpy does not exist");let n=this.storageCache.get(r);if(!n)throw new Error("destination gpu data for memcpy does not exist");if(o.originalSize!==n.originalSize)throw new Error("inconsistent source and destination gpu data size");let s=Wr(o.originalSize),u=this.backend.getCommandEncoder();this.backend.endComputePass(),u.copyBufferToBuffer(o.gpuData.buffer,0,n.gpuData.buffer,0,s)}registerExternalBuffer(t,r,o){let n;if(o){if(n=this.externalBuffers.get(o),n===void 0)throw new Error("previous buffer is not registered");if(t===o)return Be("verbose",()=>`[WebGPU] GpuDataManager.registerExternalBuffer(size=${r}) => id=${n}, buffer is the same, skip.`),n;this.externalBuffers.delete(o)}else n=da();return this.storageCache.set(n,{gpuData:{id:n,type:0,buffer:t},originalSize:r}),this.externalBuffers.set(t,n),Be("verbose",()=>`[WebGPU] GpuDataManager.registerExternalBuffer(size=${r}) => id=${n}, registered.`),n}unregisterExternalBuffer(t){let r=this.externalBuffers.get(t);r!==void 0&&(this.storageCache.delete(r),this.externalBuffers.delete(t),Be("verbose",()=>`[WebGPU] GpuDataManager.unregisterExternalBuffer() => id=${r}`))}create(t,r=GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST){let o=Wr(t),n,s=(r&GPUBufferUsage.STORAGE)===GPUBufferUsage.STORAGE,u=(r&GPUBufferUsage.UNIFORM)===GPUBufferUsage.UNIFORM;if(s||u){let a=s?this.freeBuffers:this.freeUniformBuffers,p=a.get(o);p||(p=[],a.set(o,p)),p.length>0?n=p.pop():n=this.backend.device.createBuffer({size:o,usage:r})}else n=this.backend.device.createBuffer({size:o,usage:r});let l={id:da(),type:0,buffer:n};return this.storageCache.set(l.id,{gpuData:l,originalSize:t}),Be("verbose",()=>`[WebGPU] GpuDataManager.create(size=${t}) => id=${l.id}`),l}get(t){return this.storageCache.get(t)?.gpuData}release(t){let r=this.storageCache.get(t);if(!r)throw new Error("releasing data does not exist");return Be("verbose",()=>`[WebGPU] GpuDataManager.release(id=${t}), gpuDataId=${r.gpuData.id}`),this.storageCache.delete(t),this.buffersPending.push(r.gpuData.buffer),r.originalSize}async download(t,r){let o=this.storageCache.get(t);if(!o)throw new Error("data does not exist");await On(this.backend,o.gpuData.buffer,o.originalSize,r)}refreshPendingBuffers(){for(let t of this.buffersForUploadingPending)t.destroy();this.buffersForUploadingPending=[];for(let t of this.buffersPending)(t.usage&GPUBufferUsage.STORAGE)===GPUBufferUsage.STORAGE?this.freeBuffers.get(t.size).push(t):(t.usage&GPUBufferUsage.UNIFORM)===GPUBufferUsage.UNIFORM?this.freeUniformBuffers.get(t.size).push(t):t.destroy();this.buffersPending=[]}dispose(){this.freeBuffers.forEach(t=>{t.forEach(r=>{r.destroy()})}),this.freeUniformBuffers.forEach(t=>{t.forEach(r=>{r.destroy()})}),this.storageCache.forEach(t=>{t.gpuData.buffer.destroy()}),this.storageCache=new Map,this.freeBuffers=new Map,this.freeUniformBuffers=new Map}},ca=(...e)=>new En(...e)});var Pn,ge,je=j(()=>{"use strict";Pn=class{constructor(t){Object.assign(this,t)}get cacheKey(){return this.key||(this.key=Object.getOwnPropertyNames(this).sort().map(t=>`${this[t]}`).join(";")),this.key}},ge=e=>new Pn(e)});var kn,dt,U,Bt,Hr,Gr,Lr,$e=j(()=>{"use strict";kn=class{static calcMatMulShape(t,r){return t[1]!==r[0]?void 0:[t[0],r[1]]}},dt=class{static calcShape(t,r,o=!1){let n=t.length,s=r.length;if(n===0)return r;if(s===0)return t;let u=Math.max(t.length,r.length),l=new Array(u);if(o){if(n<2||s<2)return;let a=kn.calcMatMulShape([t[n-2],t[n-1]],[r[s-2],r[s-1]]);if(a===void 0)return;[l[u-2],l[u-1]]=a}for(let a=o?3:1;a<=u;a++){let p=n-a<0?1:t[n-a],h=s-a<0?1:r[s-a];if(p!==h&&p>1&&h>1)return;l[u-a]=Math.max(p,h)}return l}static isValidBroadcast(t,r){let o=t.length,n=r.length;if(o>n)return!1;for(let s=1;s<=o;s++)if(t[o-s]!==1&&t[o-s]!==r[n-s])return!1;return!0}},U=class e{static size(t){return e.getSizeFromDimensionRange(t,0,t.length)}static sizeFromDimension(t,r){if(r<0||r>t.length)throw new Error(`invalid dimension of ${r} for sizeFromDimension as Tensor has ${t.length} dimensions.`);return e.getSizeFromDimensionRange(t,r,t.length)}static sizeToDimension(t,r){if(r<0||r>t.length)throw new Error(`invalid dimension of ${r} for sizeToDimension as Tensor has ${t.length} dimensions.`);return e.getSizeFromDimensionRange(t,0,r)}static getSizeFromDimensionRange(t,r,o){let n=1;for(let s=r;s<o;s++){if(t[s]<0)throw new Error("cannot get valid size from specified dimension range. Most likely the range contains negative values in them.");n*=t[s]}return n}static computeStrides(t){let r=t.length;if(r===0)return[];if(r===1)return[1];let o=new Array(r);o[r-1]=1,o[r-2]=t[r-1];for(let n=r-3;n>=0;--n)o[n]=o[n+1]*t[n+1];return o}static normalizeAxis(t,r){if(t<-r&&t>=r)throw new Error("unsupported axis for this operation.");return t<0?t+r:t}static normalizeAxes(t,r){return t.map(o=>this.normalizeAxis(o,r??t.length))}static sortBasedOnPerm(t,r){return r?r.map(o=>t[o]):t.slice().reverse()}static padShape(t,r){let o=t.length;return t.map((n,s)=>n+r[s]+r[s+o])}static areEqual(t,r){return t.length!==r.length?!1:t.every((o,n)=>o===r[n])}},Bt=class e{static adjustPoolAttributes(t,r,o,n,s,u){if(!t&&o.length!==r.length-2)throw new Error("length of specified kernel shapes should be 2 less than length of input dimensions");if(t)for(let l=0;l<r.length-2;l++)l>=o.length?o.push(r[l+2]):o[l]=r[l+2];for(let l=0;l<o.length;l++)if(l<n.length){if(n[l]<0)throw new Error("strides should be greater than or equal to 1")}else n.push(1);for(let l=0;l<o.length;l++)if(l<s.length){if(s[l]<0)throw new Error("dilations should be greater than or equal to 1")}else s.push(1);for(let l=0;l<o.length*2;l++)if(l<u.length){if(u[l]<0)throw new Error("pad should be greater than or equal to 1")}else u.push(0);for(let l=0;l<o.length;l++){if(o[l]<=0)throw new Error("kernel shapes need to be greater than 0");if(u[l]>=o[l]||u[l+o.length]>=o[l])throw new Error("pads should be smaller than kernel")}}static adjustPadsBasedOnAutoPad(t,r,o,n,s,u,l){if(l){if(s.length!==2*(t.length-2))throw new Error("length of pads should be twice the length of data dimensions");if(r.length!==t.length-2)throw new Error("length of strides should be the length of data dimensions");if(n.length!==t.length-2)throw new Error("length of kernel shapes should be the length of data dimensions");for(let a=0;a<t.length-2;a++)e.adjustPadAndReturnShape(t[a+(u?1:2)],r[a],o[a],n[a],s,a,a+t.length-2,l)}}static computePoolOutputShape(t,r,o,n,s,u,l){if(r.length<=0)throw new Error("input shape must be of size greater than 0");let a=[r[0],r[1]];return e.computeShapeHelper(t,r,a,o,n,s,u,l),a}static computeConvOutputShape(t,r,o,n,s,u,l){if(t.length<=0||r.length<=0)throw new Error("invalid input tensor dims or invalid filter tensor dims");let a=[t[0],r[0]];return e.computeShapeHelper(!1,t,a,o,n,s,u,l),a}static computeShapeHelper(t,r,o,n,s,u,l,a){if(t)for(let p=0;p<r.length-2;p++)o.push(1);else for(let p=0;p<r.length-2;p++)o.push(e.adjustPadAndReturnShape(r[p+2],n[p],s[p],u[p],l,p,p+r.length-2,a))}static adjustPadAndReturnShape(t,r,o,n,s,u,l,a){let p=o*(n-1)+1;if(a&&a!=="NOTSET")switch(a){case"VALID":return s[u]=0,s[l]=0,Math.floor((t-p)/r+1);case"SAME_LOWER":case"SAME_UPPER":if(o!==1)throw new Error("Dilation not supported for SAME_UPPER or SAME_LOWER");{let g=((t+r-1)/r-1)*r+n-t;return s[u]=Math.floor(a==="SAME_LOWER"?(g+1)/2:g/2),s[l]=g-s[u],Math.floor((t+g-n)/r+1)}default:throw new Error("Unsupported AutoPad type")}else return Math.floor((t+s[u]+s[l]-p)/r+1)}},Hr=class{static getShapeOfGemmResult(t,r,o,n,s){if(t.length!==2||o.length!==2)throw new Error("shape need to be of size 2");let u,l,a;r?(u=t[1],l=t[0]):(u=t[0],l=t[1]);let p=-1;if(n?(a=o[0],p=1):(a=o[1],p=0),o[p]!==l)throw new Error("dimension mismatch");if(u<=0||a<=0||l<=0)throw new Error("invalid shape specified");if(s&&!dt.isValidBroadcast(s,[u,a]))throw new Error("gemm: invalid bias shape for broadcast");return[u,a,l]}},Gr=-34028234663852886e22,Lr=34028234663852886e22});var md,Bn,Le,lt,L,Fe,Ze,at,Je,ce,Dn,M,F,Fr,Rn,ma,Ft,Re,ve=j(()=>{"use strict";Ne();$e();md=64,Bn=(e,t)=>{if(t===3)throw new Error("vec3 has same alignment as vec4, use vec4 instead");switch(e){case 10:return t>1?`vec${t}<f16>`:"f16";case 1:return t>1?`vec${t}<f32>`:"f32";case 6:return t>1?`vec${t}<i32>`:"i32";case 12:return t>1?`vec${t}<u32>`:"u32";case 7:if(t>1)throw new Error("currently not supported vecX of uint64 yet");return["vec2<u32>","i32"];case 13:if(t>1)throw new Error("currently not supported vecX of uint64 yet");return["vec2<u32>","u32"];case 9:if(t!==4)throw new Error("bool must be vec4");return["u32","vec4<bool>"];default:throw new Error(`Unknown data type: ${e}`)}},Le=(e,t=1)=>{let r=Bn(e,t);return typeof r=="string"?r:r[0]},lt=(e,t=1)=>{let r=Bn(e,t);return typeof r=="string"?r:r[1]},L=e=>e.length===0?[]:[{type:"uint32",data:e},{type:"uint32",data:U.computeStrides(e)}],Fe=e=>e%4===0?4:e%2===0?2:1,Ze=(e="f32",t,r="0")=>!t||t===1?`${e}(${r})`:`vec${t}<${e}>(${r})`,at=(e,t,r)=>e==="f32"?r:t===1?`f32(${r})`:`vec${t}f(${r})`,Je=(e,t)=>t===4?`(${e}.x + ${e}.y + ${e}.z + ${e}.w)`:t===2?`(${e}.x + ${e}.y)`:t===3?`(${e}.x + ${e}.y + ${e}.z)`:e,ce=(e,t,r)=>e.startsWith("uniforms.")&&r>4?typeof t=="string"?`${e}[(${t}) / 4][(${t}) % 4]`:`${e}[${Math.floor(t/4)}][${t%4}]`:r>1?`${e}[${t}]`:e,Dn=(e,t,r,o,n)=>{let s=typeof r=="number",u=s?r:r.length,l=[...new Array(u).keys()],a=u<2?"u32":u<=4?`vec${u}<u32>`:`array<u32, ${u}>`,p=Bn(t,n),h=typeof p=="string"?p:p[1],g=typeof p=="string"?p:p[0],b={indices:a,value:h,storage:g,tensor:t},w=G=>typeof G=="string"?G:`${G}u`,y={offsetToIndices:!1,indicesToOffset:!1,broadcastedIndicesToOffset:!1,set:!1,setByIndices:!1,get:!1,getByIndices:!1},_=s?"uniforms.":"",I=`${_}${e}_shape`,$=`${_}${e}_strides`,x="";for(let G=0;G<u-1;G++)x+=`\n    let dim${G} = current / ${ce($,G,u)};\n    let rest${G} = current % ${ce($,G,u)};\n    indices[${G}] = dim${G};\n    current = rest${G};\n    `;x+=`indices[${u-1}] = current;`;let E=u<2?"":`\n  fn o2i_${e}(offset: u32) -> ${b.indices} {\n    var indices: ${b.indices};\n    var current = offset;\n    ${x}\n    return indices;\n  }`,A=G=>(y.offsetToIndices=!0,u<2?G:`o2i_${e}(${G})`),z=[];if(u>=2)for(let G=u-1;G>=0;G--)z.push(`${ce($,G,u)} * (indices[${G}])`);let R=u<2?"":`\n  fn i2o_${e}(indices: ${b.indices}) -> u32 {\n    return ${z.join("+")};\n  }`,V=G=>(y.indicesToOffset=!0,u<2?G:`i2o_${e}(${G})`),T=(...G)=>u===0?"0u":`${b.indices}(${G.map(w).join(",")})`,N=(G,ee)=>u<2?`${G}`:`${ce(G,ee,u)}`,te=(G,ee,be)=>u<2?`${G}=${be};`:`${ce(G,ee,u)}=${be};`,Y={},K=(G,ee)=>{y.broadcastedIndicesToOffset=!0;let be=`${ee.name}broadcastedIndicesTo${e}Offset`;if(be in Y)return`${be}(${G})`;let et=[];for(let ze=u-1;ze>=0;ze--){let Ue=ee.indicesGet("outputIndices",ze+ee.rank-u);et.push(`${N($,ze)} * (${Ue} % ${N(I,ze)})`)}return Y[be]=`fn ${be}(outputIndices: ${ee.type.indices}) -> u32 {\n             return ${et.length>0?et.join("+"):"0u"};\n           }`,`${be}(${G})`},Q=(G,ee)=>(()=>{if(b.storage===b.value)return`${e}[${G}]=${ee};`;if(b.storage==="vec2<u32>"&&b.value==="i32")return`${e}[${G}]=vec2<u32>(u32(${ee}), select(0u, 0xFFFFFFFFu, ${ee} < 0));`;if(b.storage==="vec2<u32>"&&b.value==="u32")return`${e}[${G}]=vec2<u32>(u32(${ee}), 0u);`;if(b.storage==="u32"&&b.value==="vec4<bool>")return`${e}[${G}]=dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(${ee}));`;throw new Error(`not supported combination of storage type ${b.storage} and value type ${b.value} yet`)})(),Z=G=>(()=>{if(b.storage===b.value)return`${e}[${G}]`;if(b.storage==="vec2<u32>"&&b.value==="i32")return`i32(${e}[${G}].x)`;if(b.storage==="vec2<u32>"&&b.value==="u32")return`u32(${e}[${G}].x)`;if(b.storage==="u32"&&b.value==="vec4<bool>")return`vec4<bool>(bool(${e}[${G}] & 0xFFu), bool(${e}[${G}] & 0xFF00u), bool(${e}[${G}] & 0xFF0000u), bool(${e}[${G}] & 0xFF000000u))`;throw new Error(`not supported combination of storage type ${b.storage} and value type ${b.value} yet`)})(),Ee=u<2?"":`\n  fn get_${e}ByIndices(indices: ${b.indices}) -> ${h} {\n    return ${Z(`i2o_${e}(indices)`)};\n  }`,Pe=u<2?"":(()=>{let G=l.map(be=>`d${be}: u32`).join(", "),ee=l.map(be=>`d${be}`).join(", ");return`\n  fn get_${e}(${G}) -> ${h} {\n    return get_${e}ByIndices(${T(ee)});\n  }`})(),fe=(...G)=>{if(G.length!==u)throw new Error(`indices length must be ${u}`);let ee=G.map(w).join(",");return u===0?Z("0u"):u===1?Z(ee[0]):(y.get=!0,y.getByIndices=!0,y.indicesToOffset=!0,`get_${e}(${ee})`)},Ie=G=>u<2?Z(G):(y.getByIndices=!0,y.indicesToOffset=!0,`get_${e}ByIndices(${G})`),he=u<2?"":`\n  fn set_${e}ByIndices(indices: ${b.indices}, value: ${h}) {\n    ${Q(`i2o_${e}(indices)`,"value")}\n  }`,ye=u<2?"":(()=>{let G=l.map(be=>`d${be}: u32`).join(", "),ee=l.map(be=>`d${be}`).join(", ");return`\n  fn set_${e}(${G}, value: ${h}) {\n    set_${e}ByIndices(${T(ee)}, value);\n  }`})();return{impl:()=>{let G=[],ee=!1;return y.offsetToIndices&&(G.push(E),ee=!0),y.indicesToOffset&&(G.push(R),ee=!0),y.broadcastedIndicesToOffset&&(Object.values(Y).forEach(be=>G.push(be)),ee=!0),y.set&&(G.push(ye),ee=!0),y.setByIndices&&(G.push(he),ee=!0),y.get&&(G.push(Pe),ee=!0),y.getByIndices&&(G.push(Ee),ee=!0),!s&&ee&&G.unshift(`const ${I} = ${b.indices}(${r.join(",")});`,`const ${$} = ${b.indices}(${U.computeStrides(r).join(",")});`),G.join(`\n`)},type:b,offsetToIndices:A,indicesToOffset:V,broadcastedIndicesToOffset:K,indices:T,indicesGet:N,indicesSet:te,set:(...G)=>{if(G.length!==u+1)throw new Error(`indices length must be ${u}`);let ee=G[u];if(typeof ee!="string")throw new Error("value must be string");let be=G.slice(0,u).map(w).join(",");return u===0?Q("0u",ee):u===1?Q(be[0],ee):(y.set=!0,y.setByIndices=!0,y.indicesToOffset=!0,`set_${e}(${be}, ${ee})`)},setByOffset:Q,setByIndices:(G,ee)=>u<2?Q(G,ee):(y.setByIndices=!0,y.indicesToOffset=!0,`set_${e}ByIndices(${G}, ${ee});`),get:fe,getByOffset:Z,getByIndices:Ie,usage:o,name:e,strides:$,shape:I,rank:u}},M=(e,t,r,o=1)=>Dn(e,t,r,"input",o),F=(e,t,r,o=1)=>Dn(e,t,r,"output",o),Fr=(e,t,r,o=1)=>Dn(e,t,r,"internal",o),Rn=class{constructor(t){this.normalizedDispatchGroup=t;this.internalVariables=[];this.variables=[];this.uniforms=[];this.variableIndex=0}guardAgainstOutOfBoundsWorkgroupSizes(t){return`if (global_idx >= ${typeof t=="number"?`${t}u`:t}) { return; }`}mainStart(t=md){let r=typeof t=="number"?t:t[0],o=typeof t=="number"?1:t[1],n=typeof t=="number"?1:t[2],s=this.normalizedDispatchGroup[1]===1&&this.normalizedDispatchGroup[2]===1,u=s?`@builtin(global_invocation_id) global_id : vec3<u32>,\n    @builtin(workgroup_id) workgroup_id : vec3<u32>,\n    @builtin(local_invocation_id) local_id : vec3<u32>`:`@builtin(local_invocation_id) local_id : vec3<u32>,\n    @builtin(local_invocation_index) local_idx : u32,\n    @builtin(workgroup_id) workgroup_id : vec3<u32>,\n    @builtin(num_workgroups) num_workgroups : vec3<u32>`,l=s?"let global_idx = global_id.x; let local_idx = local_id.x;":`let global_idx = (workgroup_id.z * num_workgroups[0] * num_workgroups[1] +\n          workgroup_id.y * num_workgroups[0] + workgroup_id.x) * ${r*o*n}u + local_idx;`;return`@compute @workgroup_size(${r}, ${o}, ${n})\n  fn main(${u}) {\n    ${l}\n  `}appendVariableUniforms(t){t.rank!==0&&(t.shape.startsWith("uniforms.")&&this.uniforms.push({name:t.shape.replace("uniforms.",""),type:"u32",length:t.rank}),t.strides.startsWith("uniforms.")&&this.uniforms.push({name:t.strides.replace("uniforms.",""),type:"u32",length:t.rank}))}declareVariable(t,r){if(t.usage==="internal")throw new Error("cannot use internal variable with declareVariable(). use registerInternalVariables() instead.");this.variables.push(t),this.appendVariableUniforms(t);let o=t.usage==="input"?"read":"read_write",n=t.type.storage;return`@group(0) @binding(${r}) var<storage, ${o}> ${t.name}: array<${n}>;`}declareVariables(...t){return t.map(r=>this.declareVariable(r,this.variableIndex++)).join(`\n`)}registerInternalVariable(t){if(t.usage!=="internal")throw new Error("cannot use input or output variable with registerInternalVariable(). use declareVariables() instead.");this.internalVariables.push(t),this.appendVariableUniforms(t)}registerInternalVariables(...t){return t.forEach(r=>this.registerInternalVariable(r)),this}registerUniform(t,r,o=1){return this.uniforms.push({name:t,type:r,length:o}),this}registerUniforms(t){return this.uniforms=this.uniforms.concat(t),this}uniformDeclaration(){if(this.uniforms.length===0)return"";let t=[];for(let{name:r,type:o,length:n}of this.uniforms)if(n&&n>4)t.push(`${r}:array<vec4<${o}>, ${Math.ceil(n/4)}>`);else{let s=n==null||n===1?o:`vec${n}<${o}>`;t.push(`${r}:${s}`)}return`\n      struct Uniforms { ${t.join(", ")} };\n      @group(0) @binding(${this.variableIndex}) var<uniform> uniforms: Uniforms;`}get additionalImplementations(){return this.uniformDeclaration()+this.variables.map(t=>t.impl()).join(`\n`)+this.internalVariables.map(t=>t.impl()).join(`\n`)}},ma=e=>new Rn(e),Ft=(e,t)=>{let r=e.length,o=[];for(let n=0;n<r;n++){let s=r-1-n,u=e[s]||1;(t[t.length-1-n]||1)>1&&u===1&&o.unshift(s)}return o},Re=e=>!0});var fd,fa,hd,gd,it,ha,ga,jt=j(()=>{"use strict";$e();je();ve();fd=e=>{if(!e||e.length!==1)throw new Error("Transpose requires 1 input.")},fa=(e,t)=>t&&t.length!==e?[...new Array(e).keys()].reverse():t,hd=(e,t)=>U.sortBasedOnPerm(e,fa(e.length,t)),gd=(e,t,r,o)=>{let n=[];n.push(`fn perm(i: ${o.type.indices}) -> ${r.type.indices} {\n    var a: ${r.type.indices};`);for(let s=0;s<t;++s)n.push(r.indicesSet("a",e[s],`i[${s}]`));return n.push("return a;}"),n.join(`\n`)},it=(e,t)=>{let r=e.dataType,o=e.dims.length,n=fa(o,t),s=Re(o),u=hd(e.dims,n),l=s?u.length:u,a=s?o:e.dims,p=F("output",r,l),h=M("a",r,a),g=b=>`\n  ${b.registerUniform("output_size","u32").declareVariables(h,p)}\n\n  ${gd(n,o,h,p)}\n\n  ${b.mainStart()}\n    ${b.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n\n    let indices = ${p.offsetToIndices("global_idx")};\n    let aIndices = perm(indices);\n\n    ${p.setByOffset("global_idx",h.getByIndices("aIndices"))}\n  }`;return{name:"Transpose",shaderCache:{hint:`${t}`,inputDependencies:s?["rank"]:["dims"]},getRunData:b=>{let w=U.size(u);return{outputs:[{dims:u,dataType:b[0].dataType}],dispatchGroup:{x:Math.ceil(w/64)},programUniforms:s?[{type:"uint32",data:w},...L(b[0].dims),...L(u)]:[{type:"uint32",data:w}]}},getShaderSource:g}},ha=(e,t)=>{fd(e.inputs),e.compute(it(e.inputs[0],t.perm))},ga=e=>ge({perm:e.perm})});var yd,bd,wd,vd,$d,Sd,xd,_d,Cd,Id,ct,ya,ba,wa,va,$a,Sa,xa,_a,Ca,Ia,Aa=j(()=>{"use strict";$e();ve();jr();jt();yd={max:"select(bestValue, candidate, candidate > bestValue)",min:"select(bestValue, candidate, candidate < bestValue)",mean:"bestValue + candidate",sum:"bestValue + candidate",prod:"bestValue * candidate",sumSquare:"bestValue + candidate * candidate",logSumExp:"bestValue + exp(candidate)",l1:"bestValue + abs(candidate)",l2:"bestValue + candidate * candidate",logSum:"bestValue + candidate"},bd={max:"select(bestValue, candidate, candidate > bestValue)",min:"select(bestValue, candidate, candidate < bestValue)",mean:"bestValue + candidate",sum:"bestValue + candidate",prod:"bestValue * candidate",sumSquare:"bestValue + candidate",logSumExp:"bestValue + candidate",l1:"bestValue + candidate",l2:"bestValue + candidate",logSum:"bestValue + candidate"},wd={max:"_A[offset]",min:"_A[offset]",mean:"0",sum:"0",prod:"1",sumSquare:"0",logSumExp:"0",l1:"0",l2:"0",logSum:"0"},vd={max:"bestValue",min:"bestValue",sum:"bestValue",prod:"bestValue",sumSquare:"bestValue",logSumExp:"log(bestValue)",l1:"bestValue",l2:"sqrt(bestValue)",logSum:"log(bestValue)"},$d=(e,t)=>{let r=[];for(let o=t-e;o<t;++o)r.push(o);return r},Sd=(e,t)=>{let r=[],o=e.length;for(let s=0;s<o;s++)t.indexOf(s)===-1&&r.push(e[s]);let n=t.map(s=>e[s]);return[r,n]},xd=(e,t)=>{let r=e.length+t.length,o=[],n=0;for(let s=0;s<r;s++)t.indexOf(s)===-1?o.push(e[n++]):o.push(1);return o},_d=(e,t)=>{for(let r=0;r<e.length;++r)if(e[e.length-r-1]!==t-1-r)return!1;return!0},Cd=(e,t)=>{let r=[];if(!_d(e,t)){for(let o=0;o<t;++o)e.indexOf(o)===-1&&r.push(o);e.forEach(o=>r.push(o))}return r},Id=(e,t,r,o,n,s,u)=>{let l=r[0].dims,a=U.size(s),p=U.size(u),h=M("_A",r[0].dataType,l),g=F("output",n,s),b=32,w=`\n          var<workgroup> aBestValues : array<${g.type.storage}, ${b}>;\n       `;return{name:e,shaderCache:t,getShaderSource:_=>`\n        ${_.registerUniform("reduceSize","u32").declareVariables(h,g)}\n        ${w}\n        fn DIV_CEIL(a : u32, b : u32) -> u32 {\n          return ((a - 1u) / b + 1u);\n         }\n         ${_.mainStart(b)}\n\n          let outputIndex = global_idx / ${b};\n          let offset = outputIndex * uniforms.reduceSize;\n\n          var bestValue = ${g.type.storage}(${wd[o]});\n          let Length = uniforms.reduceSize;\n          for (var k = local_idx; k < Length; k = k + ${b}) {\n           let candidate = ${g.type.storage}(${h.getByOffset("offset + k")});\n           bestValue = ${yd[o]};\n          }\n          aBestValues[local_idx] = bestValue;\n          workgroupBarrier();\n\n         var reduceSize = min(Length, ${b}u);\n         for (var currentSize = reduceSize / 2u; reduceSize > 1u;\n             currentSize = reduceSize / 2u) {\n           let interval = DIV_CEIL(reduceSize, 2u);\n           if (local_idx < currentSize) {\n            let candidate = aBestValues[local_idx + interval];\n            bestValue = ${bd[o]};\n            aBestValues[local_idx] = bestValue;\n           }\n           reduceSize = interval;\n           workgroupBarrier();\n         }\n\n         if (local_idx == 0u) {\n          ${g.setByOffset("outputIndex",`${o==="mean"?`bestValue / ${g.type.storage}(uniforms.reduceSize)`:`${vd[o]}`}`)};\n         }\n        }`,getRunData:()=>({outputs:[{dims:s,dataType:n}],dispatchGroup:{x:a},programUniforms:[{type:"uint32",data:p}]})}},ct=(e,t,r,o)=>{let n=e.inputs.length===1?r:Mn(e.inputs,r),s=n.axes;s.length===0&&!n.noopWithEmptyAxes&&(s=e.inputs[0].dims.map((w,y)=>y));let u=U.normalizeAxes(s,e.inputs[0].dims.length),l=u,a=e.inputs[0],p=Cd(l,e.inputs[0].dims.length);p.length>0&&(a=e.compute(it(e.inputs[0],p),{inputs:[0],outputs:[-1]})[0],l=$d(l.length,a.dims.length));let[h,g]=Sd(a.dims,l),b=h;n.keepDims&&(b=xd(h,u)),e.compute(Id(t,{hint:n.cacheKey,inputDependencies:["type"]},[a],o,e.inputs[0].dataType,b,g),{inputs:[a]})},ya=(e,t)=>{ct(e,"ReduceMeanShared",t,"mean")},ba=(e,t)=>{ct(e,"ReduceL1Shared",t,"l1")},wa=(e,t)=>{ct(e,"ReduceL2Shared",t,"l2")},va=(e,t)=>{ct(e,"ReduceLogSumExpShared",t,"logSumExp")},$a=(e,t)=>{ct(e,"ReduceMaxShared",t,"max")},Sa=(e,t)=>{ct(e,"ReduceMinShared",t,"min")},xa=(e,t)=>{ct(e,"ReduceProdShared",t,"prod")},_a=(e,t)=>{ct(e,"ReduceSumShared",t,"sum")},Ca=(e,t)=>{ct(e,"ReduceSumSquareShared",t,"sumSquare")},Ia=(e,t)=>{ct(e,"ReduceLogSumShared",t,"logSum")}});var pt,Ad,qr,Mn,mt,Td,Ed,Od,Pd,kd,Rd,Bd,Dd,Md,zd,ft,Ta,Ea,Oa,Pa,ka,Ra,Ba,Da,Ma,za,jr=j(()=>{"use strict";$e();je();ve();Aa();pt=e=>{if(!e||e.length===0||e.length>2)throw new Error("Reduce op requires 1 or 2 inputs.");if(e.length===2&&e[1].dims.length!==1)throw new Error("Invalid axes input dims.")},Ad=e=>["","",`var value = ${e.getByIndices("input_indices")};`,""],qr=(e,t,r,o,n,s,u=!1,l=!1)=>{let a=[],p=r[0].dims,h=p.length,g=U.normalizeAxes(n,h),b=!l&&g.length===0;p.forEach((I,$)=>{b||g.indexOf($)>=0?u&&a.push(1):a.push(I)});let w=a.length,y=U.size(a);return{name:e,shaderCache:t,getShaderSource:I=>{let $=[],x=M("_A",r[0].dataType,h),E=F("output",s,w),A=o(x,E,g),z=A[2];for(let R=0,V=0;R<h;R++)b||g.indexOf(R)>=0?(u&&V++,z=`for(var j${R}: u32 = 0; j${R} < ${p[R]}; j${R}++) {\n                  ${A[2].includes("last_index")?`let last_index = j${R};`:""}\n                  ${x.indicesSet("input_indices",R,`j${R}`)}\n                  ${z}\n                }`):($.push(`${x.indicesSet("input_indices",R,E.indicesGet("output_indices",V))};`),V++);return`\n\n        ${I.registerUniform("output_size","u32").declareVariables(x,E)}\n\n        ${I.mainStart()}\n          ${I.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n          var input_indices: ${x.type.indices};\n          let output_indices = ${E.offsetToIndices("global_idx")};\n\n          ${$.join(`\n`)}\n          ${A[0]}       // init ops for reduce max/min\n          ${A[1]}\n          ${z}\n          ${A[3]}\n          ${A.length===4?E.setByOffset("global_idx","value"):A.slice(4).join(`\n`)}\n        }`},getRunData:()=>({outputs:[{dims:a,dataType:s}],dispatchGroup:{x:Math.ceil(y/64)},programUniforms:[{type:"uint32",data:y},...L(p),...L(a)]})}},Mn=(e,t)=>{let r=[];return e[1].dims[0]>0&&e[1].getBigInt64Array().forEach(o=>r.push(Number(o))),ge({axes:r,keepDims:t.keepDims,noopWithEmptyAxes:t.noopWithEmptyAxes})},mt=(e,t,r,o)=>{let n=e.inputs,s=n.length===1?r:Mn(n,r);e.compute(qr(t,{hint:s.cacheKey,inputDependencies:["rank"]},[n[0]],s.noopWithEmptyAxes&&s.axes.length===0?Ad:o,s.axes,n[0].dataType,s.keepDims,s.noopWithEmptyAxes),{inputs:[0]})},Td=(e,t)=>{pt(e.inputs),mt(e,"ReduceLogSum",t,(o,n)=>[`var value = ${n.type.storage}(0);`,"",`value += ${o.getByIndices("input_indices")};`,"value = log(value);"])},Ed=(e,t)=>{pt(e.inputs),mt(e,"ReduceL1",t,(o,n)=>[`var value = ${n.type.storage}(0);`,"",`value += abs(${o.getByIndices("input_indices")});`,""])},Od=(e,t)=>{pt(e.inputs),mt(e,"ReduceL2",t,(o,n)=>[`var t = ${n.type.value}(0); var value = ${n.type.value}(0);`,"",`t = ${o.getByIndices("input_indices")}; value += (t * t);`,"value = sqrt(value);"])},Pd=(e,t)=>{pt(e.inputs),mt(e,"ReduceLogSumExp",t,(o,n)=>[`var value = ${n.type.storage}(0);`,"",`value += exp(${o.getByIndices("input_indices")});`,"value = log(value);"])},kd=(e,t)=>{pt(e.inputs),mt(e,"ReduceMax",t,(o,n,s)=>{let u=[];for(let l=0;l<o.rank;l++)(s.indexOf(l)>=0||s.length===0)&&u.push(o.indicesSet("input_indices",l,0));return[`${u.join(`\n`)}`,`var value = ${o.getByIndices("input_indices")};`,`value = max(value, ${o.getByIndices("input_indices")});`,""]})},Rd=(e,t)=>{pt(e.inputs),mt(e,"ReduceMean",t,(o,n,s)=>{let u=1;for(let l=0;l<o.rank;l++)(s.indexOf(l)>=0||s.length===0)&&(u*=e.inputs[0].dims[l]);return["var sum = f32(0);","",`sum += f32(${o.getByIndices("input_indices")});`,`let value = ${n.type.value}(sum / ${u});`]})},Bd=(e,t)=>{pt(e.inputs),mt(e,"ReduceMin",t,(o,n,s)=>{let u=[];for(let l=0;l<o.rank;l++)(s.indexOf(l)>=0||s.length===0)&&u.push(`input_indices[${l}] = 0;`);return[`${u.join(`\n`)}`,`var value = ${o.getByIndices("input_indices")};`,`value = min(value, ${o.getByIndices("input_indices")});`,""]})},Dd=(e,t)=>{pt(e.inputs),mt(e,"ReduceProd",t,(o,n)=>[`var value = ${n.type.storage}(1);`,"",`value *= ${o.getByIndices("input_indices")};`,""])},Md=(e,t)=>{pt(e.inputs),mt(e,"ReduceSum",t,(o,n)=>[`var value = ${n.type.storage}(0);`,"",`value += ${o.getByIndices("input_indices")};`,""])},zd=(e,t)=>{pt(e.inputs),mt(e,"ReduceSumSquare",t,(o,n)=>[`var t = ${n.type.value}(0); var value = ${n.type.value}(0);`,"",`t = ${o.getByIndices("input_indices")}; value += t * t;`,""])},ft=(e,t,r)=>{if(t.length===0)return r;let o=1,n=1;for(let s=0;s<t.length;s++)t.indexOf(s)===-1?o*=e[s]:n*=e[s];return n<32&&o>1024},Ta=(e,t)=>{ft(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Rd(e,t):ya(e,t)},Ea=(e,t)=>{ft(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Ed(e,t):ba(e,t)},Oa=(e,t)=>{ft(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Od(e,t):wa(e,t)},Pa=(e,t)=>{ft(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Pd(e,t):va(e,t)},ka=(e,t)=>{ft(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?kd(e,t):$a(e,t)},Ra=(e,t)=>{ft(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Bd(e,t):Sa(e,t)},Ba=(e,t)=>{ft(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Dd(e,t):xa(e,t)},Da=(e,t)=>{ft(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Md(e,t):_a(e,t)},Ma=(e,t)=>{ft(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?zd(e,t):Ca(e,t)},za=(e,t)=>{ft(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Td(e,t):Ia(e,t)}});var Ua,Va,Na,zn,Wa=j(()=>{"use strict";Ne();je();jr();Ua=e=>{if(!e||e.length===0||e.length>2)throw new Error("ArgMinMaxOp op requires 1 or 2 inputs.");if(e[0].dataType!==1)throw new Error("Invalid input type.")},Va=(e,t)=>{Ua(e.inputs);let r=(o,n,s)=>{let u=[];for(let l=0;l<o.rank;l++)(s.indexOf(l)>=0||s.length===0)&&u.push(`input_indices[${l}] = 0;`);return[`${u.join(`\n`)}`,`var value = ${o.getByIndices("input_indices")};\nvar best_index : i32 = 0;`,`if (${o.getByIndices("input_indices")} ${t.selectLastIndex>0?"<=":"<"} value) {\n         value = ${o.getByIndices("input_indices")};\n         best_index = i32(last_index);\n       }`,"",n.setByOffset("global_idx","best_index")]};e.compute(qr("ArgMin",{hint:t.cacheKey,inputDependencies:["rank"]},[e.inputs[0]],r,[t.axis],7,t.keepDims),{inputs:[0]})},Na=(e,t)=>{Ua(e.inputs);let r=(o,n,s)=>{let u=[];for(let l=0;l<o.rank;l++)(s.indexOf(l)>=0||s.length===0)&&u.push(`input_indices[${l}] = 0;`);return[`${u.join(`\n`)}`,`var value = ${o.getByIndices("input_indices")};\nvar best_index : i32 = 0;`,`if (${o.getByIndices("input_indices")} ${t.selectLastIndex>0?">=":">"} value) {\n         value = ${o.getByIndices("input_indices")};\n         best_index = i32(last_index);\n       }`,"",n.setByOffset("global_idx","best_index")]};e.compute(qr("argMax",{hint:t.cacheKey,inputDependencies:["rank"]},[e.inputs[0]],r,[t.axis],7,t.keepDims),{inputs:[0]})},zn=e=>ge(e)});var Ud,Vd,Nd,Wd,Kr,Hd,Ha,Un=j(()=>{"use strict";Ne();Nr();ve();Ud=(e,t)=>{let r=e[0],o=e[1],n=e[2],s=e[3],u=e[4],l=e[5];if(u&&l)throw new Error("Attention cannot have both past and relative_position_bias");if(r.dims.length!==3)throw new Error(\'Input "input" must have 3 dimensions\');let a=r.dims[0],p=r.dims[1],h=r.dims[2];if(n.dims.length!==1)throw new Error(\'Input "bias" is expected to have 1 dimensions\');if(o.dims.length!==2)throw new Error(\'Input "weights" is expected to have 2 dimensions\');if(o.dims[0]!==h)throw new Error("Input 1 dimension 0 should have same length as dimension 2 of input 0");if(n.dims[0]!==o.dims[1])throw new Error(\'Input "bias" dimension 0 should have same length as dimension 1 of input "weights"\');let g=n.dims[0]/3,b=g,w=b;if(t.qkvHiddenSizes.length>0){if(t.qkvHiddenSizes.length!==3)throw new Error("qkv_hidden_sizes attribute should have 3 elements");for(let E of t.qkvHiddenSizes)if(E%t.numHeads!==0)throw new Error("qkv_hidden_sizes should be divisible by num_heads");g=t.qkvHiddenSizes[0],b=t.qkvHiddenSizes[1],w=t.qkvHiddenSizes[2]}let y=p;if(g!==b)throw new Error("qkv_hidden_sizes first element should be same as the second");if(n.dims[0]!==g+b+w)throw new Error(\'Input "bias" dimension 0 should have same length as sum of Q/K/V hidden sizes\');let _=0;if(u){if(b!==w)throw new Error(\'Input "past" expect k_hidden_size == v_hidden_size\');if(u.dims.length!==5)throw new Error(\'Input "past" must have 5 dimensions\');if(u.dims[0]!==2)throw new Error(\'Input "past" first dimension must be 2\');if(u.dims[1]!==a)throw new Error(\'Input "past" second dimension must be batch_size\');if(u.dims[2]!==t.numHeads)throw new Error(\'Input "past" third dimension must be num_heads\');if(u.dims[4]!==b/t.numHeads)throw new Error(\'Input "past" fifth dimension must be k_hidden_size / num_heads\');t.pastPresentShareBuffer||(_=u.dims[3])}let I=y+_,$=-1,x=0;if(s)throw new Error("Mask not supported");if(u)throw new Error("past is not supported");if(l)throw new Error("relativePositionBias is not supported");return{batchSize:a,sequenceLength:p,pastSequenceLength:_,kvSequenceLength:y,totalSequenceLength:I,maxSequenceLength:$,inputHiddenSize:h,hiddenSize:g,vHiddenSize:w,headSize:Math.floor(g/t.numHeads),vHeadSize:Math.floor(w/t.numHeads),numHeads:t.numHeads,isUnidirectional:!1,pastPresentShareBuffer:!1,maskFilterValue:t.maskFilterValue,maskType:x,scale:t.scale,broadcastResPosBias:!1,passPastInKv:!1,qkvFormat:1}},Vd=(e,t,r,o)=>{let n=Fe(o),s=64,u=o/n;u<s?s=1:u/8<64&&(s=Math.ceil(u/8));let l=Math.ceil(o/n/s),p=[{type:Xe(t.dataType),data:1/o},{type:"uint32",data:u},{type:"uint32",data:l}],h=Le(t.dataType,n),g=b=>{let w=F("x",t.dataType,t.dims,n),y="thread_max_vector";n===2?y="max(thread_max_vector.x, thread_max_vector.y)":n===4&&(y="max(max(thread_max_vector.x, thread_max_vector.y), max(thread_max_vector.z, thread_max_vector.w))");let _=lt(t.dataType),I=[{name:"d_inv",type:_},{name:"d_comp",type:"u32"},{name:"elements_per_wg",type:"u32"}];return`\n  var<workgroup> wgMax: array<f32, ${s}>;\n  var<workgroup> wgSum: array<f32, ${s}>;\n  ${b.registerUniforms(I).declareVariables(w)}\n  ${b.mainStart([s,1,1])}\n    let localOffset = local_idx * uniforms.elements_per_wg;\n    let offset: u32 = workgroup_id.x * uniforms.d_comp + localOffset;\n\n    var thread_max_vector = ${Ze("f32",n,"-3.402823e+38f")};\n    for (var i: u32 = 0; i < uniforms.elements_per_wg && i + localOffset < uniforms.d_comp; i++) {\n      thread_max_vector = max(${at(_,n,"x[offset + i]")}, thread_max_vector);\n    }\n    wgMax[local_idx] = ${y};\n    workgroupBarrier();\n\n    var maxValue = -3.402823e+38f;\n    for (var i = 0u; i < ${s}; i++) {\n      maxValue = max(wgMax[i], maxValue);\n    }\n\n    var sumVector = ${Ze("f32",n,"0")};\n    for (var i: u32 = 0; i < uniforms.elements_per_wg && i + localOffset < uniforms.d_comp; i++) {\n      sumVector += exp(${at(_,n,"x[offset + i]")} - maxValue);\n    }\n    wgSum[local_idx] = ${Je("sumVector",n)};\n    workgroupBarrier();\n\n    var sum: f32 = 0;\n    for (var i = 0u; i < ${s}; i++) {\n      sum += wgSum[i];\n    }\n\n    if (sum == 0) {\n      for (var i: u32 = 0; i < uniforms.elements_per_wg && i + localOffset < uniforms.d_comp; i++) {\n        x[offset + i] = ${Ze("f32",n,"uniforms.d_inv")};\n      }\n    } else {\n      for (var i: u32 = 0; i < uniforms.elements_per_wg && i + localOffset < uniforms.d_comp; i++) {\n        let f32input = ${at(_,n,"x[offset + i]")};\n        x[offset + i] = ${w.type.value}(exp(f32input - maxValue) / sum);\n      }\n    }\n  }`};e.compute({name:"AttentionProbsSoftmax",shaderCache:{hint:`${s};${h};${n}`},getShaderSource:g,getRunData:()=>({outputs:[],dispatchGroup:{x:r},programUniforms:p})},{inputs:[t],outputs:[]})},Nd=(e,t,r,o,n,s)=>{let u=[n.batchSize,n.numHeads,n.sequenceLength,n.kvSequenceLength+n.pastSequenceLength],l=s.scale===0?1/Math.sqrt(n.headSize):s.scale,a=Fe(n.headSize),p=n.headSize/a,h=12,g={x:Math.ceil(n.totalSequenceLength/h),y:Math.ceil(n.sequenceLength/h),z:n.batchSize*n.numHeads},b=Xe(t.dataType),w=[{type:"uint32",data:n.sequenceLength},{type:"uint32",data:p},{type:"uint32",data:n.totalSequenceLength},{type:"uint32",data:n.kvSequenceLength},{type:b,data:l}],y=[t,r],_=$=>{let x=M("q",t.dataType,t.dims,a),E=M("key",r.dataType,r.dims,a),A=F("output",t.dataType,u),z=Le(t.dataType),R=[{name:"M",type:"u32"},{name:"K",type:"u32"},{name:"N",type:"u32"},{name:"kv_sequence_length",type:"u32"},{name:"alpha",type:z}];return`\n  const beta: ${z} = 1.0;\n  const TILE_SIZE = ${h}u;\n\n  var<workgroup> tileQ: array<${x.type.storage}, ${h*h}>;\n  var<workgroup> tileK: array<${x.type.storage}, ${h*h}>;\n  ${$.registerUniforms(R).declareVariables(x,E,A)}\n  ${$.mainStart([h,h,1])}\n    // x holds the N and y holds the M\n    let headIdx = workgroup_id.z;\n    let m = workgroup_id.y * TILE_SIZE;\n    let n = workgroup_id.x * TILE_SIZE;\n    let lm = m + local_id.y;\n    let ln = n + local_id.x;\n\n    let qOffset = uniforms.M * uniforms.K * headIdx + m * uniforms.K;\n    let kOffset = uniforms.kv_sequence_length * uniforms.K * headIdx + n * uniforms.K;\n\n    var value = ${Ze(z,a)};\n    for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {\n      if (m + local_id.y < uniforms.M && w + local_id.x < uniforms.K) {\n        tileQ[TILE_SIZE * local_id.y + local_id.x] = q[qOffset + local_id.y * uniforms.K + w + local_id.x];\n      }\n      if (n + local_id.y < uniforms.N && w + local_id.x < uniforms.K) {\n        tileK[TILE_SIZE * local_id.y + local_id.x] = key[kOffset + local_id.y * uniforms.K + w + local_id.x];\n      }\n      workgroupBarrier();\n\n      for (var k: u32 = 0u; k<TILE_SIZE && w+k < uniforms.K; k++) {\n        value += tileQ[TILE_SIZE * local_id.y + k] * tileK[TILE_SIZE * local_id.x + k];\n      }\n\n      workgroupBarrier();\n    }\n\n    let headOffset = headIdx * uniforms.M * uniforms.N;\n    if (lm < uniforms.M && ln < uniforms.N) {\n      let outputIdx = headOffset + lm * uniforms.N + ln;\n      output[outputIdx] = ${Je("value",a)} * uniforms.alpha;\n    }\n  }`},I=e.compute({name:"AttentionProbs",shaderCache:{hint:`${a}`,inputDependencies:["type","type"]},getRunData:()=>({outputs:[{dims:u,dataType:t.dataType,gpuDataType:0}],dispatchGroup:g,programUniforms:w}),getShaderSource:_},{inputs:y,outputs:[-1]})[0];return Vd(e,I,n.batchSize*n.numHeads*n.sequenceLength,n.totalSequenceLength),I},Wd=(e,t,r,o)=>{let n=[o.batchSize,o.sequenceLength,o.vHiddenSize],s=12,u={x:Math.ceil(o.vHeadSize/s),y:Math.ceil(o.sequenceLength/s),z:o.batchSize*o.numHeads},l=[{type:"uint32",data:o.sequenceLength},{type:"uint32",data:o.totalSequenceLength},{type:"uint32",data:o.vHeadSize},{type:"uint32",data:o.numHeads},{type:"uint32",data:o.vHiddenSize}],a=p=>{let h=M("probs",t.dataType,t.dims),g=M("v",r.dataType,r.dims),b=F("output",t.dataType,n),w=[{name:"M",type:"u32"},{name:"K",type:"u32"},{name:"N",type:"u32"},{name:"num_heads",type:"u32"},{name:"v_hidden_size",type:"u32"}];return`\n  const TILE_SIZE = ${s}u;\n  var<workgroup> tileQ: array<${h.type.value}, ${s*s}>;\n  var<workgroup> tileK: array<${h.type.value}, ${s*s}>;\n  ${p.registerUniforms(w).declareVariables(h,g,b)}\n  ${p.mainStart([s,s,1])}\n   let headIdx = workgroup_id.z;\n   let m = workgroup_id.y * TILE_SIZE + local_id.y;\n   let n = workgroup_id.x * TILE_SIZE + local_id.x;\n\n   let offsetA = headIdx * (uniforms.M * uniforms.K) + m * uniforms.K;\n   let offsetB = headIdx * (uniforms.N * uniforms.K) + n;\n\n   var value = ${h.type.storage}(0);\n   for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {\n     if (m < uniforms.M && w + local_id.x < uniforms.K) {\n       tileQ[TILE_SIZE * local_id.y + local_id.x] = probs[offsetA + w + local_id.x];\n     }\n     if (n < uniforms.N && w + local_id.y < uniforms.K) {\n       tileK[TILE_SIZE * local_id.y + local_id.x] = v[offsetB + (w + local_id.y) * uniforms.N];\n     }\n     workgroupBarrier();\n     for (var k: u32 = 0u; k<TILE_SIZE && w+k < uniforms.K; k++) {\n       value += tileQ[TILE_SIZE * local_id.y + k] * tileK[TILE_SIZE * k + local_id.x];\n     }\n     workgroupBarrier();\n   }\n\n   // we need to transpose output from BNSH_v to BSND_v\n   let batchIdx = workgroup_id.z / uniforms.num_heads;\n   let currentBatchHeadNumber = workgroup_id.z % uniforms.num_heads;\n   let headOffset = (batchIdx * uniforms.M * uniforms.num_heads + currentBatchHeadNumber) * uniforms.N;\n   if (m < uniforms.M && n < uniforms.N) {\n     let outputIdx = batchIdx * uniforms.M *uniforms.v_hidden_size + m * uniforms.v_hidden_size\n       + currentBatchHeadNumber * uniforms.N + n;\n     output[outputIdx] = value;\n   }\n  }`};return e.compute({name:"AttentionScore",shaderCache:{inputDependencies:["type","type"]},getRunData:()=>({outputs:[{dims:n,dataType:t.dataType,gpuDataType:0}],dispatchGroup:u,programUniforms:l}),getShaderSource:a},{inputs:[t,r],outputs:[0]})[0]},Kr=(e,t,r,o,n,s,u,l,a,p,h)=>{let g=Nd(e,t,r,a,p,h);Wd(e,g,o,p)},Hd=(e,t)=>{let r=[t.batchSize,t.numHeads,t.sequenceLength,t.headSize],o=t.sequenceLength,n=t.inputHiddenSize,s=t.headSize,u=12,l={x:Math.ceil(t.headSize/u),y:Math.ceil(t.sequenceLength/u),z:t.batchSize*t.numHeads},a=[e.inputs[0],e.inputs[1],e.inputs[2]],p=[{type:"uint32",data:o},{type:"uint32",data:n},{type:"uint32",data:s},{type:"uint32",data:t.numHeads},{type:"uint32",data:t.headSize},{type:"uint32",data:t.hiddenSize},{type:"uint32",data:t.hiddenSize+t.hiddenSize+t.vHiddenSize}],h=g=>{let b=F("output_q",a[0].dataType,r),w=F("output_k",a[0].dataType,r),y=F("output_v",a[0].dataType,r),_=M("input",a[0].dataType,a[0].dims),I=M("weight",a[1].dataType,a[1].dims),$=M("bias",a[2].dataType,a[2].dims),x=_.type.storage,E=[{name:"M",type:"u32"},{name:"K",type:"u32"},{name:"N",type:"u32"},{name:"num_heads",type:"u32"},{name:"head_size",type:"u32"},{name:"hidden_size",type:"u32"},{name:"ldb",type:"u32"}];return`\n  const TILE_SIZE = ${u}u;\n  var<workgroup> tileInput: array<${x}, ${u*u}>;\n  var<workgroup> tileWeightQ: array<${x}, ${u*u}>;\n  var<workgroup> tileWeightK: array<${x}, ${u*u}>;\n  var<workgroup> tileWeightV: array<${x}, ${u*u}>;\n  ${g.registerUniforms(E).declareVariables(_,I,$,b,w,y)}\n  ${g.mainStart([u,u,1])}\n    let batchIndex = workgroup_id.z / uniforms.num_heads;\n    let headNumber = workgroup_id.z % uniforms.num_heads;\n    let m = workgroup_id.y * TILE_SIZE + local_id.y;\n    let n = workgroup_id.x * TILE_SIZE + local_id.x;\n\n    let inputOffset = batchIndex * (uniforms.M * uniforms.K) + m * uniforms.K;\n    let biasOffsetQ = headNumber * uniforms.head_size;\n    let biasOffsetK = uniforms.hidden_size + biasOffsetQ;\n    let biasOffsetV = uniforms.hidden_size + biasOffsetK;\n\n    var valueQ = ${x}(0);\n    var valueK = ${x}(0);\n    var valueV = ${x}(0);\n    for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {\n      if (m < uniforms.M && w + local_id.x < uniforms.K) {\n        tileInput[TILE_SIZE * local_id.y + local_id.x] = input[inputOffset + w + local_id.x];\n      }\n      if (n < uniforms.N && w + local_id.y < uniforms.K) {\n        let offset = n + (w + local_id.y) * uniforms.ldb;\n        tileWeightQ[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetQ + offset];\n        tileWeightK[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetK + offset];\n        tileWeightV[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetV + offset];\n      }\n      workgroupBarrier();\n      for (var k: u32 = 0u; k<TILE_SIZE && w+k < uniforms.K; k++) {\n        let inputTileOffset = TILE_SIZE * local_id.y + k;\n        let weightTileOffset = TILE_SIZE * k + local_id.x;\n        valueQ += tileInput[inputTileOffset] * tileWeightQ[weightTileOffset];\n        valueK += tileInput[inputTileOffset] * tileWeightK[weightTileOffset];\n        valueV += tileInput[inputTileOffset] * tileWeightV[weightTileOffset];\n      }\n\n      workgroupBarrier();\n    }\n\n    let headOffset = (m * uniforms.N + n) % uniforms.head_size;\n    valueQ += bias[headOffset + biasOffsetQ];\n    valueK += bias[headOffset + biasOffsetK];\n    valueV += bias[headOffset + biasOffsetV];\n\n    let offset = workgroup_id.z * uniforms.M * uniforms.N;\n    if (m < uniforms.M && n < uniforms.N) {\n      let outputIdx = offset + m * uniforms.N + n;\n      output_q[outputIdx] = valueQ;\n      output_k[outputIdx] = valueK;\n      output_v[outputIdx] = valueV;\n    }\n  }`};return e.compute({name:"AttentionPrepare",shaderCache:{inputDependencies:["type","type","type"]},getRunData:()=>({outputs:[{dims:r,dataType:e.inputs[0].dataType,gpuDataType:0},{dims:r,dataType:e.inputs[0].dataType,gpuDataType:0},{dims:r,dataType:e.inputs[0].dataType,gpuDataType:0}],dispatchGroup:l,programUniforms:p}),getShaderSource:h},{inputs:a,outputs:[-1,-1,-1]})},Ha=(e,t)=>{let r=Ud(e.inputs,t),[o,n,s]=Hd(e,r);return Kr(e,o,n,s,e.inputs[4],void 0,void 0,void 0,e.inputs[5],r,t)}});var Gd,Ld,Fd,Ga,La=j(()=>{"use strict";Lt();$e();je();ve();Gd=(e,t)=>{if(!e||e.length!==5)throw new Error("BatchNormalization requires 5 inputs");let r=(o,n,s)=>{let u=n.length;if(u!==o.length)throw new Error(`${s}: num dimensions != ${u}`);n.forEach((l,a)=>{if(l!==o[a])throw new Error(`${s}: dim[${a}] do not match`)})};if(e[0].dims.length>1){let o=t.format==="NHWC"?t.spatial?e[0].dims.slice(-1):e[0].dims.slice(-1).concat(e[0].dims.slice(1,e[0].dims.length-1)):e[0].dims.slice(1,t.spatial?2:void 0);r(e[1].dims,o,"Invalid input scale"),r(e[2].dims,o,"Invalid input B"),r(e[3].dims,o,"Invalid input mean"),r(e[4].dims,o,"Invalid input var")}else r(e[1].dims,[1],"Invalid input scale"),r(e[2].dims,[1],"Invalid input B"),r(e[3].dims,[1],"Invalid input mean"),r(e[4].dims,[1],"Invalid input var")},Ld=(e,t)=>{let{epsilon:r,spatial:o,format:n}=t,s=e[0].dims,u=o?Fe(s[s.length-1]):1,l=n==="NHWC"&&s.length>1?u:1,a=U.size(s)/u,p=Re(s.length)&&o,h=p?s.length:s,g=M("x",e[0].dataType,e[0].dims,u),b=M("scale",e[1].dataType,e[1].dims,l),w=M("bias",e[2].dataType,e[2].dims,l),y=M("inputMean",e[3].dataType,e[3].dims,l),_=M("inputVar",e[4].dataType,e[4].dims,l),I=F("y",e[0].dataType,h,u),$=()=>{let E="";if(o)E=`let cOffset = ${s.length===1?"0u":n==="NHWC"?`outputIndices[${s.length-1}] / ${u}`:"outputIndices[1]"};`;else if(n==="NCHW")E=`\n            ${I.indicesSet("outputIndices","0","0")}\n            let cOffset = ${I.indicesToOffset("outputIndices")};`;else{E=`var cIndices = ${b.type.indices}(0);\n                       cIndices[0] = outputIndices[${s.length-1}];`;for(let A=1;A<b.rank;A++)E+=`cIndices[${A}] = outputIndices[${A}];`;E+=`let cOffset = ${b.indicesToOffset("cIndices")};`}return E},x=E=>`\n  const epsilon = ${r};\n  ${E.registerUniform("outputSize","u32").declareVariables(g,b,w,y,_,I)}\n  ${E.mainStart()}\n  ${E.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n    var outputIndices = ${I.offsetToIndices(`global_idx * ${u}`)};\n    ${$()}\n    let scale = ${b.getByOffset("cOffset")};\n    let bias = ${w.getByOffset("cOffset")};\n    let inputMean = ${y.getByOffset("cOffset")};\n    let inputVar = ${_.getByOffset("cOffset")};\n    let x = ${g.getByOffset("global_idx")};\n    let value = (x - inputMean) * inverseSqrt(inputVar + epsilon) * scale + bias;\n    ${I.setByOffset("global_idx","value")}\n  }`;return{name:"BatchNormalization",shaderCache:{hint:`${t.epsilon}_${t.format}_${o}_${u}`,inputDependencies:p?["rank","type","type","type","type"]:void 0},getShaderSource:x,getRunData:()=>({outputs:[{dims:e[0].dims,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(a/64)},programUniforms:p?[{type:"uint32",data:a},...L(s)]:[{type:"uint32",data:a}]})}},Fd=e=>ge(e),Ga=(e,t)=>{let{inputs:r,outputCount:o}=e,n=Fd({...t,outputCount:o});if(Gt.webgpu.validateInputContent&&Gd(r,n),t.trainingMode)throw new Error("BatchNormalization trainingMode is not supported yet.");e.compute(Ld(r,n))}});var jd,qd,Fa,ja=j(()=>{"use strict";$e();ve();jd=e=>{if(e[0].dims.length!==3)throw new Error("input should have 3 dimensions");if(![320,640,1280].includes(e[0].dims[2]))throw new Error("number of channels should be 320, 640 or 1280");if(e[1].dims.length!==1)throw new Error("bias is expected to have 1 dimensions");if(e[0].dims[2]!==e[1].dims[0])throw new Error("last dimension of input and bias are not the same")},qd=e=>{let t=e[0].dims,r=e[0].dims[2],o=U.size(t)/4,n=e[0].dataType,s=M("input",n,t,4),u=M("bias",n,[r],4),l=M("residual",n,t,4),a=F("output",n,t,4);return{name:"BiasAdd",getRunData:()=>({outputs:[{dims:t,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(o/64)}}),getShaderSource:h=>`\n  const channels = ${r}u / 4;\n  ${h.declareVariables(s,u,l,a)}\n\n  ${h.mainStart()}\n    ${h.guardAgainstOutOfBoundsWorkgroupSizes(o)}\n    let value = ${s.getByOffset("global_idx")}\n      + ${u.getByOffset("global_idx % channels")} + ${l.getByOffset("global_idx")};\n    ${a.setByOffset("global_idx","value")}\n  }`}},Fa=e=>{jd(e.inputs),e.compute(qd(e.inputs))}});var Kd,Ae,qa,Ka,Ya,Za,Qa,Xa,Ja,ei,ti,Yd,ri,ni,oi,ai,Yr,ii,Zr,si,ui,di,li,ci,pi,mi,fi,hi,gi,yi,bi,wi,vi,$i,Si,xi,Vn=j(()=>{"use strict";Ne();$e();je();ve();Kd=(e,t,r,o,n,s)=>{let u=Math.ceil(t/4),l="";typeof n=="string"?l=`${n}(a)`:l=n("a");let a=M("inputData",r,[u],4),p=F("outputData",o,[u],4);return`\n      ${e.registerUniform("vec_size","u32").declareVariables(a,p)}\n\n  ${s??""}\n\n  ${e.mainStart()}\n    ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}\n\n    let a = ${a.getByOffset("global_idx")};\n    ${p.setByOffset("global_idx",l)}\n  }`},Ae=(e,t,r,o,n,s=e.dataType)=>({name:t,shaderCache:{hint:n,inputDependencies:["type"]},getShaderSource:u=>Kd(u,U.size(e.dims),e.dataType,s,r,o),getRunData:u=>({outputs:[{dims:e.dims,dataType:s}],dispatchGroup:{x:Math.ceil(U.size(u[0].dims)/64/4)},programUniforms:[{type:"uint32",data:Math.ceil(U.size(e.dims)/4)}]})}),qa=e=>{e.compute(Ae(e.inputs[0],"Abs","abs"))},Ka=e=>{e.compute(Ae(e.inputs[0],"Acos","acos"))},Ya=e=>{e.compute(Ae(e.inputs[0],"Acosh","acosh"))},Za=e=>{e.compute(Ae(e.inputs[0],"Asin","asin"))},Qa=e=>{e.compute(Ae(e.inputs[0],"Asinh","asinh"))},Xa=e=>{e.compute(Ae(e.inputs[0],"Atan","atan"))},Ja=e=>{e.compute(Ae(e.inputs[0],"Atanh","atanh"))},ei=e=>ge(e),ti=(e,t)=>{let r;switch(t.to){case 10:r="vec4<f16>";break;case 1:r="vec4<f32>";break;case 12:r="vec4<u32>";break;case 6:r="vec4<i32>";break;case 9:r="vec4<bool>";break;default:throw new RangeError(`not supported type (specified in attribute \'to\' from \'Cast\' operator): ${t.to}`)}e.compute(Ae(e.inputs[0],"Cast",r,void 0,t.cacheKey,t.to))},Yd=e=>{let t=e.length>=2&&e[1].data!==0?e[1].getFloat32Array()[0]:Gr,r=e.length>=3&&e[2].data!==0?e[2].getFloat32Array()[0]:Lr;return ge({min:t,max:r})},ri=(e,t)=>{let r=e.inputs.length===1?t:Yd(e.inputs),o=lt(e.inputs[0].dataType);e.compute(Ae(e.inputs[0],"Clip",n=>`clamp(${n}, clip_min_, clip_max_)`,`\n    const clip_min_: vec4<${o}> = vec4(${o}(${r.min}));\n    const clip_max_: vec4<${o}> = vec4(${o}(${r.max}));\n`,r.cacheKey),{inputs:[0]})},ni=e=>{e.compute(Ae(e.inputs[0],"Ceil","ceil"))},oi=e=>{e.compute(Ae(e.inputs[0],"Cos","cos"))},ai=e=>{e.compute(Ae(e.inputs[0],"Cosh","cosh"))},Yr=e=>ge(e),ii=(e,t)=>{let r=lt(e.inputs[0].dataType);e.compute(Ae(e.inputs[0],"Elu",o=>`elu_vf32(${o})`,`\n  const elu_alpha_ = ${r}(${t.alpha});\n\n  fn elu_f32(a: ${r}) -> ${r} {\n  return select((exp(a) - 1.0) * elu_alpha_, a, a >= 0.0);\n  }\n\n  fn elu_vf32(v: vec4<${r}>) -> vec4<${r}> {\n  return vec4(elu_f32(v.x), elu_f32(v.y), elu_f32(v.z), elu_f32(v.w));\n  }`,t.cacheKey))},Zr=(e,t="f32")=>`\nconst r0: ${t} = 0.3275911;\nconst r1: ${t} = 0.254829592;\nconst r2: ${t} = -0.284496736;\nconst r3: ${t} = 1.421413741;\nconst r4: ${t} = -1.453152027;\nconst r5: ${t} = 1.061405429;\n\nfn erf_vf32(v: ${e}) -> ${e} {\n  let absv = abs(v);\n  let x = 1.0 / (1.0 + r0 * absv);\n  return sign(v) * (1.0 - ((((r5 * x + r4) * x + r3) * x + r2) * x + r1) * x * exp(-absv * absv));\n}`,si=e=>{let t=lt(e.inputs[0].dataType);e.compute(Ae(e.inputs[0],"Erf",r=>`erf_vf32(${r})`,Zr(`vec4<${t}>`,t)))},ui=e=>{e.compute(Ae(e.inputs[0],"Exp","exp"))},di=e=>{e.compute(Ae(e.inputs[0],"Floor","floor"))},li=e=>{let t=lt(e.inputs[0].dataType);e.compute(Ae(e.inputs[0],"Gelu",r=>`0.5 * ${r} * (1.0 + erf_vf32(${r} * 0.7071067811865475))`,Zr(`vec4<${t}>`,t)))},ci=(e,t)=>{let r=lt(e.inputs[0].dataType);e.compute(Ae(e.inputs[0],"LeakyRelu",o=>`select(leaky_relu_alpha_ * ${o}, ${o}, ${o} >= vec4<${r}>(0.0))`,`const leaky_relu_alpha_ = ${r}(${t.alpha});`,t.cacheKey))},pi=e=>{e.compute(Ae(e.inputs[0],"Not",t=>`!${t}`))},mi=e=>{e.compute(Ae(e.inputs[0],"Neg",t=>`-${t}`))},fi=e=>{e.compute(Ae(e.inputs[0],"Reciprocal",t=>`1.0/${t}`))},hi=e=>{let t=lt(e.inputs[0].dataType);e.compute(Ae(e.inputs[0],"Relu",r=>`select(vec4<${t}>(0.0), ${r}, ${r} > vec4<${t}>(0.0))`))},gi=e=>{e.compute(Ae(e.inputs[0],"Sigmoid",t=>`(1.0 / (1.0 + exp(-${t})))`))},yi=e=>{e.compute(Ae(e.inputs[0],"Sin","sin"))},bi=e=>{e.compute(Ae(e.inputs[0],"Sinh","sinh"))},wi=e=>{e.compute(Ae(e.inputs[0],"Sqrt","sqrt"))},vi=e=>{e.compute(Ae(e.inputs[0],"Tan","tan"))},$i=e=>{e.compute(Ae(e.inputs[0],"Tanh","tanh"))},Si=(e,t)=>{let r=lt(e.inputs[0].dataType);return e.compute(Ae(e.inputs[0],"ThresholdedRelu",o=>`select(vec4<${r}>(0.0), ${o}, ${o} > thresholded_relu_alpha_)`,`const thresholded_relu_alpha_ = vec4<${r}>(${t.alpha});`,t.cacheKey)),0},xi=e=>{e.compute(Ae(e.inputs[0],"Log","log"))}});var Qd,Xd,_i,Ci=j(()=>{"use strict";$e();ve();Vn();Qd=e=>{if(e[0].dims.length!==3)throw new Error("input should have 3 dimensions");if(![2560,5120,10240].includes(e[0].dims[2]))throw new Error("hidden state should be 2560, 5120 or 10240");if(e[1].dims.length!==1)throw new Error("bias is expected to have 1 dimensions");if(e[0].dims[2]!==e[1].dims[0])throw new Error("last dimension of input and bias are not the same")},Xd=e=>{let t=e[0].dims.slice();t[2]=t[2]/2;let r=M("input",e[0].dataType,e[0].dims,4),o=M("bias",e[0].dataType,[e[0].dims[2]],4),n=F("output",e[0].dataType,t,4),s=U.size(t)/4,u=Le(e[0].dataType);return{name:"BiasSplitGelu",getRunData:()=>({outputs:[{dims:t,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(s/64)}}),getShaderSource:a=>`\n  const M_SQRT2 = sqrt(2.0);\n  const halfChannels = ${e[0].dims[2]/4/2}u;\n\n  ${a.declareVariables(r,o,n)}\n\n  ${Zr(`vec4<${u}>`,u)}\n\n  ${a.mainStart()}\n    ${a.guardAgainstOutOfBoundsWorkgroupSizes(s)}\n    let biasIdx = global_idx % halfChannels;\n    let batchIndex = global_idx / halfChannels;\n    let inputOffset = biasIdx + batchIndex * halfChannels * 2;\n    let valueLeft = input[inputOffset] + bias[biasIdx];\n    let valueRight = input[inputOffset + halfChannels] + bias[biasIdx + halfChannels];\n    let geluRight = valueRight * 0.5 * (erf_vf32(valueRight / M_SQRT2) + 1);\n\n    ${n.setByOffset("global_idx","valueLeft * geluRight")}\n  }`}},_i=e=>{Qd(e.inputs),e.compute(Xd(e.inputs))}});var Jd,el,ht,Ii,Ai,Ti,Ei,Oi,Pi,ki,Ri,Bi,Di,Mi=j(()=>{"use strict";Ne();$e();ve();Jd=(e,t,r,o,n,s,u,l,a,p,h,g,b)=>{let w,y;typeof l=="string"?w=y=(R,V)=>`${l}((${R}),(${V}))`:typeof l=="function"?w=y=l:(w=l.scalar,y=l.vector);let _=g?t.length:t,I=g?r.length:r,$=g?o.length:o,x=F("outputData",h,$,4),E=M("aData",a,_,4),A=M("bData",p,I,4),z;if(n)if(s){let R=U.size(t)===1,V=U.size(r)===1,T=t.length>0&&t[t.length-1]%4===0,N=r.length>0&&r[r.length-1]%4===0;R||V?z=x.setByOffset("global_idx",y(R?`${E.type.value}(${E.getByOffset("0")}.x)`:E.getByOffset("global_idx"),V?`${A.type.value}(${A.getByOffset("0")}.x)`:A.getByOffset("global_idx"))):z=`\n            let outputIndices = ${x.offsetToIndices("global_idx * 4u")};\n            let offsetA = ${E.broadcastedIndicesToOffset("outputIndices",x)};\n            let offsetB = ${A.broadcastedIndicesToOffset("outputIndices",x)};\n            ${x.setByOffset("global_idx",y(u||T?E.getByOffset("offsetA / 4u"):`${E.type.value}(${E.getByOffset("offsetA / 4u")}[offsetA % 4u])`,u||N?A.getByOffset("offsetB / 4u"):`${A.type.value}(${A.getByOffset("offsetB / 4u")}[offsetB % 4u])`))}\n          `}else z=x.setByOffset("global_idx",y(E.getByOffset("global_idx"),A.getByOffset("global_idx")));else{if(!s)throw new Error("no necessary to use scalar implementation for element-wise binary op implementation.");let R=(V,T,N="")=>{let te=`aData[indexA${T}][componentA${T}]`,Y=`bData[indexB${T}][componentB${T}]`;return`\n            let outputIndices${T} = ${x.offsetToIndices(`global_idx * 4u + ${T}u`)};\n            let offsetA${T} = ${E.broadcastedIndicesToOffset(`outputIndices${T}`,x)};\n            let offsetB${T} = ${A.broadcastedIndicesToOffset(`outputIndices${T}`,x)};\n            let indexA${T} = offsetA${T} / 4u;\n            let indexB${T} = offsetB${T} / 4u;\n            let componentA${T} = offsetA${T} % 4u;\n            let componentB${T} = offsetB${T} % 4u;\n            ${V}[${T}] = ${N}(${w(te,Y)});\n          `};h===9?z=`\n            var data = vec4<u32>(0);\n            ${R("data",0,"u32")}\n            ${R("data",1,"u32")}\n            ${R("data",2,"u32")}\n            ${R("data",3,"u32")}\n            outputData[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));`:z=`\n            ${R("outputData[global_idx]",0)}\n            ${R("outputData[global_idx]",1)}\n            ${R("outputData[global_idx]",2)}\n            ${R("outputData[global_idx]",3)}\n          `}return`\n        ${e.registerUniform("vec_size","u32").declareVariables(E,A,x)}\n\n        ${b??""}\n\n        ${e.mainStart()}\n        ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}\n        ${z}\n      }`},el=(e,t,r,o,n,s,u=r.dataType)=>{let l=!U.areEqual(r.dims,o.dims),a=r.dims,p=U.size(r.dims),h=!1,g=!1,b=[l];if(l){let y=dt.calcShape(r.dims,o.dims,!1);if(!y)throw new Error("Can\'t perform binary op on the given tensors");a=y,p=U.size(a);let _=U.size(r.dims)===1,I=U.size(o.dims)===1,$=r.dims.length>0&&r.dims[r.dims.length-1]%4===0,x=o.dims.length>0&&o.dims[o.dims.length-1]%4===0;b.push(_),b.push(I),b.push($),b.push(x);let E=1;for(let A=1;A<a.length;A++){let z=r.dims[r.dims.length-A]??1,R=o.dims[o.dims.length-A]??1;if(z===R)E*=z;else break}E%4===0?(g=!0,h=!0):(_||I||$||x)&&(h=!0)}else h=!0;b.push(h);let w=Re(r.dims.length)&&Re(o.dims.length)&&Re(a.length);return{name:e,shaderCache:{hint:t+b.map(y=>y.toString()).join("_"),inputDependencies:w?["rank","rank"]:["dims","dims"]},getShaderSource:y=>Jd(y,r.dims,o.dims,a,h,l,g,n,r.dataType,o.dataType,u,w,s),getRunData:()=>({outputs:[{dims:a,dataType:u}],dispatchGroup:{x:Math.ceil(p/64/4)},programUniforms:w?[{type:"uint32",data:Math.ceil(U.size(a)/4)},...L(r.dims),...L(o.dims),...L(a)]:[{type:"uint32",data:Math.ceil(U.size(a)/4)}]})}},ht=(e,t,r,o,n,s)=>{e.compute(el(t,n??"",e.inputs[0],e.inputs[1],r,o,s))},Ii=e=>{ht(e,"Add",(t,r)=>`${t}+${r}`)},Ai=e=>{ht(e,"Div",(t,r)=>`${t}/${r}`)},Ti=e=>{ht(e,"Equal",{scalar:(t,r)=>`u32(${t}==${r})`,vector:(t,r)=>`vec4<u32>(${t}==${r})`},void 0,void 0,9)},Ei=e=>{ht(e,"Mul",(t,r)=>`${t}*${r}`)},Oi=e=>{let t=M("input",e.inputs[0].dataType,e.inputs[0].dims).type.value;ht(e,"Pow",{scalar:(o,n)=>`pow_custom(${o},${n})`,vector:(o,n)=>`pow_vector_custom(${o},${n})`},`\n    fn pow_custom(a : ${t}, b : ${t}) -> ${t} {\n      if (b == ${t}(0.0)) {\n        return ${t}(1.0);\n      } else if (a < ${t}(0.0) && f32(b) != floor(f32(b))) {\n        return ${t}(pow(f32(a), f32(b))); // NaN\n      }\n      return select(sign(a), ${t}(1.0), round(f32(abs(b) % ${t}(2.0))) != 1.0) * ${t}(${t==="i32"?"round":""}(pow(f32(abs(a)), f32(b))));\n    }\n    fn pow_vector_custom(a : vec4<${t}>, b : vec4<${t}>) -> vec4<${t}> {\n      // TODO: implement vectorized pow\n      return vec4<${t}>(pow_custom(a.x, b.x), pow_custom(a.y, b.y), pow_custom(a.z, b.z), pow_custom(a.w, b.w));\n    }\n      `)},Pi=e=>{ht(e,"Sub",(t,r)=>`${t}-${r}`)},ki=e=>{ht(e,"Greater",{scalar:(t,r)=>`u32(${t}>${r})`,vector:(t,r)=>`vec4<u32>(${t}>${r})`},void 0,void 0,9)},Ri=e=>{ht(e,"Less",{scalar:(t,r)=>`u32(${t}<${r})`,vector:(t,r)=>`vec4<u32>(${t}<${r})`},void 0,void 0,9)},Bi=e=>{ht(e,"GreaterOrEqual",{scalar:(t,r)=>`u32(${t}>=${r})`,vector:(t,r)=>`vec4<u32>(${t}>=${r})`},void 0,void 0,9)},Di=e=>{ht(e,"LessOrEqual",{scalar:(t,r)=>`u32(${t}<=${r})`,vector:(t,r)=>`vec4<u32>(${t}<=${r})`},void 0,void 0,9)}});var rl,nl,ol,al,zi,Ui,Vi=j(()=>{"use strict";$e();je();ve();rl=e=>{if(!e||e.length<1)throw new Error("too few inputs");let t=e[0].dataType,r=e[0].dims.length;for(let o of e){if(o.dataType!==t)throw new Error("input tensors should be one type");if(o.dims.length!==r)throw new Error("input tensors should have the same shape")}},nl=(e,t)=>`\n  fn calculateInputIndex(index: u32) -> u32 {\n    let sizeInConcatAxis = array<u32, ${e}u>(${t});\n    for (var i: u32 = 0u; i < ${e}; i += 1u ) {\n      if (index < sizeInConcatAxis[i]) {\n        return i;\n      }\n    }\n    return ${e}u;\n  }`,ol=(e,t)=>{let r=e.length,o=[];for(let n=0;n<r;++n){let s=t.setByOffset("global_idx",e[n].getByIndices("indices"));r===1?o.push(s):n===0?o.push(`if (inputIndex == ${n}u) { ${s} }`):n===r-1?o.push(`else { ${s} }`):o.push(`else if (inputIndex == ${n}) { ${s} }`)}return o.join(`\n`)},al=(e,t)=>{let r=e[0].dims.slice();if(t>=r.length||t<-1*r.length)throw new Error("axis specified for concat doesn\'t match input dimensionality");let o=t<0?r.length+t:t,n=r.slice(0);for(let A=1;A<e.length;A++){let z=e[A].dims.slice();for(let R=0;R<r.length;R++)if(R===o)n[o]+=z[R];else if(r[R]!==z[R])throw new Error("non concat dimensions must match")}let s=U.size(n),u=new Array(e.length),l=new Array(e.length),a=e[0].dataType,p=0,h=[],g=[],b=[],w=[{type:"uint32",data:s}];for(let A=0;A<e.length;++A)p+=e[A].dims[o],u[A]=p,b.push(Re(e[A].dims.length)),g.push(b[A]?e[A].dims.length:e[A].dims),l[A]=M(`input${A}`,a,g[A]),h.push(b[A]?"rank":"dims"),w.push({type:"uint32",data:u[A]});for(let A=0;A<e.length;++A)b[A]&&w.push(...L(e[A].dims));let y=Re(n.length);y&&w.push(...L(n));let _=y?n.length:n,I=F("output",a,_),$=I.indicesGet("indices",o),x=Array.from(Array(u.length).keys()).map(A=>`uniforms.sizeInConcatAxis${A}`).join(","),E=A=>`\n\n  ${(()=>{A.registerUniform("outputSize","u32");for(let z=0;z<e.length;z++)A.registerUniform(`sizeInConcatAxis${z}`,"u32");return A.declareVariables(...l,I)})()}\n\n  ${nl(u.length,x)}\n\n  ${A.mainStart()}\n    ${A.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n\n    var indices = ${I.offsetToIndices("global_idx")};\n\n    let inputIndex = calculateInputIndex(${$});\n    if (inputIndex != 0u) {\n      let sizeInConcatAxis = array<u32, ${u.length}u>(${x});\n      ${$} -= sizeInConcatAxis[inputIndex - 1u];\n    }\n\n    ${ol(l,I)}\n  }`;return{name:"Concat",shaderCache:{hint:`${t}`,inputDependencies:h},getRunData:()=>({outputs:[{dims:n,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(s/64)},programUniforms:w}),getShaderSource:E}},zi=(e,t)=>{rl(e.inputs),e.compute(al(e.inputs,t.axis))},Ui=e=>ge({axis:e.axis})});var gt,Qr,It=j(()=>{"use strict";$e();gt=(e,t)=>{switch(e.activation){case"Relu":return{activationFunction:"",applyActivation:`value = max(value, ${t}(0.0));`};case"Sigmoid":return{activationFunction:"",applyActivation:`value = (${t}(1.0) / (${t}(1.0) + exp(-value)));`};case"Clip":return{activationFunction:`const clip_min_=${t}(${e.clipMin});const clip_max_=${t}(${e.clipMax});`,applyActivation:"value = clamp(value, clip_min_, clip_max_);"};default:return{activationFunction:"",applyActivation:""}}},Qr=e=>{let t=e?.activation||"";if(t==="Clip"){let[r,o]=e?.activation_params||[Gr,Lr];return{activation:t,clipMax:o,clipMin:r,activationCacheKey:`${t}:${r},${o}`}}return{activation:t,activationCacheKey:t}}});var Ke,Xr,Jr=j(()=>{"use strict";Ke=(e,t)=>{switch(e){case 1:return t;case 2:return`vec2<${t}>`;case 3:return`vec3<${t}>`;case 4:return`vec4<${t}>`;default:throw new Error(`${e}-component is not supported.`)}},Xr=e=>`\n      ${e?"value = value + getBiasByOutputCoords(coords);":""}\n      `});var en,Nn=j(()=>{"use strict";en=e=>`\nfn getIndexFromCoords4D(coords : vec4<i32>, shape : vec4<i32>) -> i32 {\n  return dot(coords, vec4<i32>(\n      shape.y * shape.z * shape.w, shape.z * shape.w, shape.w, 1));\n}\nfn getOutputIndexFromCoords(coords : vec4<i32>) -> i32 {\n  return dot(coords, vec4<i32>(\n    i32(${e}.x), i32(${e}.y), i32(${e}.z), 1));\n}\n`});var il,sl,mr,Ni,ul,fr,dl,tn,hr=j(()=>{"use strict";$e();ve();It();Jr();il=(e,t)=>e?`\n        mm_Asub[inputRow][inputCol] = mm_readA(batch,\n          kStart + inputRow,\n          globalRowStart / innerElementSize + inputCol${t?", batchIndices":""});\n        `:`\n        mm_Asub[inputRow][inputCol] = mm_readA(batch,\n          globalRow + innerRow,\n          kStart / innerElementSize + inputCol${t?", batchIndices":""});\n        `,sl=(e,t)=>e?`\n        let ACached0 = mm_Asub[k * innerElementSize][localRow];\n        let ACached1 = mm_Asub[k * innerElementSize + 1][localRow];\n        let ACached2 = mm_Asub[k * innerElementSize + 2][localRow];\n        ${t===3?"":"let ACached3 = mm_Asub[k * innerElementSize + 3][localRow];"}\n        for (var i = 0; i < rowPerThread; i = i + 1) {\n          acc[i] = BCached0 * ACached0[i] + acc[i];\n          acc[i] = BCached1 * ACached1[i] + acc[i];\n          acc[i] = BCached2 * ACached2[i] + acc[i];\n          ${t===3?"":"acc[i] = BCached3 * ACached3[i] + acc[i];"}\n        }`:`\n        for (var i = 0; i < rowPerThread; i = i + 1) {\n          let ACached = mm_Asub[tileRow + i][k];\n          acc[i] = BCached0 * ACached.x + acc[i];\n          acc[i] = BCached1 * ACached.y + acc[i];\n          acc[i] = BCached2 * ACached.z + acc[i];\n          ${t===3?"":"acc[i] = BCached3 * ACached.w + acc[i];"}\n        }`,mr=(e,t,r="f32",o,n=!1,s=32,u=!1,l=32)=>{let a=t[1]*e[1],p=t[0]*e[0],h=n?a:s,g=n?s:a,b=h/t[0],w=s/t[1];if(!((n&&b===4&&e[1]===4||!n&&(b===3||b===4))&&h%t[0]===0&&s%t[1]===0&&e[0]===4))throw new Error(`If transposeA ${n} is true, innerElementSize ${b} and workPerThread[1] ${e[1]} must be 4.\n      Otherwise, innerElementSize ${b} must be 3 or 4.\n  tileAWidth ${h} must be divisible by workgroupSize[0]${t[0]}. tileInner ${s} must be divisible by workgroupSize[1] ${t[1]}. colPerThread ${e[0]} must be 4.`);return`\nvar<workgroup> mm_Asub: array<array<vec${b}<${r}>, ${h/b}>, ${g}>;\nvar<workgroup> mm_Bsub: array<array<vec4<${r}>, ${p/e[0]}>, ${s}>;\n\nconst rowPerThread = ${e[1]};\nconst colPerThread = ${e[0]};\nconst innerElementSize = ${b};\nconst tileInner = ${s};\n\n@compute @workgroup_size(${t[0]}, ${t[1]}, ${t[2]})\nfn main(@builtin(local_invocation_id) localId : vec3<u32>,\n        @builtin(global_invocation_id) globalId : vec3<u32>,\n        @builtin(workgroup_id) workgroupId : vec3<u32>) {\n  let localRow = i32(localId.y);\n  let tileRow = localRow * rowPerThread;\n  let tileCol = i32(localId.x);\n\n  let globalRow =i32(globalId.y) * rowPerThread;\n  let globalCol = i32(globalId.x);\n  let batch = ${u?"0":"i32(globalId.z)"};\n  ${o?`let batchIndices = ${o.offsetToIndices("u32(batch)")};`:""}\n  let globalRowStart = i32(workgroupId.y) * ${a};\n\n  let numTiles = ${u?`${Math.ceil(l/s)}`:"(uniforms.dimInner - 1) / tileInner + 1"};\n  var kStart = ${u?`i32(globalId.z) * ${l}`:"0"};\n\n  var acc: array<vec4<${r}>, rowPerThread>;\n\n  // Loop over shared dimension.\n  let tileRowB = localRow * ${w};\n  for (var t = 0; t < numTiles; t = t + 1) {\n      // Load one tile of A into local memory.\n      for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n          let inputRow = tileRow + innerRow;\n          let inputCol = tileCol;\n          ${il(n,o)}\n      }\n\n      // Load one tile of B into local memory.\n      for (var innerRow = 0; innerRow < ${w}; innerRow = innerRow + 1) {\n          let inputRow = tileRowB + innerRow;\n          let inputCol = tileCol;\n          mm_Bsub[inputRow][inputCol] = mm_readB(batch, kStart + inputRow, globalCol${o?", batchIndices":""});\n      }\n      kStart = kStart + tileInner;\n      workgroupBarrier();\n\n      // Compute acc values for a single thread.\n      for (var k = 0; k < tileInner / innerElementSize; k = k + 1) {\n          let BCached0 = mm_Bsub[k * innerElementSize][tileCol];\n          let BCached1 = mm_Bsub[k * innerElementSize + 1][tileCol];\n          let BCached2 = mm_Bsub[k * innerElementSize + 2][tileCol];\n          ${b===3?"":"let BCached3 = mm_Bsub[k * innerElementSize + 3][tileCol];"}\n\n          ${sl(n,b)}\n      }\n\n      workgroupBarrier();\n  }\n\n  for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      mm_write(batch, globalRow + innerRow, globalCol, acc[innerRow]);\n  }\n}`},Ni=(e,t)=>e?`\n            mm_Asub[inputRow][inputCol] = mm_readA(batch,\n              kStart + inputRow,\n              globalRowStart + inputCol${t?", batchIndices":""});\n            `:`\n            mm_Asub[inputRow][inputCol] = mm_readA(batch,\n              globalRowStart + inputRow,\n              kStart + inputCol${t?", batchIndices":""});\n            `,ul=e=>e?"let ACached = mm_Asub[k][tileRow + innerRow];":"let ACached = mm_Asub[tileRow + innerRow][k];",fr=(e,t,r="f32",o,n=!1,s=32,u=!1,l=32,a=!1)=>{let p=e[1]*t[1],h=e[0]*t[0],g=n?p:s,b=n?s:p;if(!(b%t[1]===0&&g%t[0]===0&&s%t[1]===0))throw new Error(`tileAHight ${b} must be divisible by workgroupSize[1]${t[1]}, tileAWidth ${g} must be divisible by workgroupSize[0]${t[0]}, tileInner ${s} must be divisible by workgroupSize[1]${t[1]}`);let w=b/t[1],y=g/t[0],_=s/t[1],I=a?`\n    let localRow = i32(localId.y);\n    let localCol = i32(localId.x);\n    let globalRowStart = i32(workgroupId.y) * ${p};\n    let globalColStart = i32(workgroupId.x) * ${h};\n\n    // Loop over shared dimension.\n    for (var t = 0; t < numTiles; t = t + 1) {\n      // Load one tile of A into local memory.\n      for (var inputRow = localRow; inputRow < ${b}; inputRow = inputRow + ${t[1]}) {\n        for (var inputCol = localCol; inputCol < ${g}; inputCol = inputCol + ${t[0]}) {\n          ${Ni(n,o)}\n        }\n      }\n      // Load one tile of B into local memory.\n      for (var inputRow = localRow; inputRow < ${s}; inputRow = inputRow + ${t[1]}) {\n            for (var inputCol = localCol; inputCol < ${h}; inputCol = inputCol + ${t[0]}) {\n          mm_Bsub[inputRow][inputCol] = mm_readB(batch,\n            kStart + inputRow,\n            globalColStart + inputCol${o?", batchIndices":""});\n        }\n      }\n      kStart = kStart + tileInner;\n      workgroupBarrier();\n\n      // Compute acc values for a single thread.\n      var BCached : array<${r}, colPerThread>;\n      for (var k = 0; k < tileInner; k = k + 1) {\n        for (var inner = 0; inner < colPerThread; inner = inner + 1) {\n          BCached[inner] = mm_Bsub[k][localCol + inner * ${t[0]}];\n        }\n        for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n          let ACached = ${n?`mm_Asub[k][localRow + innerRow * ${t[1]}];`:`mm_Asub[localRow + innerRow * ${t[1]}][k];`}\n          for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n            acc[innerRow][innerCol] = acc[innerRow][innerCol] +\n                ACached * BCached[innerCol];\n          }\n        }\n      }\n      workgroupBarrier();\n    }\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      let gRow = globalRowStart + localRow + innerRow * ${t[1]};\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n        let gCol = globalColStart + localCol + innerCol * ${t[0]};\n        mm_write(batch, gRow, gCol, acc[innerRow][innerCol]);\n      }\n    }\n    `:`\nlet tileRow = i32(localId.y) * rowPerThread;\nlet tileCol = i32(localId.x) * colPerThread;\n\nlet globalRow = i32(globalId.y) * rowPerThread;\nlet globalCol = i32(globalId.x) * colPerThread;\nlet globalRowStart = i32(workgroupId.y) * ${p};\n\nlet tileRowA = i32(localId.y) * ${w};\nlet tileColA = i32(localId.x) * ${y};\nlet tileRowB = i32(localId.y) * ${_};\n// Loop over shared dimension.\nfor (var t = 0; t < numTiles; t = t + 1) {\n  // Load one tile of A into local memory.\n  for (var innerRow = 0; innerRow < ${w}; innerRow = innerRow + 1) {\n    for (var innerCol = 0; innerCol < ${y}; innerCol = innerCol + 1) {\n      let inputRow = tileRowA + innerRow;\n      let inputCol = tileColA + innerCol;\n      ${Ni(n,o)}\n    }\n  }\n\n  // Load one tile of B into local memory.\n  for (var innerRow = 0; innerRow < ${_}; innerRow = innerRow + 1) {\n    for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n      let inputRow = tileRowB + innerRow;\n      let inputCol = tileCol + innerCol;\n      mm_Bsub[inputRow][inputCol] = mm_readB(batch,\n        kStart + inputRow,\n        globalCol + innerCol${o?", batchIndices":""});\n    }\n  }\n  kStart = kStart + tileInner;\n  workgroupBarrier();\n\n  // Compute acc values for a single thread.\n  var BCached : array<${r}, colPerThread>;\n  for (var k = 0; k < tileInner; k = k + 1) {\n    for (var inner = 0; inner < colPerThread; inner = inner + 1) {\n      BCached[inner] = mm_Bsub[k][tileCol + inner];\n    }\n\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      ${ul(n)}\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n        acc[innerRow][innerCol] = acc[innerRow][innerCol] + ACached * BCached[innerCol];\n      }\n    }\n  }\n\n  workgroupBarrier();\n}\n\nfor (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n  for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n    mm_write(batch, globalRow + innerRow, globalCol + innerCol,\n        acc[innerRow][innerCol]);\n  }\n}\n`;return`\n  var<workgroup> mm_Asub : array<array<${r}, ${g}>, ${b}>;\n  var<workgroup> mm_Bsub : array<array<${r}, ${h}>, ${s}>;\n  const rowPerThread = ${e[1]};\n  const colPerThread = ${e[0]};\n  const tileInner = ${s};\n\n@compute @workgroup_size(${t[0]}, ${t[1]}, ${t[2]})\nfn main(@builtin(local_invocation_id) localId : vec3<u32>,\n        @builtin(global_invocation_id) globalId : vec3<u32>,\n        @builtin(workgroup_id) workgroupId : vec3<u32>) {\n    let batch = ${u?"0":"i32(globalId.z)"};\n    ${o?`let batchIndices = ${o.offsetToIndices("u32(batch)")};`:""}\n    let numTiles = ${u?`${Math.ceil(l/s)}`:"(uniforms.dimInner - 1) / tileInner + 1"};\n    var kStart = ${u?`i32(globalId.z) * ${l}`:"0"};\n\n    var acc : array<array<${r}, colPerThread>, rowPerThread>;\n\n    // Without this initialization strange values show up in acc.\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n        acc[innerRow][innerCol] = 0.0;\n      }\n    }\n    ${I}\n  }\n`},dl=(e,t,r,o,n,s=!1)=>{let[u,l,a]=n,[p,h,g,b]=o,w=Ft(u,a),y=Ft(l,a),_=Le(o[0].type.tensor),I=()=>{let E=h.rank,A=p.rank,z=`var aIndices: ${h.type.indices};`;for(let R=E-2-1,V=A-1;R>=0;R--,V--)z+=`\naIndices[${R}] = ${A>1?`batchIndices[${V}]`:"batchIndices"};`;return w.forEach(R=>{z+=`\naIndices[${R}] = 0;`}),z+=`\naIndices[${E-2}] = u32(row);\n                   aIndices[${E-1}] = u32(colIn);`,z},$=()=>{let E=g.rank,A=p.rank,z=`var bIndices: ${g.type.indices};`;for(let R=E-2-1,V=A-1;R>=0;R--,V--)z+=`\nbIndices[${R}] = ${A>1?`batchIndices[${V}]`:"batchIndices"};`;return y.forEach(R=>{z+=`\nbIndices[${R}] = 0;`}),z+=`\nbIndices[${E-2}] = u32(row);\n                   bIndices[${E-1}] = u32(colIn);`,z};return`\n    fn mm_readA(batch: i32, row: i32, colIn: i32, batchIndices: ${p.type.indices}) -> ${Ke(e,_)} {\n      var value = ${Ke(e,_)}(0.0);\n      let col = colIn * ${e};\n      if(row < uniforms.dimAOuter && col < uniforms.dimInner)\n      {\n        ${I()}\n        value = ${h.getByIndices("aIndices")};\n      }\n      return value;\n    }\n\n    fn mm_readB(batch: i32, row: i32, colIn: i32, batchIndices: ${p.type.indices}) -> ${Ke(e,_)} {\n      var value = ${Ke(e,_)}(0.0);\n      let col = colIn * ${e};\n      if(row < uniforms.dimInner && col < uniforms.dimBOuter)\n      {\n        ${$()}\n        value = ${g.getByIndices("bIndices")};\n      }\n      return value;\n    }\n\n    fn mm_write(batch: i32, row: i32, colIn: i32, valueIn: ${Ke(e,_)}) {\n      let col = colIn * ${e};\n      if (row < uniforms.dimAOuter && col < uniforms.dimBOuter) {\n        var value = valueIn;\n        let coords = vec3<i32>(batch, row, colIn);\n        ${t?`value = value + ${s?"bias[colIn]":`${Ke(e,_)}(bias[row])`};`:""}\n        ${r}\n        ${b.setByIndices("vec3<u32>(coords)","value")}\n      }\n    }\n    `},tn=(e,t,r,o,n=!1)=>{let s=e[0].dims,u=e[1].dims,l=s.slice(0,-2),a=u.slice(0,-2),p=o?o.slice(0,-2):r.slice(0,-2),h=Re(p.length),g=h?p.length:p,b=Fr("batchDims",e[0].dataType,g,1),w=U.size(p),y=s[s.length-2],_=s[s.length-1],I=u[u.length-1],$=_%4===0&&I%4===0,x=y<=8?[4,1,1]:[4,4,1],E=[8,8,1],A=[Math.ceil(I/E[0]/x[0]),Math.ceil(y/E[1]/x[1]),Math.ceil(w/E[2]/x[2])],z=Le(e[0].dataType),R=$?4:1,V=[...l,y,_/R],T=Re(V.length),N=T?V.length:V,te=[...a,_,I/R],Y=Re(te.length),K=Y?te.length:te,Q=[w,y,I/R],Z=M("a",e[0].dataType,N,R),Ee=M("b",e[1].dataType,K,R),Pe=F("result",e[0].dataType,Q.length,R),fe=[Z,Ee],Ie=[{type:"int32",data:y},{type:"int32",data:I},{type:"int32",data:_}];h&&Ie.push(...L(p)),T&&Ie.push(...L(V)),Y&&Ie.push(...L(te));let he=[];he.push(T?"rank":"dims"),he.push(Y?"rank":"dims");let ye=e.length>2,{activationFunction:We,applyActivation:De}=gt(t,Pe.type.value),Ge=dl(R,ye,De,[b,Z,Ee,Pe],[l,a,p],n);if(ye){let ee=n?R:1;fe.push(M("bias",e[2].dataType,e[2].dims.length,ee)),Ie.push(...L(e[2].dims)),he.push("rank")}Ie.push(...L(Q));let G=ee=>`\n  ${ee.registerUniform("dimAOuter","i32").registerUniform("dimBOuter","i32").registerUniform("dimInner","i32").registerInternalVariables(b).declareVariables(...fe,Pe)}\n  ${We}\n  ${Ge}\n  ${$?mr(x,E,z,b):fr(x,E,z,b)}\n                   `;return{name:"MatMul",shaderCache:{hint:t.activationCacheKey+`${x}${$}${n}`,inputDependencies:he},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:A[0],y:A[1],z:A[2]},programUniforms:Ie}),getShaderSource:G}}});var ll,Wi,Hi=j(()=>{"use strict";Ct();ve();It();Jr();Nn();hr();ll=(e,t,r,o,n=!1,s,u=4,l=4,a=4,p="f32")=>{let h=Y=>{switch(Y){case 1:return"resData = x[xIndex];";case 3:return`resData = vec3<${p}>(x[xIndex], x[xIndex + 1], x[xIndex + 2]);`;case 4:return"resData = x[xIndex / 4];";default:throw new Error(`innerElementSize ${Y} is not supported.`)}},g=Y=>{switch(Y){case 1:return"return w[row * i32(uniforms.w_shape[3]) + colIn];";case 4:return"return w[row * i32(uniforms.w_shape[3]) / 4 + colIn];";default:throw new Error(`innerElementSize ${Y} is not supported.`)}},b=e?`\n    let coord = vec4<i32>(batch, xRow, xCol, xCh);\n    `:`\n    let coord = vec4<i32>(batch, xCh, xRow, xCol);\n    `,w=e?`\n    let coords = vec4<i32>(\n      batch,\n      row / outWidth,\n      row % outWidth,\n      col);\n    `:`\n    let coords = vec4<i32>(\n      batch,\n      row,\n      col / outWidth,\n      col % outWidth);\n    `,y=e?"i32(uniforms.x_shape[1])":"i32(uniforms.x_shape[2])",_=e?"i32(uniforms.x_shape[2])":"i32(uniforms.x_shape[3])",I=e?"row":"col",$=e?"col":"row",x=`\n    let inChannels = i32(uniforms.w_shape[2]);\n    let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};\n    let outRow = ${I} / outWidth;\n    let outCol = ${I} % outWidth;\n\n    let WRow = ${$} / (filterDims[1] * inChannels);\n    let WCol = ${$} / inChannels % filterDims[1];\n    let xRow = outRow * stride[0] + dilation[0] * WRow - pad[0];\n    let xCol = outCol * stride[1] + dilation[1] * WCol - pad[1];\n    let xCh = ${$} % inChannels;\n    var resData = ${Ke(u,p)}(0.0);\n    // The bounds checking is always needed since we use it to pad zero for\n    // the \'same\' padding type.\n    if (xRow >= 0 && xRow < ${y} && xCol >= 0 && xCol < ${_}) {\n      ${b}\n      let xIndex = getIndexFromCoords4D(coord, vec4<i32>(uniforms.x_shape));\n      ${h(u)}\n    }\n    return resData;`,E=e?t&&o?`\n    let col = colIn * ${u};\n    ${x}`:`\n    let col = colIn * ${u};\n    if (row < uniforms.dimAOuter && col < uniforms.dimInner) {\n      ${x}\n    }\n    return ${Ke(u,p)}(0.0);`:o&&r?`\n    let col = colIn * ${u};\n    ${x}`:`\n    let col = colIn * ${u};\n    if (row < uniforms.dimInner && col < uniforms.dimBOuter) {\n      ${x}\n    }\n    return ${Ke(u,p)}(0.0);`,A=`${g(l)}`,z=Ke(a,p),R=e?Ke(u,p):Ke(l,p),V=e?Ke(l,p):Ke(u,p),{activationFunction:T,applyActivation:N}=gt(s,z);return`\n    ${T}\n    fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${R} {\n      ${e?E:A}\n    }\n\n    fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${V} {\n      ${e?A:E}\n    }\n\n    fn mm_write(batch: i32, row : i32, colIn : i32, valueIn : ${z}) {\n      let col = colIn * ${a};\n      if (row < uniforms.dimAOuter && col < uniforms.dimBOuter)\n      {\n      var value = valueIn;\n      let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};\n      ${w}\n      ${Xr(n)}\n      ${N}\n      setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);\n      }\n    }`},Wi=(e,t,r,o,n,s,u,l)=>{let a=t.format==="NHWC",p=a?e[0].dims[3]:e[0].dims[1],h=r[0],g=a?r[2]:r[3],b=a?r[1]:r[2],w=a?r[3]:r[1],y=a&&(p%4===0||p%3===0)&&w%4===0,_=a?w:g*b,I=a?g*b:w,$=[8,8,1],x=o<=8?[4,1,1]:[4,4,1],E=[Math.ceil(_/$[0]/x[0]),Math.ceil(I/$[1]/x[1]),Math.ceil(h/$[2]/x[2])];Be("verbose",()=>`[conv2d_mm_webgpu] dispatch = ${E}`);let A=y?a&&p%4!==0?3:4:1,z=$[1]*x[1],R=$[0]*x[0],V=Math.max($[0]*A,$[1]),T=o%z===0,N=n%R===0,te=s%V===0,Y=y?[A,4,4]:[1,1,1],K=Le(e[0].dataType),Q=y?4:1,Z=[{type:"int32",data:o},{type:"int32",data:n},{type:"int32",data:s}],Ee=M("x",e[0].dataType,e[0].dims.length,A===3?1:A),Pe=M("w",e[1].dataType,e[1].dims.length,Q),fe=[Ee,Pe];Z.push(...L(e[0].dims)),Z.push(...L(e[1].dims));let Ie=`\n      fn setOutputAtIndex(flatIndex : i32, value : ${y?`vec4<${K}>`:K}) {\n        result[flatIndex] = ${y?`vec4<${K}>`:K}(value);\n      }\n      fn setOutputAtCoords(d0 : i32, d1 : i32, d2 : i32, d3 : i32, value : ${y?`vec4<${K}>`:K}) {\n        let flatIndex = getOutputIndexFromCoords(vec4<i32>(d0, d1, d2, d3));\n        setOutputAtIndex(flatIndex ${y?"/ 4":""}, value);\n      }`;if(u){let ye=M("bias",e[2].dataType,e[2].dims.length,Q);fe.push(ye),Z.push(...L(e[2].dims)),Ie+=`\n        fn getBiasByOutputCoords(coords : vec4<i32>) -> ${y?`vec4<${K}>`:K} {\n          return bias[coords.${a?"w":"y"}${y?"/ 4":""}];\n        }`}let he=F("result",e[0].dataType,r.length,Q);return Z.push(...L(r)),{name:"Conv2DMatMul",shaderCache:{hint:t.cacheKey},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:E[0],y:E[1],z:E[2]},programUniforms:Z}),getShaderSource:ye=>`\n        ${en("uniforms.result_strides")}\n        //struct Uniforms { xShape : vec4<i32>, wShape : vec4<i32>, outShape : vec4<i32>,\n        //  outShapeStrides: vec3<i32>, filterDims : vec2<i32>, pad : vec2<i32>, stride : vec2<i32>,\n        //  dilation : vec2<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32 };\n        ${ye.registerUniform("dimAOuter","i32").registerUniform("dimBOuter","i32").registerUniform("dimInner","i32").declareVariables(...fe,he)}\n        const filterDims : vec2<i32> = vec2<i32>(${t.kernelShape[0]}, ${t.kernelShape[1]});\n        const pad : vec2<i32> = vec2<i32>(${t.pads[0]}, ${t.pads[1]});\n        const stride : vec2<i32> = vec2<i32>(${t.strides[0]}, ${t.strides[1]});\n        const dilation : vec2<i32> = vec2<i32>(${t.dilations[0]}, ${t.dilations[1]});\n        ${Ie}\n        ${ll(a,T,N,te,u,t,Y[0],Y[1],Y[2],K)}\n            ${y?mr(x,$,K,void 0,!a,V):fr(x,$,K,void 0,!a,V,!1,void 0,l)}`}}});var Wn,Gi=j(()=>{"use strict";$e();ve();Gn();It();Wn=(e,t,r)=>{let o=e.length>2,n=o?"value += b[output_channel];":"",s=e[0].dims,u=e[1].dims,l=u[0]/t.group,a=t.format==="NHWC",p=Hn(s,u,t.dilations,t.pads,t.strides,a),h=U.size(p),g=F("output",e[0].dataType,p),{activationFunction:b,applyActivation:w}=gt(t,g.type.value),y=M("x",e[0].dataType,s),_=M("w",e[1].dataType,u),I=[y,_];o&&I.push(M("b",e[2].dataType,e[2].dims));let $=x=>`\n  const strides: vec2<u32> = vec2(${t.strides[0]}u, ${t.strides[1]}u);\n  const pads: vec2<u32> = vec2(${t.pads[0]}u, ${t.pads[1]}u);\n\n  ${x.declareVariables(...I,g)}\n\n  ${b}\n\n  ${x.mainStart()}\n    ${x.guardAgainstOutOfBoundsWorkgroupSizes(h)}\n\n    let outputIndices = ${g.offsetToIndices("global_idx")};\n    let batch: u32 = outputIndices[0];\n    let output_channel: u32 = outputIndices[${a?3:1}];\n    let xRCCorner: vec2<u32> = vec2<u32>(outputIndices[${a?1:2}], outputIndices[${a?2:3}]) * strides - pads;\n    let group_id: u32 = output_channel / ${l}u;\n\n    var value: ${g.type.value} = ${g.type.value}(0);\n    for (var wInChannel: u32 = 0u; wInChannel < ${u[1]}u; wInChannel++) {\n      let input_channel = group_id * ${u[1]}u + wInChannel;\n      for (var wHeight: u32 = 0u; wHeight < ${u[2]}u; wHeight++) {\n        let xHeight = xRCCorner.x + wHeight * ${t.dilations[0]}u;\n\n        if (xHeight < 0u || xHeight >= ${s[a?1:2]}u) {\n          continue;\n        }\n\n        for (var wWidth: u32 = 0u; wWidth < ${u[3]}u; wWidth++) {\n          let xWidth = xRCCorner.y + wWidth * ${t.dilations[1]}u;\n          if (xWidth < 0u || xWidth >= ${s[a?2:3]}u) {\n            continue;\n          }\n\n          let xVal = ${a?y.get("batch","xHeight","xWidth","input_channel"):y.get("batch","input_channel","xHeight","xWidth")};\n          let wVal = ${_.get("output_channel","wInChannel","wHeight","wWidth")};\n          value += xVal*wVal;\n        }\n      }\n    }\n    ${n}\n    ${w}\n    ${g.setByOffset("global_idx","value")}\n  }`;return{name:"GroupedConv",shaderCache:{hint:t.cacheKey},getRunData:()=>({outputs:[{dims:r?r(p):p,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(h/64)}}),getShaderSource:$}}});var Ln,cl,Li,Fn=j(()=>{"use strict";$e();hr();ve();It();Ln=(e,t,r,o,n=!1)=>{let s=e[0].dims,u=e[1].dims,l=s[s.length-2],a=u[u.length-1],p=s[s.length-1],h=Fe(a),g=Fe(p),b=Fe(l),w=U.size(r)/h/b,y=e.length>2,_=o?o.slice(0,-2):r.slice(0,-2),$=[U.size(_),l,a],x=[{type:"uint32",data:w},{type:"uint32",data:l},{type:"uint32",data:a},{type:"uint32",data:p},...L(_),...L(s),...L(u)];y&&x.push(...L(e[2].dims)),x.push(...L($));let E=A=>{let z=Fr("batch_dims",e[0].dataType,_.length),R=M("a",e[0].dataType,s.length,g),V=M("b",e[1].dataType,u.length,h),T=F("output",e[0].dataType,$.length,h),{activationFunction:N,applyActivation:te}=gt(t,T.type.value),Y=[R,V],K="";if(y){let he=n?h:1;Y.push(M("bias",e[2].dataType,e[2].dims.length,he)),K=`${n?`value += bias[col / ${he}];`:`value += ${T.type.value}(bias[row + i]);`}`}let Q=s.slice(0,-2),Z=u.slice(0,-2),Ee=Ft(Q,_),Pe=Ft(Z,_),fe=(he,ye)=>{let We=he.rank,De=he.name;if(We===2)return`var ${De}_indices = ${he.type.indices}(0u, 0u);`;let Ge=z.rank,G=`var ${De}_indices: ${he.type.indices};`;for(let ee=We-2-1,be=Ge-1;ee>=0;ee--,be--)G+=`\n${De}_indices[${ee}] = ${Ge>1?`batch_indices[${be}]`:"batch_indices"};`;return ye.forEach(ee=>{G+=`\n${De}_indices[${ee}] = 0;`}),G+=`${De}_indices[${We-2}] = 0u;\n                     ${De}_indices[${We-1}] = 0u;`,G},Ie=()=>{let he=`var a_data: ${R.type.value};`;for(let ye=0;ye<g;ye++)he+=`\n              let b_data${ye} = b[(b_offset + (k + ${ye}) * uniforms.N + col) / ${h}];`;for(let ye=0;ye<b;ye++){he+=`a_data = a[(a_offset + (row + ${ye}) * uniforms.K + k) / ${g}];`;for(let We=0;We<g;We++)he+=`\n            values[${ye}] = fma(${V.type.value}(a_data${g===1?"":`[${We}]`}), b_data${We}, values[${ye}]);\n`}return he};return`\n  ${A.registerUniform("outputSize","u32").registerUniform("M","u32").registerUniform("N","u32").registerUniform("K","u32").registerInternalVariables(z).declareVariables(...Y,T)}\n  ${N}\n  ${A.mainStart()}\n    ${A.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n    let col = (global_idx % (uniforms.N / ${h})) * ${h};\n    var index1 = global_idx / (uniforms.N / ${h});\n    let stride1 = uniforms.M / ${b};\n    let row = (index1 % stride1) * ${b};\n    let batch = index1 / stride1;\n\n    ${r.length===2?"":`let batch_indices = ${z.offsetToIndices("batch")};`}\n    ${fe(R,Ee)}\n    let a_offset = ${R.indicesToOffset("a_indices")};\n    ${fe(V,Pe)}\n    let b_offset = ${V.indicesToOffset("b_indices")};\n    var values: array<${T.type.value}, ${b}>;\n    for (var k: u32 = 0u; k < uniforms.K; k = k + ${g}) {\n      ${Ie()}\n    }\n    for (var i = 0u; i < ${b}u; i++) {\n      var value = values[i];\n      ${K}\n      ${te}\n      let cur_indices = ${T.type.indices}(batch, row + i, col);\n      let offset = ${T.indicesToOffset("cur_indices")};\n      ${T.setByOffset(`offset / ${h}`,"value")};\n    }\n  }\n  `};return{name:"MatMulNaive",shaderCache:{hint:`${t.activationCacheKey}_${h}_${g}_${b}_${n}`,inputDependencies:y?["rank","rank","rank"]:["rank","rank"]},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(w/64)},programUniforms:x}),getShaderSource:E}},cl=e=>{if(!e||e.length!==2)throw new Error("MatMul requires 2 inputs.");if(e[0].dims[e[0].dims.length-1]!==e[1].dims[e[1].dims.length-2])throw new Error("shared dimension does not match.")},Li=e=>{cl(e.inputs);let t=dt.calcShape(e.inputs[0].dims,e.inputs[1].dims,!0);if(!t)throw new Error("Can\'t use matmul on the given tensors");let r=t[t.length-1],o=e.inputs[0].dims[e.inputs[0].dims.length-1];r<8&&o<8?e.compute(Ln(e.inputs,{activation:"",activationCacheKey:""},t)):e.compute(tn(e.inputs,{activation:"",activationCacheKey:""},t))}});var Hn,Fi,pl,ji,jn,ml,fl,qn,Gn=j(()=>{"use strict";$e();je();Hi();hr();Gi();It();Fn();jt();Hn=(e,t,r,o,n,s)=>{let u=e[0],l=e.slice(s?1:2,s?3:4),a=l.length,p=t[0],g=t.slice(2).map((y,_)=>y+(y-1)*(r[_]-1)),w=l.map((y,_)=>y+o[_]+o[_+a]).map((y,_)=>Math.floor((y-g[_]+n[_])/n[_]));return w.splice(0,0,u),w.splice(s?3:1,0,p),w},Fi=[2,3,1,0],pl=(e,t)=>{if(!e||e.length!==2&&e.length!==3)throw new Error("Conv requires 2 or 3 inputs");if(e[0].dims.length!==4&&e[0].dims.length!==3)throw new Error("currently only support conv 1D and 2D");if(e[0].dims.length!==e[1].dims.length)throw new Error("filter does not have same dimension as input");let r=e[0].dims[t.format==="NHWC"?e[0].dims.length-1:1],o=e[1].dims[1]*t.group;if(r!==o)throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");if(e.length===3&&(e[2].dims.length!==1||e[1].dims[0]!==e[2].dims[0]))throw new Error("invalid bias");let n=e[0].dims.length-2;if(t.dilations.length!==n)throw new Error(`dilations should be ${n}D`);if(t.strides.length!==n)throw new Error(`strides should be ${n}D`);if(t.pads.length!==n*2)throw new Error(`pads should be ${n*2}D`);if(t.kernelShape.length!==0&&t.kernelShape.length!==e[1].dims.length-2)throw new Error("invalid kernel shape")},ji=(e,t)=>{let r=e.kernelShape.slice();for(let s=2;s<t[1].dims.length;++s)r[s-2]===0&&(r[s-2]=t[1].dims[s]);let o=e.pads.slice();Bt.adjustPadsBasedOnAutoPad(t[0].dims,e.strides,e.dilations,r,o,e.format==="NHWC",e.autoPad);let n=Object.assign({},e);return Object.assign(n,{kernelShape:r,pads:o,cacheKey:e.cacheKey}),n},jn=e=>{let t=Qr(e),r=e.format,o=["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][e.auto_pad],n=e.dilations,s=e.group,u=e.kernel_shape,l=e.pads,a=e.strides,p=e.w_is_const();return ge({autoPad:o,format:r,dilations:n,group:s,kernelShape:u,pads:l,strides:a,wIsConst:p,...t})},ml=(e,t,r)=>{let o=ji(r,t),n=r.format==="NHWC";if(r.group!==1){e.compute(Wn(t,o));return}let s=t.length===3,u=t[0].dims[n?1:2],l=t[0].dims[n?2:3],a=t[0].dims[n?3:1],p=t[1].dims[2],h=t[1].dims[3],g=Hn(t[0].dims,t[1].dims,r.dilations,o.pads,r.strides,n),b=g[n?1:2],w=g[n?2:3],y=g[n?3:1],_=n&&p===u&&h===l&&r.pads[0]===0&&r.pads[1]===0;if(_||p===1&&h===1&&r.dilations[0]===1&&r.dilations[1]===1&&r.strides[0]===1&&r.strides[1]===1&&r.pads[0]===0&&r.pads[1]===0){let R=g[0],V,T,N,te=[];if(n){let Q=e.kernelCustomData.wT??e.compute(it(t[1],Fi),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];if(r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=Q),_){let Z=u*l*a;V=t[0].reshape([1,R,Z]),T=Q.reshape([1,Z,y]),N=[1,R,y]}else V=t[0].reshape([R,u*l,a]),T=Q.reshape([1,a,y]),N=[R,b*w,y];te.push(V),te.push(T)}else V=t[0].reshape([R,a,u*l]),T=t[1].reshape([1,y,a]),N=[R,y,b*w],te.push(T),te.push(V);s&&te.push(t[2]);let Y=N[2],K=te[0].dims[te[0].dims.length-1];Y<8&&K<8?e.compute(Ln(te,o,g,N,n),{inputs:te}):e.compute(tn(te,o,g,N,n),{inputs:te});return}let I=!0,$=e.kernelCustomData.wT??e.compute(it(t[1],Fi),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=$);let x=[t[0],$];s&&x.push(t[2]);let E=n?b*w:y,A=n?y:b*w,z=p*h*a;e.compute(Wi(x,o,g,E,A,z,s,I),{inputs:x})},fl=(e,t)=>{let r=t.format==="NHWC",o=[e.inputs[0].reshape(r?[e.inputs[0].dims[0],1,e.inputs[0].dims[1],e.inputs[0].dims[2]]:[e.inputs[0].dims[0],e.inputs[0].dims[1],1,e.inputs[0].dims[2]]),e.inputs[1].reshape([e.inputs[1].dims[0],e.inputs[1].dims[1],1,e.inputs[1].dims[2]])];e.inputs.length===3&&o.push(e.inputs[2]);let n=[0,t.pads[0],0,t.pads[1]],s=[1].concat(t.strides),u=[1].concat(t.dilations),l=[1].concat(t.kernelShape),a=ji({...t,pads:n,strides:s,dilations:u,kernelShape:l},o);e.compute(Wn(o,a,p=>r?[p[0],p[2],p[3]]:[]))},qn=(e,t)=>{pl(e.inputs,t),e.inputs[0].dims.length===3?fl(e,t):ml(e,e.inputs,t)}});var hl,qi,Ki=j(()=>{"use strict";Ct();ve();It();Jr();Nn();hr();hl=(e,t=!1,r,o=4)=>{let n=Ke(o,"f32"),s=x=>{switch(x){case 1:return"return w[getIndexFromCoords4D(coord, vec4<i32>(uniforms.w_shape))];";case 4:return`\n            let coord1 = vec4<i32>(coordX, coordY, col + 1, rowInner);\n            let coord2 = vec4<i32>(coordX, coordY, col + 2, rowInner);\n            let coord3 = vec4<i32>(coordX, coordY, col + 3, rowInner);\n            let v0 = w[getIndexFromCoords4D(coord, vec4<i32>(uniforms.w_shape))];\n            let v1 = w[getIndexFromCoords4D(coord1, vec4<i32>(uniforms.w_shape))];\n            let v2 = w[getIndexFromCoords4D(coord2, vec4<i32>(uniforms.w_shape))];\n            let v3 = w[getIndexFromCoords4D(coord3, vec4<i32>(uniforms.w_shape))];\n            return vec4<f32>(v0, v1, v2, v3);\n            `;default:throw new Error(`innerElementSize ${x} is not supported.`)}},u=e?`\n      let coord = vec4<i32>(batch, iXR, iXC, xCh);\n      `:`\n      let coord = vec4<i32>(batch, xCh, iXR, iXC);\n      `,l=e?`\n    let coords = vec4<i32>(\n      batch,\n      row / outWidth,\n      row % outWidth,\n      col);\n    `:`\n    let coords = vec4<i32>(\n      batch,\n      row,\n      col / outWidth,\n      col % outWidth);\n    `,a=e?"outBackprop[1]":"outBackprop[2]",p=e?"outBackprop[2]":"outBackprop[3]",h=e?"row":"col",g=e?"col":"row",b=`\n      let inChannels = ${e?"outBackprop[3]":"outBackprop[1]"};\n      let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};\n      let outRow = ${h} / outWidth;\n      let outCol = ${h} % outWidth;\n\n      let WRow = ${g} / (filterDims[1] * inChannels);\n      let WCol = ${g} / inChannels % filterDims[1];\n      let xR = f32(outRow - pads[0] + dilation[0] * WRow) / f32(strides[0]);\n      let xC = f32(outCol - pads[1] + dilation[1] * WCol) / f32(strides[1]);\n      if (xR < 0.0 || xR >= f32(${a}) || fract(xR) > 0.0) {\n        return ${n}(0.0);\n      }\n      if (xC < 0.0 || xC >= f32(${p}) || fract(xC) > 0.0) {\n        return ${n}(0.0);\n      }\n      let iXR = i32(xR);\n      let iXC = i32(xC);\n      let xCh = ${g} % inChannels;\n      ${u}\n      return x[getIndexFromCoords4D(coord, vec4<i32>(uniforms.x_shape))/${o}];`,w=e?`\n      let col = colIn * ${o};\n      if (row < uniforms.dimAOuter && col < uniforms.dimInner) {\n        ${b}\n      }\n      return ${n}(0.0);`:`\n      let col = colIn * ${o};\n      if (row < uniforms.dimInner && col < uniforms.dimBOuter) {\n        ${b}\n      }\n      return ${n}(0.0);`,y=`\n      let col = colIn * ${o};\n      let inChannels = ${e?"outBackprop[3]":"outBackprop[1]"};\n      let coordX = filterDims.x - 1 - row / (filterDims[1] * inChannels);\n      let coordY = filterDims.y - 1 - (row / inChannels) % filterDims[1];\n      if (${e?"row < uniforms.dimInner && col < uniforms.dimBOuter":"row < uniforms.dimInner && col < uniforms.dimAOuter"}  && coordX >= 0 && coordY >= 0) {\n        let rowInner = row % inChannels;\n        let coord = vec4<i32>(coordX, coordY, col, rowInner);\n        ${s(o)}\n      }\n      return ${n}(0.0);\n      `,{activationFunction:_,applyActivation:I}=gt(r,n);return`\n      ${_}\n  fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${n} {\n    ${e?w:y}\n  }\n\n  fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${n} {\n    ${e?y:w}\n  }\n\n  fn mm_write(batch: i32, row : i32, colIn : i32, valueInput : ${n}) {\n    let col = colIn * ${o};\n    if (row < uniforms.dimAOuter && col < uniforms.dimBOuter) {\n      var value = valueInput;\n      let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};\n      ${l}\n      ${Xr(t)}\n      ${I}\n      result[getIndexFromCoords4D(coords, vec4<i32>(uniforms.result_shape))/${o}] = value;\n    }\n  }`},qi=(e,t,r,o,n,s,u,l)=>{let a=t.format==="NHWC",p=a?e[0].dims[3]:e[0].dims[1],h=r[0],g=a?r[2]:r[3],b=a?r[1]:r[2],w=a?r[3]:r[1],y=a?p%4===0&&w%4===0:g%4===0&&w%4===0,_=a?w:g*b,I=a?g*b:w,$=y?[8,8,1]:[_<=4||I<=4?4:16,_>4&&I<=4?4:16,1],x=y?[4,4,1]:[_<=4?1:4,_>4&&I<=4?1:4,1],E=[Math.ceil(_/$[0]/x[0]),Math.ceil(I/$[1]/x[1]),Math.ceil(h/$[2]/x[2])];Be("verbose",()=>`[conv_backprop_mm_webgpu] dispatch = ${E}`);let A=y?4:1,z=Math.max($[0]*A,$[1]),R=y?4:1,V=[{type:"int32",data:o},{type:"int32",data:n},{type:"int32",data:s}],T=M("x",e[0].dataType,e[0].dims.length,R),N=M("w",e[1].dataType,e[1].dims.length,1),te=F("result",e[0].dataType,r.length,R),Y=[T,N];V.push(...L(e[0].dims)),V.push(...L(e[1].dims));let K="";if(u){let Q=M("bias",e[2].dataType,e[2].dims.length,R);Y.push(Q),V.push(...L(e[2].dims)),K+=`\n        fn getBiasByOutputCoords(coords : vec4<i32>) -> ${y?"vec4<f32>":"f32"} {\n          return bias[coords.${a?"w":"y"}${y?"/ 4":""}];\n        }`}return V.push(...L(r)),{name:"Conv2DTransposeMatMul",shaderCache:{hint:t.cacheKey},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:E[0],y:E[1],z:E[2]},programUniforms:V}),getShaderSource:Q=>`\n        ${en("uniforms.result_strides")}\n        ${Q.registerUniform("dimAOuter","i32").registerUniform("dimBOuter","i32").registerUniform("dimInner","i32").declareVariables(...Y,te)};\n        const outBackprop : vec4<i32> = vec4<i32>(${e[0].dims.join(",")});\n        const filterDims : vec2<i32> = vec2<i32>(${t.kernelShape[a?1:2]}, ${t.kernelShape[a?2:3]});\n        const effectiveFilterDims : vec2<i32> = filterDims + vec2<i32>(\n              ${t.dilations[0]<=1?0:(t.kernelShape[a?1:2]-1)*(t.dilations[0]-1)},\n              ${t.dilations[1]<=1?0:(t.kernelShape[a?2:3]-1)*(t.dilations[1]-1)});\n        const pads : vec2<i32> = vec2<i32>(i32(effectiveFilterDims[0]) - 1 - (${t.pads[0]+t.pads[2]})/2,\n                                         i32(effectiveFilterDims[1]) - 1 - (${t.pads[1]+t.pads[3]})/2);\n        const strides : vec2<i32> = vec2<i32>(${t.strides[0]}, ${t.strides[1]});\n        const dilation : vec2<i32> = vec2<i32>(${t.dilations[0]}, ${t.dilations[1]});\n        const dimAOuter : i32 = ${o};\n        const dimBOuter : i32 = ${n};\n        const dimInner : i32 = ${s};\n        ${K}\n        ${hl(a,u,t,A)}\n        ${y?mr(x,$,"f32",void 0,!a,z):fr(x,$,"f32",void 0,!a,z,!1,void 0,l)}`}}});var gl,Kn,Yi=j(()=>{"use strict";Ct();$e();ve();gl=(e,t,r,o,n,s,u=!1,l)=>{let a=r.format==="NHWC",p=a?1:2,h=a?2:3,g=a?3:1,b=U.size(o),w=u?2:1,y=r.group,_=t[1].dims,I=_[0]/y,$=_[1],x=`\n  fn setOutputAtIndex(flatIndex : u32, value : ${u?`vec4<${l}>`:l}) {\n    result[flatIndex] = ${u?`vec4<${l}>`:l}(value);\n  }`;n&&(x+=`\n    fn getBiasByOutputCoords(coords : vec4<u32>) -> ${u?`vec4<${l}>`:l} {\n      return bias[coords.${a?"w":"y"}${u?"/ 4":""}];\n    }`);let E=u?4:1,A=M("W",t[1].dataType,t[1].dims,E),z=M("Dy",t[0].dataType,t[0].dims,E),R=[z,A];n&&R.push(M("bias",t[2].dataType,[o[g]],E));let V=F("result",t[0].dataType,o,E),T=`{\n        let batch: u32 = ${s?"global_id.z":"workgroup_id.z"} / outShape[1];\n        let r = ${s?"global_id.z":"workgroup_id.z"} % outShape[1];\n        let c = ${s?"global_id.y":"workgroup_id.y"} * ${w};\n        let d1: u32 = ${s?"global_id.x":"workgroup_id.x"} * 4;\n\n        let dyCorner = vec2<i32>(i32(r), i32(c)) - vec2<i32>(pads);\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        var dotProd: array<vec4<${l}>, ${w}>;\n        for (var i = 0; i < ${w}; i++) {\n          dotProd[i] = vec4<${l}>(0.0);\n        }\n        for (var wR: u32 = 0; wR < filterDims[0]; wR = wR + 1) {\n          var dyR = (${l}(dyCorner.x) + ${l}(wR)) / ${l}(strides.x);\n          let wRPerm = filterDims[0] - 1 - wR;\n          if (dyR < 0.0 || dyR >= ${l}(outBackprop[1]) ||\n              fract(dyR) > 0.0 || wRPerm < 0) {\n            continue;\n          }\n          let idyR: u32 = u32(dyR);\n\n          for (var wC: u32 = 0; wC < filterDims[1]; wC = wC + 1) {\n            let dyC = (${l}(dyCorner.y) + ${l}(wC)) / ${l}(strides.y);\n            let dyC2 = (${l}(dyCorner.y) + 1.0 + ${l}(wC)) / ${l}(strides.y);\n            let wCPerm = filterDims[1] - 1 - wC;\n            if (wCPerm < 0) {\n              continue;\n            }\n            var bDyCVal = true;\n            var bDyCVal2 = true;\n            if (dyC < 0.0 || dyC >= ${l}(outBackprop[2]) ||\n                fract(dyC) > 0.0) {\n              bDyCVal = false;\n            }\n            if (dyC2 < 0.0 || dyC2 >= ${l}(outBackprop[2]) ||\n                fract(dyC2) > 0.0) {\n              bDyCVal2 = false;\n            }\n\n            let idyC: u32 = u32(dyC);\n            let idyC2: u32 = u32(dyC2);\n            if (bDyCVal && bDyCVal2) {\n              let d2Length = outBackprop[3];\n              for (var d2 :u32 = 0; d2 < d2Length; d2 = d2 + 4) {\n                let wValue0 = ${A.get("u32(wRPerm)","u32(wCPerm)","d1","d2")};\n                let wValue1 = ${A.get("u32(wRPerm)","u32(wCPerm)","d1 + 1","d2")};\n                let wValue2 = ${A.get("u32(wRPerm)","u32(wCPerm)","d1 + 2","d2")};\n                let wValue3 = ${A.get("u32(wRPerm)","u32(wCPerm)","d1 + 3","d2")};\n\n                var xValue = ${z.get("batch","idyR","idyC","d2")};\n                let tmpval = vec4<${l}>(dot(xValue, wValue0),\n                                      dot(xValue, wValue1),\n                                      dot(xValue, wValue2),\n                                      dot(xValue, wValue3));\n                dotProd[0] = dotProd[0] + tmpval;\n\n                xValue =  ${z.get("batch","idyR","idyC2","d2")};\n\n                dotProd[1] = dotProd[1] + vec4<${l}>(dot(xValue, wValue0),\n                                                    dot(xValue, wValue1),\n                                                    dot(xValue, wValue2),\n                                                    dot(xValue, wValue3));\n              }\n            } else if (bDyCVal) {\n              let d2Length = outBackprop[${g}];\n              for (var d2: u32 = 0; d2 < d2Length; d2 = d2 + 4) {\n                let wValue0 = ${A.get("u32(wRPerm)","u32(wCPerm)","d1","d2")};\n                let wValue1 = ${A.get("u32(wRPerm)","u32(wCPerm)","d1 + 1","d2")};\n                let wValue2 = ${A.get("u32(wRPerm)","u32(wCPerm)","d1 + 2","d2")};\n                let wValue3 = ${A.get("u32(wRPerm)","u32(wCPerm)","d1 + 3","d2")};\n\n                var xValue = ${z.get("batch","idyR","idyC","d2")};\n                let tmpval = vec4<${l}>(dot(xValue, wValue0),\n                                      dot(xValue, wValue1),\n                                      dot(xValue, wValue2),\n                                      dot(xValue, wValue3));\n                dotProd[0] = dotProd[0] + tmpval;\n              }\n            } else if (bDyCVal2) {\n              let d2Length = outBackprop[3];\n              for (var d2: u32 = 0; d2 < d2Length; d2 = d2 + 4) {\n                let wValue0 = ${A.get("u32(wRPerm)","u32(wCPerm)","d1","d2")};\n                let wValue1 = ${A.get("u32(wRPerm)","u32(wCPerm)","d1 + 1","d2")};\n                let wValue2 = ${A.get("u32(wRPerm)","u32(wCPerm)","d1 + 2","d2")};\n                let wValue3 = ${A.get("u32(wRPerm)","u32(wCPerm)","d1 + 3","d2")};\n\n                var xValue = ${z.get("batch","idyR","idyC2","d2")};\n                let tmpval = vec4<${l}>(dot(xValue, wValue0),\n                                      dot(xValue, wValue1),\n                                      dot(xValue, wValue2),\n                                      dot(xValue, wValue3));\n                dotProd[1] = dotProd[1] + tmpval;\n              }\n            }\n          }\n        }\n\n        for (var i: u32 = 0; i < ${w}; i = i + 1) {\n          let value = dotProd[i] + ${n?"bias[c+i]":`vec4<${l}>(0.0)`};\n          ${V.set("batch","r","c + i","d1","value")};\n        }\n      }`,N=`\n          let outputIndices = ${V.offsetToIndices("global_idx")};\n          let batch = ${V.indicesGet("outputIndices",0)};\n          let d1 = ${V.indicesGet("outputIndices",g)};\n          let r = ${V.indicesGet("outputIndices",p)};\n          let c = ${V.indicesGet("outputIndices",h)};\n          let dyCorner = vec2<i32>(i32(r), i32(c)) - pads;\n          let dyRCorner = dyCorner.x;\n          let dyCCorner = dyCorner.y;\n          let groupId = d1 / ${$};\n          let wOutChannel = d1 - groupId * ${$};\n          // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n          // ? = to be determined. : = across all values in that axis.\n          var dotProd = ${l}(0.0);\n          for (var wR: u32 = 0; wR < effectiveFilterDims.x; wR = wR + 1) {\n            if (wR % dilations.x != 0) {\n              continue;\n            }\n            let dyR = (${l}(dyRCorner) + ${l}(wR)) / ${l}(strides[0]);\n            let wRPerm = filterDims.x - 1 - wR / dilations.x;\n            if (dyR < 0.0 || dyR >= ${l}(outBackprop[${p}]) || fract(dyR) > 0.0 ||\n                wRPerm < 0) {\n              continue;\n            }\n            let idyR: u32 = u32(dyR);\n\n            for (var wC: u32 = 0; wC < effectiveFilterDims.y; wC = wC + 1) {\n              if (wC % dilations.y != 0) {\n                continue;\n              }\n              let dyC = (${l}(dyCCorner) + ${l}(wC)) / ${l}(strides.y);\n              let wCPerm = filterDims.y - 1 - wC / dilations.y;\n              if (dyC < 0.0 || dyC >= ${l}(outBackprop[${h}]) ||\n                  fract(dyC) > 0.0 || wCPerm < 0) {\n                continue;\n              }\n              let idyC: u32 = u32(dyC);\n              var inputChannel = groupId * ${I};\n              for (var d2: u32 = 0; d2 < ${I}; d2 = d2 + 1) {\n                let xValue = ${a?z.get("batch","idyR","idyC","inputChannel"):z.get("batch","inputChannel","idyR","idyC")};\n                let wValue = ${A.get("inputChannel","wOutChannel","u32(wRPerm)","u32(wCPerm)")};\n                dotProd = dotProd + xValue * wValue;\n                inputChannel = inputChannel + 1;\n              }\n            }\n          }\n          let value = dotProd + ${n?"bias[d1]":`${l}(0.0)`};\n          ${V.setByOffset("global_idx","value")};\n        `;return`\n  ${e.declareVariables(...R,V)}\n  ${x}\n  const outShape : vec4<u32> = vec4<u32>(${o.join(",")});\n  const outBackprop : vec4<u32> = vec4<u32>(${t[0].dims.join(",")});\n  const strides : vec2<u32> = vec2<u32>(${r.strides[0]}, ${r.strides[1]});\n  const filterDims : vec2<u32> = vec2<u32>(${r.kernelShape[a?1:2]}, ${r.kernelShape[a?2:3]});\n  const dilations : vec2<u32> = vec2<u32>(${r.dilations[0]}, ${r.dilations[1]});\n  const effectiveFilterDims : vec2<u32> = filterDims + vec2<u32>(\n          ${r.dilations[0]<=1?0:(r.kernelShape[a?1:2]-1)*(r.dilations[0]-1)},\n          ${r.dilations[1]<=1?0:(r.kernelShape[a?2:3]-1)*(r.dilations[1]-1)});\n  const pads : vec2<i32> = vec2<i32>(i32(effectiveFilterDims[0]) - 1 - (${r.pads[0]+r.pads[2]})/2,\n                                     i32(effectiveFilterDims[1]) - 1 - (${r.pads[1]+r.pads[3]})/2);\n    ${e.mainStart()}\n    ${e.guardAgainstOutOfBoundsWorkgroupSizes(b)};\n  ${u?T:N}}`},Kn=(e,t,r)=>{let o=e.length>2,n=t.outputShape,s=U.size(n),u=[Math.ceil(s/64),1,1];Be("verbose",()=>`[conv2d_backprop_webgpu] dispatch = ${u}`);let l=Le(e[0].dataType);return{name:"ConvTranspose2D",shaderCache:{hint:t.cacheKey},getRunData:()=>({dispatchGroup:{x:u[0],y:u[1],z:u[2]},outputs:[{dims:r?r(n):n,dataType:e[0].dataType}]}),getShaderSource:a=>gl(a,e,t,n,o,u[1]===1&&u[2]===1,!1,l)}}});var yl,bl,wl,Zi,Qi,vl,$l,Sl,xl,Xi,Ji=j(()=>{"use strict";je();Ki();Yi();It();jt();yl=(e,t,r,o,n,s)=>(e-1)*t+r+(o-1)*n+1-s,bl=(e,t,r,o,n)=>{let s=Math.floor(e/2);t==="SAME_UPPER"?(r[o]=s,r[n]=e-s):t==="SAME_LOWER"&&(r[o]=e-s,r[n]=s)},wl=(e,t,r,o,n,s,u,l,a,p)=>{let h=e.length-2,g=p.length===0;if(a.length===0)for(let y=0;y<h;++y)a.push(0);let b=e[0],w=t[l?3:1]*n;for(let y=0,_=e.length-h-(l?1:0);y<h;++y,++_){let I=e[_],$=g?I*u[y]:p[y],x=yl(I,u[y],s[y],t[_],r[y],$);bl(x,o,s,y,y+h),g&&p.push(u[y]*(I-1)+a[y]+(t[_]-1)*r[y]+1-s[y]-s[y+h])}p.splice(0,0,b),p.splice(l?3:1,0,w)},Zi=(e,t)=>{let r=e.kernelShape.slice();if(e.kernelShape.length===0||e.kernelShape.reduce((b,w)=>b*w,1)===0){r.length=0;for(let b=2;b<t[1].dims.length;++b)r.push(t[1].dims[b])}let o=e.format==="NHWC";r.splice(0,0,t[1].dims[0]),r.splice(o?3:1,0,t[1].dims[1]);let n=e.pads.slice(),s=e.outputShape.slice(),u=e.outputPadding.slice(),l=t[0].dims,a=e.dilations.slice();if(a.reduce((b,w)=>b+w,0)===0){let b=t[0].dims.length-2;a=new Array(b).fill(1)}let p=e.strides.slice();if(p.reduce((b,w)=>b+w,0)===0){let b=t[0].dims.length-2;p=new Array(b).fill(1)}wl(l,r,a,e.autoPad,e.group,n,p,o,u,s);let h=Object.assign({},e),g=e.cacheKey+[r.join("n,"),n.join(","),p.join(","),u.join(","),s.join(","),a.join(",")].join("_");return Object.assign(h,{kernelShape:r,pads:n,outputPadding:u,outputShape:s,dilations:a,strides:p,cacheKey:g}),h},Qi=e=>{let t=Qr(e),r=e.format,o=["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][typeof e.autoPad>"u"?0:e.autoPad],n=e.dilations,s=e.group,u=e.kernelShape,l=e.pads,a=e.strides,p=e.wIsConst(),h=e.outputPadding,g=e.outputShape;return ge({autoPad:o,format:r,dilations:n,group:s,kernelShape:u,outputPadding:h,outputShape:g,pads:l,strides:a,wIsConst:p,...t})},vl=(e,t)=>{if(!e||e.length!==2&&e.length!==3)throw new Error("Conv requires 2 or 3 inputs");if(e[0].dims.length!==4&&e[0].dims.length!==3)throw new Error("currently only support 2-dimensional conv");if(e[0].dims.length!==e[1].dims.length)throw new Error("filter does not have same dimension as input");let r=e[0].dims[t.format==="NHWC"?e[0].dims.length-1:1],o=e[1].dims[0];if(r!==o)throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");let n=e[1].dims[1]*t.group;if(e.length===3&&(e[2].dims.length!==1||e[2].dims[0]!==n))throw new Error("invalid bias");let s=e[0].dims.length-2;if(t.dilations.reduce((h,g)=>h+g,0)>0&&t.dilations.length!==s)throw new Error(`dilations should be ${s}D`);if(t.strides.reduce((h,g)=>h+g,0)>0&&t.strides.length!==s)throw new Error(`strides should be ${s}D`);if(t.pads.reduce((h,g)=>h+g,0)>0&&t.pads.length!==s*2)throw new Error(`pads should be ${s*2}D`);if(t.outputPadding.length!==s&&t.outputPadding.length!==0)throw new Error(`output_padding should be ${s}D`);if(t.kernelShape.reduce((h,g)=>h+g,0)>0&&t.kernelShape.length!==0&&t.kernelShape.length!==e[1].dims.length-2)throw new Error("invalid kernel shape");if(t.outputShape.length!==0&&t.outputShape.length!==e[0].dims.length-2)throw new Error("invalid output shape")},$l=[2,3,1,0],Sl=(e,t,r)=>{let o=Zi(r,t),n=r.format==="NHWC",s=o.outputShape,u=s[n?3:1],l=t[0].dims[n?3:1];if(o.group!==1||u===1&&l===1){e.compute(Kn(t,o));return}let a=s[n?1:2],p=s[n?2:3],h=t[1].dims[2],g=t[1].dims[3],b=n?a*p:u,w=n?u:a*p,y=h*g*l,_=!0,I=e.kernelCustomData.wT??e.compute(it(t[1],$l),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=I);let $=[t[0],I],x=t.length===3;x&&(!n&&t[2].dims.length===1?$.push(t[2].reshape([t[2].dims[0],1,1])):$.push(t[2])),e.compute(qi($,o,s,b,w,y,x,_),{inputs:$})},xl=(e,t)=>{let r=t.format==="NHWC",o=[e.inputs[0].reshape(r?[e.inputs[0].dims[0],1,e.inputs[0].dims[1],e.inputs[0].dims[2]]:[e.inputs[0].dims[0],e.inputs[0].dims[1],1,e.inputs[0].dims[2]]),e.inputs[1].reshape([e.inputs[1].dims[0],e.inputs[1].dims[1],1,e.inputs[1].dims[2]])];o.length===3&&o.push(e.inputs[2]);let n=t.kernelShape;(n.length===0||n[0]===0)&&(n=[e.inputs[1].dims[2]]);let s=t.dilations;(s.length===0||s[0]===0)&&(s=[1]);let u=t.strides;(u.length===0||u[0]===0)&&(u=[1]);let l=t.pads;l.length===0&&(l=[0,0]),l=[0,l[0],0,l[1]],u=[1].concat(u),s=[1].concat(s),n=[1].concat(n);let a=Zi({...t,pads:l,strides:u,dilations:s,kernelShape:n},o);e.compute(Kn(o,a,p=>r?[p[0],p[2],p[3]]:[p[0],p[1],p[3]]))},Xi=(e,t)=>{vl(e.inputs,t),e.inputs[0].dims.length===3?xl(e,t):Sl(e,e.inputs,t)}});var _l,es,ts,rs=j(()=>{"use strict";Ne();$e();je();ve();_l=(e,t,r,o)=>{let n=U.size(t),s=t.length,u=M("input",e,s),l=F("output",e,s),a=r.dataType===6?r.getInt32Array()[0]:Number(r.getBigInt64Array()[0]),p=U.normalizeAxis(a,s),h=g=>{let b=` i32(${u.indicesGet("inputIndices","uniforms.axis")}) `,w=ce("uniforms.input_shape","uniforms.axis",s),y=o.reverse?b+(o.exclusive?" + 1":""):"0",_=o.reverse?w:b+(o.exclusive?"":" + 1");return`\n                ${g.registerUniform("outputSize","u32").registerUniform("axis","u32").declareVariables(u,l)}\n                ${g.mainStart()}\n                  ${g.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n                  var inputIndices = ${l.offsetToIndices("global_idx")};\n                  var sum = ${l.type.value}(0);\n                  let first : i32 = ${y};\n                  let last : i32 = ${_};\n                  for (var i : i32 = first; i < last; i++) {\n                    ${u.indicesSet("inputIndices","uniforms.axis","u32(i)")};\n                    sum = sum + ${u.getByIndices("inputIndices")};\n                  }\n                  ${l.setByOffset("global_idx","sum")};\n                }`};return{name:"CumSum",shaderCache:{hint:o.cacheKey,inputDependencies:["rank"]},getRunData:()=>({outputs:[{dims:t,dataType:e}],dispatchGroup:{x:Math.ceil(n/64)},programUniforms:[{type:"uint32",data:n},{type:"int32",data:p},...L(t),...L(t)]}),getShaderSource:h}},es=(e,t)=>{let r=e.inputs[0].dims,o=e.inputs[0].dataType,n=e.inputs[1];e.compute(_l(o,r,n,t),{inputs:[0]})},ts=e=>{let t=e.exclusive===1,r=e.reverse===1;return ge({exclusive:t,reverse:r})}});var Yn,rn,ns,Cl,Il,Zn,Qn,os,Al,as,is,ss=j(()=>{"use strict";$e();je();ve();Yn="[a-zA-Z]|\\\\.\\\\.\\\\.",rn="("+Yn+")+",ns="^"+rn+"$",Cl="("+rn+",)*"+rn,Il="^"+Cl+"$",Zn=class{constructor(t=-1){this.symbolToIndices=new Map,this.inputIndex=t}addSymbol(t,r){let o=this.symbolToIndices.get(t);o===void 0?o=[r]:o.push(r),this.symbolToIndices.set(t,o)}},Qn=class{constructor(t,r){this.equation=r;this.hasEllipsis=!1,this.symbolToInfo=new Map,this.lhs=new Array,this.outputDims=[];let[o,n]=r.includes("->")?r.split("->",2):[r,""];if(!o.match(RegExp(Il)))throw new Error("Invalid LHS term");if(o.split(",").forEach((l,a)=>{let p=t[a].dims.slice();if(!l.match(RegExp(ns)))throw new Error("Invalid LHS term");let h=this.processTerm(l,!0,p,a);this.lhs.push(h)}),n==="")n+=[...this.symbolToInfo.entries()].filter(([l,a])=>a.count===1||l==="...").map(([l])=>l).join("");else if(!n.match(RegExp(rn)))throw new Error("Invalid RHS");n.match(RegExp(Yn,"g"))?.forEach(l=>{if(l==="...")this.outputDims=this.outputDims.concat(this.ellipsisDims);else{let a=this.symbolToInfo.get(l);if(a===void 0)throw new Error("Invalid RHS symbol");this.outputDims.push(a.dimValue)}}),this.rhs=this.processTerm(n,!1,this.outputDims)}addSymbol(t,r,o){let n=this.symbolToInfo.get(t);if(n!==void 0){if(n.dimValue!==r&&n.count!==1)throw new Error("Dimension mismatch");n.count++,n.inputIndices.push(o)}else n={count:1,dimValue:r,inputIndices:[o]};this.symbolToInfo.set(t,n)}processTerm(t,r,o,n=-1){let s=o.length,u=!1,l=[],a=0;if(!t.match(RegExp(ns))&&!r&&t!=="")throw new Error("Invalid LHS term");let p=t.match(RegExp(Yn,"g")),h=new Zn(n);return p?.forEach((g,b)=>{if(g==="..."){if(u)throw new Error("Only one ellipsis is allowed per input term");u=!0;let w=s-p.length+1;if(w<0)throw new Error("Ellipsis out of bounds");if(l=o.slice(a,a+w),this.hasEllipsis){if(this.ellipsisDims.length!==l.length||this.ellipsisDims.toString()!==l.toString())throw new Error("Ellipsis dimensions mismatch")}else if(r)this.hasEllipsis=!0,this.ellipsisDims=l;else throw new Error("Ellipsis must be specified in the LHS");for(let y=0;y<l.length;y++){let _=String.fromCharCode("0".charCodeAt(0)+y);h.addSymbol(_,b+y),this.addSymbol(_,o[a++],n)}}else h.addSymbol(g,b+(this.hasEllipsis?this.ellipsisDims.length-1:0)),this.addSymbol(g,o[a++],n)}),h}},os=e=>e+"_max",Al=(e,t,r,o,n)=>{let u=t.map((w,y)=>e[y]?w.length:w).map((w,y)=>M(`input${y}`,r,w)),l=U.size(n),a=Re(n.length),p=a?n.length:n,h=F("output",r,p),g=[...o.symbolToInfo.keys()].filter(w=>!o.rhs.symbolToIndices.has(w)),b=w=>{let y=[],_="var prod = 1.0;",I="var sum = 0.0;",$="sum += prod;",x=[],E=[],A=[],z=[],R=o.symbolToInfo.size===o.rhs.symbolToIndices.size;o.symbolToInfo.forEach((T,N)=>{if(o.rhs.symbolToIndices.has(N)){let te=o.rhs.symbolToIndices.get(N)?.[0];te!==void 0&&o.lhs.forEach((Y,K)=>{if(T.inputIndices.includes(K)){let Q=Y.symbolToIndices.get(N);if(Q===void 0)throw new Error("Invalid symbol error");Q.forEach(Z=>{y.push(`${u[K].indicesSet(`input${K}Indices`,Z,h.indicesGet("outputIndices",te))}`)})}})}else o.lhs.forEach((te,Y)=>{if(T.inputIndices.includes(Y)){let K=te.symbolToIndices.get(N);if(K===void 0)throw new Error("Invalid symbol error");K.forEach(Q=>{x.push(`${u[Y].indicesSet(`input${Y}Indices`,Q,`${N}`)}`)}),z.push(`prod *= ${u[Y].getByIndices(`input${Y}Indices`)};`)}}),E.push(`for(var ${N}: u32 = 0; ${N} < uniforms.${os(N)}; ${N}++) {`),A.push("}")});let V=R?[...y,`let sum = ${u.map((T,N)=>T.getByIndices(`input${N}Indices`)).join(" * ")};`]:[...y,I,...E,...x,_,...z,$,...A];return`\n            ${w.registerUniforms(g.map(T=>({name:`${os(T)}`,type:"u32"}))).registerUniform("outputSize","u32").declareVariables(...u,h)}\n\n            ${w.mainStart()}\n            ${w.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n            var outputIndices = ${h.offsetToIndices("global_idx")};\n            ${u.map((T,N)=>`var input${N}Indices: ${u[N].type.indices};`).join(`\n`)}\n            ${V.join(`\n`)};\n            ${h.setByOffset("global_idx","sum")};\n          }`};return{name:"Einsum",shaderCache:{hint:o.equation,inputDependencies:e.map(w=>w?"rank":"dims")},getRunData:()=>{let w=g.filter(_=>o.symbolToInfo.has(_)).map(_=>({type:"uint32",data:o.symbolToInfo.get(_)?.dimValue||0}));w.push({type:"uint32",data:l});let y=t.filter((_,I)=>e[I]).map((_,I)=>[...L(_)]).reduce((_,I)=>_.concat(I),w);return a&&y.push(...L(n)),{outputs:[{dims:n,dataType:r}],dispatchGroup:{x:Math.ceil(l/64)},programUniforms:y}},getShaderSource:b}},as=(e,t)=>{let r=new Qn(e.inputs,t.equation),o=e.inputs.map((u,l)=>Re(u.dims.length)),n=r.outputDims,s=e.inputs.map((u,l)=>u.dims);e.compute(Al(o,s,e.inputs[0].dataType,r,n))},is=e=>{let t=e.equation.replace(/\\s+/g,"");return ge({equation:t})}});var Tl,us,El,Ol,ds,ls=j(()=>{"use strict";Ne();$e();ve();Tl=e=>{if(!e||e.length!==2)throw new Error("Expand requires 2 input.");let t=e[0].dims,r=Array.from(e[1].getBigInt64Array(),Number),o=r.length<t.length?0:r.length-t.length,n=t.length<r.length?0:t.length-r.length;for(;o<r.length&&n<t.length;++o,++n)if(r[o]!==t[n]&&r[o]!==1&&t[n]!==1)throw new Error("Expand requires shape to be broadcastable to input")},us=(e,t)=>{let r=e.length-t.length,o=[];for(let n=0;n<r;++n)o.push(e[n]);for(let n=0;n<t.length;++n)o.push(t[n]===1?e[n+r]:t[n]);return o},El=(e,t)=>e.length>t.length?us(e,t):us(t,e),Ol=e=>{let t=e[0].dims,r=Array.from(e[1].getBigInt64Array(),Number),o=El(t,r),n=e[0].dataType,s=n===9?4:1,u=Math.ceil(U.size(o)/s),l=Re(t.length),a=Re(o.length),p=g=>{let b=l?t.length:t,w=a?o.length:o,y=M("input",n,b,s),_=F("output",n,w,s),I;if(n===9){let $=(x,E,A="")=>`\n          let outputIndices${E} = ${_.offsetToIndices(`outputOffset + ${E}u`)};\n          let offset${E} = ${y.broadcastedIndicesToOffset(`outputIndices${E}`,_)};\n          let index${E} = offset${E} / 4u;\n          let component${E} = offset${E} % 4u;\n          ${x}[${E}] = ${A}(${y.getByOffset(`index${E}`)}[component${E}]);\n        `;I=`\n        let outputOffset = global_idx * ${s};\n        var data = vec4<u32>(0);\n        ${$("data",0,"u32")}\n        ${$("data",1,"u32")}\n        ${$("data",2,"u32")}\n        ${$("data",3,"u32")}\n        ${_.setByOffset("global_idx","data")}\n      }`}else I=`\n        let outputIndices = ${_.offsetToIndices("global_idx")};\n        let inputOffset = ${y.broadcastedIndicesToOffset("outputIndices",_)};\n        ${_.setByOffset("global_idx",y.getByOffset("inputOffset"))}\n      }`;return`\n    ${g.registerUniform("vec_size","u32").declareVariables(y,_)}\n    ${g.mainStart()}\n    ${g.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}\n    ${I}`},h=[{type:"uint32",data:u}];return l&&h.push(...L(t)),a&&h.push(...L(o)),{name:"Expand",shaderCache:{hint:`${o.length}`,inputDependencies:[l?"rank":"dims"]},getShaderSource:p,getRunData:()=>({outputs:[{dims:o,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(u/64)},programUniforms:h})}},ds=e=>{Tl(e.inputs),e.compute(Ol(e.inputs),{inputs:[0]})}});var Pl,kl,cs,ps,ms=j(()=>{"use strict";Ne();$e();je();ve();Pl=e=>{if(!e||e.length!==2)throw new Error("Gather requires 2 inputs.")},kl=(e,t)=>{let r=e[0].dims,o=e[1].dims,n=r.length,s=U.normalizeAxis(t.axis,n),u=r.slice(0);u.splice(s,1,...o);let l=r[s],a=e[0].dataType===9?4:1,p=Math.ceil(U.size(u)/a),h=Re(e[0].dims.length),g=h?e[0].dims.length:e[0].dims,b=Re(e[1].dims.length),w=b?e[1].dims.length:e[1].dims,y=Re(u.length),_=y?u.length:u,I=[{type:"uint32",data:p},{type:"int32",data:l},{type:"uint32",data:s}];h&&I.push(...L(e[0].dims)),b&&I.push(...L(e[1].dims)),y&&I.push(...L(u));let $=[];$.push(h?"rank":"dims"),$.push(b?"rank":"dims");let x=E=>{let A=M("data",e[0].dataType,g,a),z=M("inputIndices",e[1].dataType,w),R=F("output",e[0].dataType,_,a),V=N=>{let te=o.length,Y=`var indicesIndices${N}  = ${z.type.indices}(0);`;for(let K=0;K<te;K++)Y+=`${te>1?`indicesIndices${N}[${K}]`:`indicesIndices${N}`} = ${u.length>1?`outputIndices${N}[uniforms.axis + ${K}]`:`outputIndices${N}`};`;Y+=`\n          var idx${N} = ${z.getByIndices(`indicesIndices${N}`)};\n          if (idx${N} < 0) {\n            idx${N} = idx${N} + uniforms.axisDimLimit;\n          }\n          var dataIndices${N} = ${A.type.indices}(0);\n        `;for(let K=0,Q=0;K<n;K++)K===s?(Y+=`${n>1?`dataIndices${N}[${K}]`:`dataIndices${N}`} = u32(idx${N});`,Q+=te):(Y+=`${n>1?`dataIndices${N}[${K}]`:`dataIndices${N}`} = ${u.length>1?`outputIndices${N}[${Q}]`:`outputIndices${N}`};`,Q++);return Y},T;if(e[0].dataType===9){let N=(te,Y,K="")=>`\n          let outputIndices${Y} = ${R.offsetToIndices(`outputOffset + ${Y}u`)};\n          ${V(Y)};\n          let offset${Y} = ${A.indicesToOffset(`dataIndices${Y}`)};\n          let index${Y} = offset${Y} / 4u;\n          let component${Y} = offset${Y} % 4u;\n          ${te}[${Y}] = ${K}(${A.getByOffset(`index${Y}`)}[component${Y}]);\n        `;T=`\n        let outputOffset = global_idx * ${a};\n        var value = vec4<u32>(0);\n        ${N("value",0,"u32")}\n        ${N("value",1,"u32")}\n        ${N("value",2,"u32")}\n        ${N("value",3,"u32")}\n        ${R.setByOffset("global_idx","value")}\n      `}else T=`\n      let outputIndices = ${R.offsetToIndices("global_idx")};\n      ${V("")};\n      let value = ${A.getByIndices("dataIndices")};\n      ${R.setByOffset("global_idx","value")};\n      `;return`\n      ${E.registerUniform("outputSize","u32").registerUniform("axisDimLimit","i32").registerUniform("axis","u32").declareVariables(A,z,R)}\n      ${E.mainStart()}\n        ${E.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n        ${T}\n      }`};return{name:"Gather",shaderCache:{hint:t.cacheKey,inputDependencies:$},getRunData:()=>({outputs:[{dims:u,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(p/64)},programUniforms:I}),getShaderSource:x}},cs=e=>ge({axis:e.axis}),ps=(e,t)=>{let r=e.inputs;Pl(r),e.compute(kl(e.inputs,t))}});var Rl,Bl,fs,hs,gs=j(()=>{"use strict";$e();je();ve();Rl=e=>{if(!e||e.length!==2)throw new Error("GatherElements requires 2 inputs.");if(e[0].dims.length<1)throw new Error("GatherElements requires that the data input be rank >= 1.");if(e[0].dims.length!==e[1].dims.length)throw new Error(`GatherElements requires that the data input and\n                     indices input tensors be of same rank.`)},Bl=(e,t)=>{let r=e[0].dims,o=e[0].dataType,n=r.length,s=e[1].dims,u=e[1].dataType,l=U.normalizeAxis(t.axis,n),a=r[l],p=s.slice(0),h=U.size(p),g=M("input",o,n),b=M("indicesInput",u,s.length),w=F("output",o,p.length),y=[{type:"uint32",data:h},{type:"int32",data:a},{type:"uint32",data:l}];return y.push(...L(r)),y.push(...L(s)),y.push(...L(p)),{name:"GatherElements",shaderCache:{inputDependencies:["rank","rank"]},getRunData:()=>({outputs:[{dims:p,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(h/64)},programUniforms:y}),getShaderSource:$=>`\n      ${$.registerUniform("outputSize","u32").registerUniform("axisDimLimit","i32").registerUniform("axis","u32").declareVariables(g,b,w)}\n      ${$.mainStart()}\n      ${$.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n\n      let outputIndices = ${w.offsetToIndices("global_idx")};\n\n      var idx = ${b.getByOffset("global_idx")};\n      if (idx < 0) {\n        idx = idx + uniforms.axisDimLimit;\n      }\n      var inputIndices = ${g.type.indices}(outputIndices);\n      ${g.indicesSet("inputIndices","uniforms.axis","u32(idx)")};\n      let value = ${g.getByIndices("inputIndices")};\n\n      ${w.setByOffset("global_idx","value")};\n  }`}},fs=e=>ge({axis:e.axis}),hs=(e,t)=>{let r=e.inputs;Rl(r),e.compute(Bl(e.inputs,t))}});var Dl,Ml,ys,bs,ws=j(()=>{"use strict";$e();ve();Dl=e=>{if(!e)throw new Error("Input is missing");if(e.length<2||e.length>3)throw new Error("Invaid input number.");if(e.length===3&&e[2].dims.length>2)throw new Error("Invalid input shape of C");if(e[0].dataType!==e[1].dataType||e.length===3&&e[0].dataType!==e[2].dataType)throw new Error("Input types are mismatched")},Ml=(e,t)=>{let r=e[0].dims.slice(),o=e[1].dims.slice(),[n,s,u]=Hr.getShapeOfGemmResult(r,t.transA,o,t.transB,e.length===3?e[2].dims:void 0),l=[n,s];if(!l)throw new Error("Can\'t use gemm on the given tensors");let a=U.size(l),p=[{type:"uint32",data:a},{type:"uint32",data:n},{type:"uint32",data:s},{type:"uint32",data:u},{type:"float32",data:t.alpha},{type:"float32",data:t.beta}],h=["type","type"];e.length===3&&(p.push(...L(e[2].dims)),h.push("rank")),p.push(...L(l));let g=b=>{let w="";t.transA&&t.transB?w="value += a[k * uniforms.M + m] * b[n * uniforms.K + k];":t.transA&&!t.transB?w="value += a[k * uniforms.M + m] * b[k * uniforms.N + n];":!t.transA&&t.transB?w="value += a[m * uniforms.K + k] * b[n * uniforms.K + k];":!t.transA&&!t.transB&&(w="value += a[m * uniforms.K + k] * b[k * uniforms.N + n];");let y=t.alpha===1?"":"value *= uniforms.alpha;",_=M("a",e[0].dataType,e[0].dims),I=M("b",e[1].dataType,e[1].dims),$=_.type.value,x=null,E=[_,I];e.length===3&&(x=M("c",e[2].dataType,e[2].dims.length),E.push(x));let A=F("output",e[0].dataType,l.length);E.push(A);let z=[{name:"output_size",type:"u32"},{name:"M",type:"u32"},{name:"N",type:"u32"},{name:"K",type:"u32"},{name:"alpha",type:"f32"},{name:"beta",type:"f32"}];return`\n  ${b.registerUniforms(z).declareVariables(...E)}\n\n  ${b.mainStart()}\n    ${b.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n\n    let m = global_idx / uniforms.N;\n    let n = global_idx % uniforms.N;\n\n    var value = ${$}(0);\n    for (var k: u32 = 0u; k < uniforms.K; k++) {\n      ${w}\n    }\n\n    ${y}\n    ${(()=>x!=null?`let cOffset = ${x.broadcastedIndicesToOffset("vec2(m, n)",A)}; value += ${$}(uniforms.beta) * ${x.getByOffset("cOffset")};`:"")()}\n    output[global_idx] = value;\n  }`};return{name:"Gemm",shaderCache:{hint:`${t.cacheKey}`,inputDependencies:h},getRunData:()=>({outputs:[{dims:l,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(a/64)},programUniforms:p}),getShaderSource:g}},ys=e=>{let t=e.transA,r=e.transB,o=e.alpha,n=e.beta;return{transA:t,transB:r,alpha:o,beta:n,cacheKey:`${e.transA};${e.transB};${e.alpha===1}`}},bs=(e,t)=>{Dl(e.inputs),e.compute(Ml(e.inputs,t))}});var zl,Ul,Vl,vs,$s=j(()=>{"use strict";Ne();$e();ve();zl=(e,t)=>{let r=e[0].dims,o=r,n=2,s=U.sizeToDimension(r,n),u=U.sizeFromDimension(r,n),l=Fe(u),a=u/l,p=[r[0],r[1],a],h=["rank","type","type"],g=[{type:"uint32",data:u},{type:"uint32",data:a}];g.push(...L(p),...L(p));let b=w=>{let y=M("x",e[0].dataType,p.length,l),_=M("scale",e[1].dataType,e[1].dims),I=M("bias",e[2].dataType,e[2].dims),$=F("output",e[0].dataType,p.length,l),x=[y,_,I,$],E=y.type.value,A=l===1?"f32":`vec${l}<f32>`,z=64,R=[{name:"normSize",type:"u32"},{name:"normPackedSize",type:"u32"}];return`\n  var<workgroup> meanShared : f32;\n  var<workgroup> squaredNormShared : f32;\n  var<workgroup> workgroupShared : array<${A}, ${z}>;\n  const workgroupSize = ${z}u;\n  ${w.registerUniforms(R).declareVariables(...x)}\n  ${w.mainStart(z)}\n    let norm = global_idx / workgroupSize;\n    let batch = norm / uniforms.x_shape[1];\n    let channel = norm % uniforms.x_shape[1];\n    let localIndex = local_id.x;\n\n    // initialize workgroup memory\n    var initial = ${A}(0);\n    for (var h = localIndex; h < uniforms.normPackedSize; h += workgroupSize) {\n      initial = initial + ${A}(${y.get("batch","channel","h")});\n    }\n    workgroupShared[localIndex] = initial;\n    workgroupBarrier();\n\n    // Calculate the mean of current channel data.\n    for (var currSize = workgroupSize >> 1;  currSize > 0; currSize = currSize >> 1) {\n      if (localIndex < currSize) {\n        workgroupShared[localIndex] = workgroupShared[localIndex] + workgroupShared[localIndex + currSize];\n      }\n      workgroupBarrier();\n    }\n    if (localIndex == 0) {\n      meanShared = ${Je("workgroupShared[0]",l)} / f32(uniforms.normSize);\n    }\n    workgroupBarrier();\n\n    // reinitialize workgroup memory.\n    initial = ${A}(0);\n    for (var h = localIndex; h < uniforms.normPackedSize; h += workgroupSize) {\n      let deviation =  ${A}(${y.get("batch","channel","h")}) - ${A}(meanShared);\n      initial = initial + deviation * deviation;\n    }\n    workgroupShared[localIndex] = initial;\n    workgroupBarrier();\n\n    // Calculate the sum of square of deviation of current channel data.\n    for (var currSize = workgroupSize >> 1;  currSize > 0; currSize = currSize >> 1) {\n      if (localIndex < currSize) {\n        workgroupShared[localIndex] = workgroupShared[localIndex] + workgroupShared[localIndex + currSize];\n      }\n      workgroupBarrier();\n    }\n    if (localIndex == 0) {\n      squaredNormShared = ${Je("workgroupShared[0]",l)};\n    }\n    workgroupBarrier();\n\n    let invStdDev = inverseSqrt(squaredNormShared / f32(uniforms.normSize) + f32(${t.epsilon}));\n    let channelScale = invStdDev * f32(${_.getByOffset("channel")});\n    let channelShift = f32(${I.getByOffset("channel")}) - meanShared * channelScale;\n    for (var h = localIndex; h < uniforms.normPackedSize; h += workgroupSize) {\n      let value = ${y.get("batch","channel","h")} * ${E}(${A}(channelScale)) + ${E}(${A}(channelShift));\n      ${$.set("batch","channel","h","value")};\n    }\n  }`};return{name:"InstanceNormalization",shaderCache:{hint:`${t.epsilon};${l}`,inputDependencies:h},getRunData:()=>({outputs:[{dims:o,dataType:e[0].dataType}],dispatchGroup:{x:s},programUniforms:g}),getShaderSource:b}},Ul=(e,t,r,o,n,s,u,l)=>{let a=Fe(u),p=64,h=a===1?"vec2f":`mat2x${a}f`,g=a===1?"f32":`vec${a}f`,b=(R,V)=>`${h}(${R}, ${V})`,w=n*u/a,y=Math.ceil(s/p),_=["type"],I=[{type:"uint32",data:y},{type:"uint32",data:s},{type:"uint32",data:Math.floor(u/a)},{type:"uint32",data:Math.floor(s*u/a)}],$=R=>{let V=M("input",t.dataType,t.dims,a);return`\n  ${R.declareVariables(V)}\n  @group(0) @binding(1) var<storage, read_write> output : array<${h}>;\n  struct Uniforms {wg_size:u32, H:u32, C:u32, image_size:u32};\n  @group(0) @binding(2) var<uniform> uniforms: Uniforms;\n\n  ${R.mainStart(p)}\n    let currentImageNumber = global_idx / ${p} / uniforms.C;\n    let currentChannelNumber = (global_idx / ${p}) % uniforms.C;\n    let wgId = global_idx % ${p};\n    let wgOffset = wgId * uniforms.wg_size;\n    if (wgOffset >= uniforms.H) {\n        return;\n    }\n    let wgMax = min(wgOffset + uniforms.wg_size, uniforms.H);\n\n    let offset = currentImageNumber * uniforms.image_size + currentChannelNumber;\n    var sum = ${Ze("f32",a)};\n    var squaredSum = ${Ze("f32",a)};\n    for (var i: u32 = wgOffset; i < wgMax; i++) {\n        let value = ${g}(input[offset + i * uniforms.C]);\n        sum += value;\n        squaredSum += value * value;\n    }\n    output[global_idx] = ${b("sum","squaredSum")};\n  }`},x=e.compute({name:"InstanceNormComputeMean",shaderCache:{hint:`${a}`,inputDependencies:_},getRunData:()=>({outputs:[{dims:[n,u,p,2],dataType:1}],dispatchGroup:{x:n*u/a},programUniforms:I}),getShaderSource:$},{inputs:[t],outputs:[-1]})[0],E=[{type:"uint32",data:w},{type:"uint32",data:s},{type:"uint32",data:Math.floor(u/a)},{type:"uint32",data:Math.floor(p*u/a)}],A=["type","type","type"],z=R=>{let V=M("scale",r.dataType,r.dims,a),T=M("bias",o.dataType,o.dims,a);return`\n  @group(0) @binding(0) var<storage, read> input : array<${h}>;\n  @group(0) @binding(1) var<storage, read> scale : array<${V.type.storage}>;\n  @group(0) @binding(2) var<storage, read> bias : array<${T.type.storage}>;\n  @group(0) @binding(3) var<storage, read_write> output : array<${h}>;\n  struct Uniforms {units_of_work : u32, H: u32, C : u32, image_size : u32};\n  @group(0) @binding(4) var<uniform> uniforms: Uniforms;\n\n  ${R.mainStart()}\n    ${R.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.units_of_work")}\n    let currentImageNumber = global_idx / uniforms.C;\n    let currentChannelNumber = global_idx % uniforms.C;\n\n    let offset = currentImageNumber * uniforms.image_size;\n    var sum = ${Ze("f32",a)};\n    var squaredSum = ${Ze("f32",a)};\n    for (var i: u32 = 0; i < ${p}; i++) {\n        let value = input[offset + i + currentChannelNumber * ${p}];\n        sum += value[0];\n        squaredSum += value[1];\n    }\n    sum = sum / f32(uniforms.H);\n    squaredSum = squaredSum / f32(uniforms.H);\n    let invStdDev = inverseSqrt(squaredSum - sum * sum + f32(${l}));\n    let channelScale = invStdDev * ${g}(scale[currentChannelNumber]);\n    let channelShift = ${g}(bias[currentChannelNumber]) - sum * channelScale;\n\n    output[global_idx] = ${b("channelScale","channelShift")};\n  }`};return e.compute({name:"InstanceNormComputeChannelScaleShift",shaderCache:{hint:`${a};${l}`,inputDependencies:A},getRunData:()=>({outputs:[{dims:[n,u,2],dataType:1}],dispatchGroup:{x:Math.ceil(w/64)},programUniforms:E}),getShaderSource:z},{inputs:[x,r,o],outputs:[-1]})[0]},Vl=(e,t,r)=>{let o=t[0].dims,n=o,s=o[0],u=o[o.length-1],l=U.sizeFromDimension(o,1)/u,a=Fe(u),p=U.size(n)/a,h=[{type:"uint32",data:l},{type:"uint32",data:Math.floor(u/a)}],g=["type","type"],b=Ul(e,t[0],t[1],t[2],s,l,u,r.epsilon),w=y=>{let _=Le(t[0].dataType),I=a===1?"vec2f":`mat2x${a}f`,$=a===1?_:`vec${a}<${_}>`,x=M("input",t[0].dataType,t[0].dims,a),E=F("output",t[0].dataType,n,a);return`\n  @group(0) @binding(0) var<storage, read> input : array<${x.type.storage}>;\n  @group(0) @binding(1) var<storage, read> scaleInput : array<${I}>;\n  @group(0) @binding(2) var<storage, read_write> output : array<${E.type.storage}>;\n  struct Uniforms {H: u32, C : u32};\n  @group(0) @binding(3) var<uniform> uniforms: Uniforms;\n\n  ${y.mainStart()}\n    let currentImageNumber = global_idx / (uniforms.C * uniforms.H);\n    let currentChannelNumber = global_idx % uniforms.C;\n\n    let scaleOffset = currentImageNumber * uniforms.C + currentChannelNumber;\n    let scale = scaleInput[scaleOffset];\n    output[global_idx] = fma(input[global_idx], ${$}(scale[0]), ${$}(scale[1]));\n  }`};e.compute({name:"InstanceNormalizationNHWC",shaderCache:{hint:`${a}`,inputDependencies:g},getRunData:()=>({outputs:[{dims:n,dataType:t[0].dataType}],dispatchGroup:{x:Math.ceil(p/64)},programUniforms:h}),getShaderSource:w},{inputs:[t[0],b]})},vs=(e,t)=>{t.format==="NHWC"?Vl(e,e.inputs,t):e.compute(zl(e.inputs,t))}});var Nl,Wl,Ss,xs=j(()=>{"use strict";Ne();$e();ve();Nl=e=>{if(!e||e.length<2)throw new Error("layerNorm requires at least 2 inputs.")},Wl=(e,t,r)=>{let o=e[0].dims,n=e[1],s=e[2],u=o,l=U.normalizeAxis(t.axis,o.length),a=U.sizeToDimension(o,l),p=U.sizeFromDimension(o,l),h=U.size(n.dims),g=s?U.size(s.dims):0;if(h!==p||s&&g!==p)throw new Error(`Size of X.shape()[axis:] == ${p}.\n       Size of scale and bias (if provided) must match this.\n       Got scale size of ${h} and bias size of ${g}`);let b=[];for(let A=0;A<o.length;++A)A<l?b.push(o[A]):b.push(1);let w=Fe(p),y=["type","type"],_=[{type:"uint32",data:a},{type:"float32",data:p},{type:"uint32",data:Math.floor(p/w)},{type:"float32",data:t.epsilon}];s&&y.push("type");let I=r>1,$=r>2,x=A=>{let z=Le(e[0].dataType),R=[M("x",e[0].dataType,e[0].dims,w),M("scale",n.dataType,n.dims,w)];s&&R.push(M("bias",s.dataType,s.dims,w)),R.push(F("output",e[0].dataType,u,w)),I&&R.push(F("mean_data_output",1,b)),$&&R.push(F("inv_std_output",1,b));let V=[{name:"norm_count",type:"u32"},{name:"norm_size",type:"f32"},{name:"norm_size_vectorized",type:"u32"},{name:"epsilon",type:"f32"}];return`\n  ${A.registerUniforms(V).declareVariables(...R)}\n  ${A.mainStart()}\n    ${A.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.norm_count")}\n    let offset = global_idx * uniforms.norm_size_vectorized;\n    var meanVector = ${Ze("f32",w)};\n    var meanSquareVector = ${Ze("f32",w)};\n\n    for (var h: u32 = 0u; h < uniforms.norm_size_vectorized; h++) {\n      let value = ${at(z,w,"x[h + offset]")};\n      meanVector += value;\n      meanSquareVector += value * value;\n    }\n    let mean = ${Je("meanVector",w)} / uniforms.norm_size;\n    let invStdDev =\n        inverseSqrt(${Je("meanSquareVector",w)} / uniforms.norm_size - mean * mean + uniforms.epsilon);\n\n    for (var j: u32 = 0; j < uniforms.norm_size_vectorized; j++) {\n      let f32input = ${at(z,w,"x[j + offset]")};\n      let f32scale = ${at(z,w,"scale[j]")};\n      output[j + offset] = ${R[0].type.value}((f32input - mean) * invStdDev * f32scale\n        ${s?`+ ${at(z,w,"bias[j]")}`:""}\n      );\n    }\n\n    ${I?"mean_data_output[global_idx] = mean":""};\n    ${$?"inv_std_output[global_idx] = invStdDev":""};\n  }`},E=[{dims:u,dataType:e[0].dataType}];return I&&E.push({dims:b,dataType:1}),$&&E.push({dims:b,dataType:1}),{name:"LayerNormalization",shaderCache:{hint:`${w};${r}`,inputDependencies:y},getRunData:()=>({outputs:E,dispatchGroup:{x:Math.ceil(a/64)},programUniforms:_}),getShaderSource:x}},Ss=(e,t)=>{Nl(e.inputs),e.compute(Wl(e.inputs,t,e.outputCount))}});var Hl,Cs,_s,Gl,Xn,Is,As=j(()=>{"use strict";$e();je();Nr();Un();ve();jt();Hl=(e,t)=>{let r=e[0],o=e[1],n=e[2],s=e[3],u=e[4],l=e[5],a=e[6],p=e[7];if(r.dims.length!==3&&r.dims.length!==5)throw new Error("Input query is expected to have 3 or 5 dimensions");let h=!1,g=r.dims[0],b=r.dims[1],w=r.dims.length===3?h?r.dims[2]/3:r.dims[2]:t.numHeads*r.dims[4],y=b,_=0,I=0,$=Math.floor(w/t.numHeads);if(a&&p){if(a.dims.length!==4)throw new Error(\'Input "past_key" is expected to have 4 dimensions\');if(p.dims.length!==4)throw new Error(\'Input "past_value" is expected to have 4 dimensions\');_=a.dims[2],I=a.dims[2]}else if(a||p)throw new Error(\'Input "past_key" and "past_value" shall be both present or both absent\');let x;if(o){if(r.dims.length!==3)throw new Error(\'Input "query" is expected to have 3 dimensions when key is given\');if(o.dims.length<3||o.dims.length>5)throw new Error(\'Input "key" is expected to have 3, 4, or 5 dimensions\');if(r.dims[0]!==o.dims[0])throw new Error(\'Input "query" and "key" shall have same dim 0 (batch size)\');if(o.dims.length===3){if(o.dims[2]!==r.dims[2])throw new Error(\'Input "query" and "key" shall have same dim 2 (hidden_size)\');x=2,y=o.dims[1]}else if(o.dims.length===5){if(o.dims[2]!==t.numHeads||o.dims[3]!==2||o.dims[4]!==$)throw new Error(\'Expect "key" shape (batch_size, kv_sequence_length, num_heads, 2, head_size) for packed kv\');if(n)throw new Error(\'Expect "value" be none when "key" has packed kv format.\');x=5,y=o.dims[1]}else{if(o.dims[1]!==t.numHeads||o.dims[3]!==$)throw new Error(\'Expect "key" shape (batch_size, num_heads, kv_sequence_length, head_size) for past_key\');x=0,y=o.dims[2]}}else{if(r.dims.length!==3&&r.dims.length!==5)throw new Error(\'Input "query" is expected to have 3 or 5 dimensions when key is empty\');if(r.dims.length===5&&(r.dims[2]!==t.numHeads||r.dims[3]!==3))throw new Error(\'Expect "query" shape (batch_size, kv_sequence_length, num_heads, 3, head_size) for packed kv\');x=3}if(s){if(s.dims.length!==1)throw new Error(\'Input "bias" is expected to have 1 dimension\');if(n&&r.dims.length===5&&r.dims[3]===2)throw new Error("bias is not allowed for packed kv.")}let E=0;if(u){E=8;let T=u.dims;throw T.length===1?T[0]===g?E=1:T[0]===3*g+2&&(E=3):T.length===2&&T[0]===g&&T[1]===y&&(E=5),E===8?new Error(\'Input "key_padding_mask" shape shall be (batch_size) or (batch_size, kv_sequence_length)\'):new Error("Mask not supported")}let A=!1,z=w;if(n){if(n.dims.length!==3&&n.dims.length!==4)throw new Error(\'Input "value" is expected to have 3 or 4 dimensions\');if(r.dims[0]!==n.dims[0])throw new Error(\'Input "query" and "value" shall have same dim 0 (batch_size)\');if(n.dims.length===3){if(y!==n.dims[1])throw new Error(\'Input "key" and "value" shall have the same dim 1 (kv_sequence_length)\');z=n.dims[2]}else{if(y!==n.dims[2])throw new Error(\'Input "past_key" and "past_value" shall have the same dim 2 (kv_sequence_length)\');z=n.dims[1]*n.dims[3],A=!0}}let R=_+y,V=!1;if(u)throw new Error("Key padding mask is not supported");if(l)throw new Error("extraAddQk is not supported");if(a)throw new Error("pastKey is not supported");if(p)throw new Error("pastValue is not supported");return{batchSize:g,sequenceLength:b,pastSequenceLength:_,kvSequenceLength:y,totalSequenceLength:R,maxSequenceLength:I,inputHiddenSize:0,hiddenSize:w,vHiddenSize:z,headSize:$,vHeadSize:Math.floor(z/t.numHeads),numHeads:t.numHeads,isUnidirectional:!1,pastPresentShareBuffer:!1,maskFilterValue:t.maskFilterValue,maskType:E,scale:t.scale,broadcastResPosBias:V,passPastInKv:A,qkvFormat:x}},Cs=e=>ge({...e}),_s=ge({perm:[0,2,1,3]}),Gl=(e,t,r,o,n,s,u)=>{let l=[o,n,s],a=U.size(l),p=[{type:"uint32",data:a},{type:"uint32",data:u},{type:"uint32",data:s}],h=g=>{let b=F("qkv_with_bias",t.dataType,l),w=M("qkv",t.dataType,l),y=M("bias",r.dataType,l),_=[{name:"output_size",type:"u32"},{name:"bias_offset",type:"u32"},{name:"hidden_size",type:"u32"}];return`\n  ${g.registerUniforms(_).declareVariables(w,y,b)}\n  ${g.mainStart()}\n    ${g.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n    let bias_offset_idx = (global_idx % uniforms.hidden_size) + uniforms.bias_offset;\n\n    qkv_with_bias[global_idx] = qkv[global_idx] + bias[bias_offset_idx];\n  }`};return e.compute({name:"MultiHeadAttentionAddBias",shaderCache:{inputDependencies:["type","type"]},getRunData:()=>({outputs:[{dims:l,dataType:t.dataType,gpuDataType:0}],dispatchGroup:{x:Math.ceil(a/64)},programUniforms:p}),getShaderSource:h},{inputs:[t,r],outputs:[-1]})[0]},Xn=(e,t,r,o,n,s,u,l)=>{let a=s;if(u){if(o===1)throw new Error("AddBiasReshape is not implemented. Please export your model with packed QKV or KV");return a=Gl(e,s,u,t,o,r*n,l),a=a.reshape([t,o,r,n]),e.compute(it(a,_s.perm),{inputs:[a],outputs:[-1]})[0]}else return s.dims.length===3&&(a=s.reshape([t,o,r,n])),e.compute(it(a,_s.perm),{inputs:[a],outputs:[-1]})[0]},Is=(e,t)=>{let r=Hl(e.inputs,t);if(e.inputs[0].dims.length===5)throw new Error("Packed QKV is not implemented");if(e.inputs[1]?.dims.length===5)throw new Error("Packed KV is not implemented");let o=e.inputs[1]&&e.inputs[2]&&e.inputs[1].dims.length===4&&e.inputs[2].dims.length===4,n=Xn(e,r.batchSize,r.numHeads,r.sequenceLength,r.headSize,e.inputs[0],e.inputs[3],0);if(o)return Kr(e,n,e.inputs[1],e.inputs[2],e.inputs[4],void 0,void 0,void 0,e.inputs[5],r,t);let s=Xn(e,r.batchSize,r.numHeads,r.kvSequenceLength,r.headSize,e.inputs[1],e.inputs[3],r.hiddenSize),u=Xn(e,r.batchSize,r.numHeads,r.kvSequenceLength,r.vHeadSize,e.inputs[2],e.inputs[3],2*r.hiddenSize);Kr(e,n,s,u,e.inputs[4],void 0,e.inputs[6],e.inputs[7],e.inputs[5],r,t)}});var Ll,Fl,jl,ql,Kl,Yl,Zl,Ql,Ts,Es=j(()=>{"use strict";Ne();$e();ve();Ll=e=>{if(!e||e.length<1)throw new Error("Too few inputs");if(e[0].dataType!==1)throw new Error("Input type must be float.");if(e.length>=2){let t=e[0].dims.length*2===e[1].dims[0];if(e.length===4&&(t=e[3].dims[0]*2===e[1].dims[0]),!t)throw new Error("The pads should be a 1D tensor of shape [2 * input_rank] or [2 * num_axes].")}},Fl=(e,t,r)=>{let o="";for(let n=t-1;n>=0;--n)o+=`\n            k = i32(${e.indicesGet("indices",n)}) - ${ce("uniforms.pads",n,r)};\n            if (k < 0) {\n              break;\n            }\n            if (k >= i32(${ce("uniforms.x_shape",n,t)})) {\n              break;\n            }\n            offset += k * i32(${ce("uniforms.x_strides",n,t)});\n        `;return`\n          value = ${e.type.value}(uniforms.constant_value);\n          for (var i = 0; i < 1; i++) {\n            var offset = 0;\n            var k = 0;\n            ${o}\n            value = x[offset];\n          }\n      `},jl=(e,t,r)=>{let o="";for(let n=t-1;n>=0;--n)o+=`\n                k = i32(${e.indicesGet("indices",n)}) - ${ce("uniforms.pads",n,r)};\n                if (k < 0) {\n                  k = -k;\n                }\n                {\n                  let _2n_1 = 2 * (i32(${ce("uniforms.x_shape",n,t)}) - 1);\n                  k = k % _2n_1;\n                  if(k >= i32(${ce("uniforms.x_shape",n,t)})) {\n                    k = _2n_1 - k;\n                  }\n                }\n                offset += k * i32(${ce("uniforms.x_strides",n,t)});\n            `;return`\n              var offset = 0;\n              var k = 0;\n              ${o}\n              value = x[offset];\n          `},ql=(e,t,r)=>{let o="";for(let n=t-1;n>=0;--n)o+=`\n                k = i32(${e.indicesGet("indices",n)}) - ${ce("uniforms.pads",n,r)};\n                if (k < 0) {\n                  k = 0;\n                }\n                if (k >= i32(${ce("uniforms.x_shape",n,t)})) {\n                  k = i32(${ce("uniforms.x_shape",n,t)}) - 1;\n                }\n                offset += k * i32(${ce("uniforms.x_strides",n,t)});\n            `;return`\n              var offset = 0;\n              var k = 0;\n              ${o}\n              value = x[offset];\n          `},Kl=(e,t,r)=>{let o="";for(let n=t-1;n>=0;--n)o+=`\n                k = i32(${e.indicesGet("indices",n)}) - ${ce("uniforms.pads",n,r)};\n                if (k < 0)  {\n                  k += i32(${ce("uniforms.x_shape",n,t)}]);\n                }\n                if (k >= i32(${ce("uniforms.x_shape",n,t)})) {\n                  k -= i32(${ce("uniforms.x_shape",n,t)});\n                }\n                offset += k * i32(${ce("uniforms.x_strides",n,t)});\n            `;return`\n              var offset = 0;\n              var k = 0;\n              ${o}\n              value = x[offset];\n          `},Yl=(e,t,r)=>{switch(r.mode){case 0:return Fl(e,t,r.pads.length);case 1:return jl(e,t,r.pads.length);case 2:return ql(e,t,r.pads.length);case 3:return Kl(e,t,r.pads.length);default:throw new Error("Invalid mode")}},Zl=(e,t)=>{let r=U.padShape(e[0].dims.slice(),t.pads),o=e[0].dims,s=[{type:"uint32",data:U.size(r)},{type:"uint32",data:t.pads}];if(t.mode===0){let a=Xe(e[0].dataType);s.push({type:a,data:t.value})}s.push(...L(e[0].dims),...L(r));let u=["rank"],l=a=>{let p=F("output",e[0].dataType,r.length),h=M("x",e[0].dataType,o.length),g=h.type.value,b=Yl(p,o.length,t),w=[{name:"output_size",type:"u32"},{name:"pads",type:"i32",length:t.pads.length}];return t.mode===0&&w.push({name:"constant_value",type:g}),`\n            ${a.registerUniforms(w).declareVariables(h,p)}\n            ${a.mainStart()}\n            ${a.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n\n            let indices = ${p.offsetToIndices("global_idx")};\n\n            var value = ${g}(0);\n            ${b}\n            output[global_idx] = value;\n        }`};return{name:"Pad",shaderCache:{hint:`${t.mode}`,inputDependencies:u},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(U.size(r)/64)},programUniforms:s}),getShaderSource:l}},Ql=(e,t)=>{if(e.length>1){let r=e[1].getBigInt64Array(),o=e.length>=3&&e[2].data?e[2].getFloat32Array()[0]:0,n=e[0].dims.length,s=new Int32Array(2*n).fill(0);if(e.length>=4){let l=e[3].getBigInt64Array();for(let a=0;a<l.length;a++)s[Number(l[a])]=Number(r[a]),s[Number(l[a])+n]=Number(r[a+l.length])}else r.forEach((l,a)=>s[Number(a)]=Number(l));let u=[];return s.forEach(l=>u.push(l)),{mode:t.mode,value:o,pads:u}}else return t},Ts=(e,t)=>{Ll(e.inputs);let r=Ql(e.inputs,t);e.compute(Zl(e.inputs,r),{inputs:[0]})}});var nn,Os,Ps,ks,Rs,Xl,Jl,Bs,Ds,Ms,zs,Us,Vs,Ns,Ws,Hs,Gs,Ls,Fs,js=j(()=>{"use strict";Lt();$e();ve();nn=e=>{if(Gt.webgpu.validateInputContent&&(!e||e.length!==1))throw new Error("Pool ops requires 1 input.")},Os=(e,t,r)=>{let o=t.format==="NHWC",n=e.dims.slice();o&&n.splice(1,0,n.pop());let s=Object.hasOwnProperty.call(t,"dilations"),u=t.kernelShape.slice(),l=t.strides.slice(),a=s?t.dilations.slice():[],p=t.pads.slice();Bt.adjustPoolAttributes(r,n,u,l,a,p);let h=Bt.computePoolOutputShape(r,n,l,a,u,p,t.autoPad),g=Object.assign({},t);s?Object.assign(g,{kernelShape:u,strides:l,pads:p,dilations:a,cacheKey:t.cacheKey}):Object.assign(g,{kernelShape:u,strides:l,pads:p,cacheKey:t.cacheKey});let b=h.slice();return b.push(b.splice(1,1)[0]),[g,o?b:h]},Ps=(e,t)=>{let r=t.format==="NHWC",o=U.size(e),n=U.size(t.kernelShape),s=[{type:"uint32",data:o},{type:"uint32",data:n}],u=[{name:"outputSize",type:"u32"},{name:"kernelSize",type:"u32"}];if(t.kernelShape.length<=2){let l=t.kernelShape[t.kernelShape.length-1],a=t.strides[t.strides.length-1],p=t.pads[t.pads.length/2-1],h=t.pads[t.pads.length-1],g=!!(p+h);s.push({type:"uint32",data:l},{type:"uint32",data:a},{type:"uint32",data:p},{type:"uint32",data:h}),u.push({name:"kw",type:"u32"},{name:"sw",type:"u32"},{name:"pwStart",type:"u32"},{name:"pwEnd",type:"u32"});let b=!1;if(t.kernelShape.length===2){let w=t.kernelShape[t.kernelShape.length-2],y=t.strides[t.strides.length-2],_=t.pads[t.pads.length/2-2],I=t.pads[t.pads.length-2];b=!!(_+I),s.push({type:"uint32",data:w},{type:"uint32",data:y},{type:"uint32",data:_},{type:"uint32",data:I}),u.push({name:"kh",type:"u32"},{name:"sh",type:"u32"},{name:"phStart",type:"u32"},{name:"phEnd",type:"u32"})}return[s,u,!0,g,b]}else{if(r)throw new Error("Pooling with kernelShape.length > 2 is not supported for NHWC format.");let l=U.computeStrides(t.kernelShape);s.push({type:"uint32",data:l},{type:"uint32",data:t.pads},{type:"uint32",data:t.strides}),u.push({name:"kernelStrides",type:"u32",length:l.length},{name:"pads",type:"u32",length:t.pads.length},{name:"strides",type:"u32",length:t.strides.length});let a=t.pads.reduce((p,h)=>p+h);return[s,u,!!a,!1,!1]}},ks=(e,t,r,o,n,s,u,l,a,p,h,g)=>{let b=n.format==="NHWC",w=t.type.value,y=F("output",t.type.tensor,o);if(n.kernelShape.length<=2){let _="",I="",$="",x=r-(b?2:1);if(h?_=`\n                for (var i: u32 = 0u; i < uniforms.kw; i++) {\n                  xIndices[${x}] = indices[${x}] * uniforms.sw - uniforms.pwStart + i;\n                  if (xIndices[${x}] < 0 || xIndices[${x}]\n                      >= uniforms.x_shape[${x}]) {\n                    pad++;\n                    continue;\n                  }\n                  let x_val = x[${t.indicesToOffset("xIndices")}];\n                  ${s}\n                }`:_=`\n                for (var i: u32 = 0u; i < uniforms.kw; i++) {\n                  xIndices[${x}] = indices[${x}] * uniforms.sw - uniforms.pwStart + i;\n                  let x_val = x[${t.indicesToOffset("xIndices")}];\n                  ${s}\n                }`,n.kernelShape.length===2){let A=r-(b?3:2);g?I=`\n                for (var j: u32 = 0u; j < uniforms.kh; j++) {\n                  xIndices[${A}] = indices[${A}] * uniforms.sh - uniforms.phStart + j;\n                  if (xIndices[${A}] < 0 || xIndices[${A}] >= uniforms.x_shape[${A}]) {\n                    pad += i32(uniforms.kw);\n                    continue;\n                  }\n              `:I=`\n                for (var j: u32 = 0u; j < uniforms.kh; j++) {\n                  xIndices[${A}] = indices[${A}] * uniforms.sh - uniforms.phStart + j;\n                `,$=`\n              }\n            `}return`\n            ${e.registerUniforms(a).declareVariables(t,y)}\n\n            ${e.mainStart()}\n              ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n\n              let indices = ${y.offsetToIndices("global_idx")};\n              var xIndices = ${y.offsetToIndices("global_idx")};\n\n              var value = ${w}(${l});\n              var pad = 0;\n              ${I}\n              ${_}\n              ${$}\n              ${u}\n\n              output[global_idx] = value;\n            }`}else{if(b)throw new Error("Pooling with kernelShape.length > 2 is not supported for NHWC format.");let _=n.kernelShape.length,I=n.pads.length,$="";return p?$=`\n                if (xIndices[j] >= uniforms.x_shape[j]) {\n                  pad++;\n                  isPad = true;\n                  break;\n                }\n              }\n              if (!isPad) {\n                let x_val = x[${t.indicesToOffset("xIndices")}];\n                ${s}\n              }`:$=`\n              }\n              let x_val = x[${t.indicesToOffset("xIndices")}];\n              ${s}\n            `,`\n            ${e.registerUniforms(a).declareVariables(t,y)}\n\n            ${e.mainStart()}\n              ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n              let indices = ${y.offsetToIndices("global_idx")};\n              var xIndices = ${y.offsetToIndices("global_idx")};\n\n              var offsets: array<u32, ${_}>;\n\n              var value = ${w}(${l});\n              var pad = 0;\n              var isPad = false;\n\n              for (var i: u32 = 0u; i < uniforms.kernelSize; i++) {\n                var offset = i;\n                for (var j = 0u; j < ${_-1}u; j++) {\n                  offsets[j] = offset / ${ce("uniforms.kernelStrides","j",_)};\n                  offset -= offsets[j] * ${ce("uniforms.kernelStrides","j",_)};\n                }\n                offsets[${_-1}] = offset;\n\n                isPad = false;\n                for (var j = ${r-_}u; j < ${r}u; j++) {\n                  xIndices[j] = indices[j] * ${ce("uniforms.strides",`j - ${r-_}u`,_)}\n                    + offsets[j - ${r-_}u] - ${ce("uniforms.pads","j - 2u",I)};\n                  ${$}\n              }\n              ${u}\n\n              output[global_idx] = value;\n            }`}},Rs=e=>`${e.format};${e.ceilMode};${e.autoPad};${e.kernelShape.length}`,Xl=e=>`${Rs(e)};${e.countIncludePad}`,Jl=e=>`${Rs(e)};${e.storageOrder};${e.dilations}`,Bs=e=>({format:e.format,autoPad:["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][e.auto_pad],ceilMode:e.ceil_mode,kernelShape:e.kernel_shape,strides:e.strides,pads:e.pads}),Ds=(e,t,r,o)=>{let[n,s]=Os(t,o,r),u=M("x",t.dataType,t.dims.length),l=u.type.value,a="value += x_val;",p="";n.countIncludePad?p+=`value /= ${l}(uniforms.kernelSize);`:p+=`value /= ${l}(i32(uniforms.kernelSize) - pad);`;let[h,g,b,w,y]=Ps(s,n);h.push(...L(t.dims),...L(s));let _=["rank"];return{name:e,shaderCache:{hint:`${o.cacheKey};${b};${w};${y}`,inputDependencies:_},getRunData:()=>({outputs:[{dims:s,dataType:t.dataType}],dispatchGroup:{x:Math.ceil(U.size(s)/64)},programUniforms:h}),getShaderSource:I=>ks(I,u,t.dims.length,s.length,n,a,p,0,g,b,w,y)}},Ms=e=>{let t=e.count_include_pad!==0,r=Bs(e);if(r.ceilMode!==0)throw new Error("using ceil() in shape computation is not yet supported for AveragePool");let o={countIncludePad:t,...r,cacheKey:""};return{...o,cacheKey:Xl(o)}},zs=(e,t)=>{nn(e.inputs),e.compute(Ds("AveragePool",e.inputs[0],!1,t))},Us={autoPad:"",ceilMode:0,countIncludePad:!1,kernelShape:[],strides:[],pads:[],storageOrder:0,dilations:[]},Vs=e=>{let t=e.format;return{format:t,...Us,cacheKey:t}},Ns=(e,t)=>{nn(e.inputs),e.compute(Ds("GlobalAveragePool",e.inputs[0],!0,t))},Ws=(e,t,r,o)=>{let[n,s]=Os(t,o,r),u=`\n      value = max(x_val, value);\n    `,l="",a=M("x",t.dataType,t.dims.length),p=["rank"],[h,g,b,w,y]=Ps(s,n);return h.push(...L(t.dims),...L(s)),{name:e,shaderCache:{hint:`${o.cacheKey};${b};${w};${y}`,inputDependencies:p},getRunData:()=>({outputs:[{dims:s,dataType:t.dataType}],dispatchGroup:{x:Math.ceil(U.size(s)/64)},programUniforms:h}),getShaderSource:_=>ks(_,a,t.dims.length,s.length,n,u,l,-1e5,g,b,w,y)}},Hs=(e,t)=>{nn(e.inputs),e.compute(Ws("MaxPool",e.inputs[0],!1,t))},Gs=e=>{let t=e.storage_order,r=e.dilations,o=Bs(e);if(t!==0)throw new Error("column major storage order is not yet supported for MaxPool");if(o.ceilMode!==0)throw new Error("using ceil() in shape computation is not yet supported for MaxPool");let n={storageOrder:t,dilations:r,...o,cacheKey:""};return{...n,cacheKey:Jl(n)}},Ls=e=>{let t=e.format;return{format:t,...Us,cacheKey:t}},Fs=(e,t)=>{nn(e.inputs),e.compute(Ws("GlobalMaxPool",e.inputs[0],!0,t))}});var tc,rc,qs,Ks=j(()=>{"use strict";Lt();Ne();ve();tc=(e,t,r)=>{let o=e===t,n=e<t&&r<0,s=e>t&&r>0;if(o||n||s)throw new Error("Range these inputs\' contents are invalid.")},rc=(e,t,r,o)=>{let n=Math.abs(Math.ceil((t-e)/r)),s=[n],u=n,l=Xe(o),a=[{type:"uint32",data:u},{type:l,data:e},{type:l,data:r},...L(s)],p=h=>{let g=F("output",o,s.length),b=g.type.value,w=[{name:"outputSize",type:"u32"},{name:"start",type:b},{name:"delta",type:b}];return`\n        ${h.registerUniforms(w).declareVariables(g)}\n        ${h.mainStart()}\n        ${h.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n        output[global_idx] = uniforms.start + ${b}(global_idx) * uniforms.delta;\n      }`};return{name:"Range",shaderCache:{hint:`${o}`},getShaderSource:p,getRunData:()=>({outputs:[{dims:s,dataType:o}],dispatchGroup:{x:Math.ceil(u/64)},programUniforms:a})}},qs=e=>{let t=0,r=0,o=0;e.inputs[0].dataType===6?(t=e.inputs[0].getInt32Array()[0],r=e.inputs[1].getInt32Array()[0],o=e.inputs[2].getInt32Array()[0]):e.inputs[0].dataType===1&&(t=e.inputs[0].getFloat32Array()[0],r=e.inputs[1].getFloat32Array()[0],o=e.inputs[2].getFloat32Array()[0]),Gt.webgpu.validateInputContent&&tc(t,r,o),e.compute(rc(t,r,o,e.inputs[0].dataType),{inputs:[]})}});var nc,oc,ac,ic,sc,uc,dc,lc,cc,pc,mc,Ys,fc,hc,gc,yc,bc,Zs,Qs,Xs=j(()=>{"use strict";$e();je();ve();nc=(e,t)=>{if(e.every(r=>r>0||(()=>{throw new Error("Resize requires scales input values to be positive")})),e.length>0){if(t.mode==="linear"){if(!(e.length===2||e.length===3||e.length===4&&e[0]===1&&e[1]===1||e.length===4&&e[0]===1&&e[3]===1||e.length===5&&e[0]===1&&e[1]===1))throw new Error(`For linear mode, Resize requires scales to be 2D, 3D, 4D with either two outermost or one innermost and\n            one outermost scale values equal to 1, or 5D with two outermost scale values equal to 1`)}else if(t.mode==="cubic"&&!(e.length===2||e.length===4&&e[0]===1&&e[1]===1||e.length===4&&e[0]===1&&e[3]===1))throw new Error("Resize requires scales input size to be 2 or 4 for cubic mode")}},oc=(e,t,r)=>{t.every(n=>n>=0&&n<r||(()=>{throw new Error("Resize requires axes input values to be positive and less than rank")}));let o=new Array(r).fill(1);return t.forEach((n,s)=>o[n]=e[s]),o},ac=(e,t,r,o,n,s)=>{let[u,l,a]=r>10?[1,2,3]:[-1,e.length>1?1:-1,-1],p=e[0].dims.length;if(u>0&&e.length>u&&e[u].dims.length>0)e[u].getFloat32Array().forEach(h=>s.push(h));else if(t.coordinateTransformMode==="tf_crop_and_resize")throw new Error("Resize requires RoI input to be specified when coordinateTransformMode is tfCropAndResize");if(l>0&&e.length>l&&e[l].dims.length>0){if(e[l].getFloat32Array().forEach(h=>o.push(h)),o.length!==0&&o.length!==p&&r>=18&&o.length!==t.axes.length)throw new Error("Resize requires scales input size to be same as input rank or axes size for opset 18 and up");nc(o,t),t.axes.length>0&&oc(o,t.axes,p).forEach((h,g)=>o[g]=h)}if(a>0&&e.length>a&&(e[a].getBigInt64Array().forEach(h=>n.push(Number(h))),n.length!==p||r>=18&&n.length===t.axes.length))throw new Error("Resize requires sizes input size to be same as input rank or axes size for opset 18 and up");if(t.axes.length>0){if(o.length!==t.axes.length)throw new Error(\'Resize requires "scales" input size to be of axes rank when axes attributes is specified\');if(n.length!==t.axes.length)throw new Error(\'Resize requires "sizes" input size to be of rank axes rank when axes attributes is specified\')}if(typeof o<"u"&&typeof n<"u"&&o.length>0&&n.length>p)throw new Error("Resize requires only of scales or sizes to be specified")},ic=(e,t)=>`fn getOriginalCoordinateFromResizedCoordinate(xResized: u32, xScale: f32, lengthResized: u32,\n     lengthOriginal: u32, roiStart: f32, roiEnd: f32) -> ${t} { `+(()=>{switch(e){case"asymmetric":return`return ${t}(xResized) / ${t}(xScale);`;case"pytorch_half_pixel":return`if (lengthResized > 1) {\n                    return (${t}(xResized) + 0.5) / ${t}(xScale) - 0.5;\n                  } else {\n                    return 0.0;\n                  }`;case"tf_half_pixel_for_nn":return`return (${t}(xResized) + 0.5) / ${t}(xScale);`;case"align_corners":return`if (lengthResized == 1) {\n                    return 0.0;\n                  } else {\n                    // The whole part and the fractional part are calculated separately due to inaccuracy of floating\n                    // point division. As an example, f32(21) / f32(7) may evaluate to 2.99... instead of 3, causing an\n                    // offset-by-one error later in floor().\n                    let whole = ${t}(xResized * (lengthOriginal - 1) / (lengthResized - 1));\n                    let fract =\n                        ${t}(xResized * (lengthOriginal - 1) % (lengthResized - 1)) / ${t}(lengthResized - 1);\n                    return whole + fract;\n                  }`;case"tf_crop_and_resize":return`if (lengthResized > 1) {\n                    return ${t}(roiStart) * ${t}(lengthOriginal - 1) +\n                        (${t}(xResized) * ${t}(roiEnd - roiStart) * ${t}(lengthOriginal - 1)) /\n                        ${t}(lengthResized - 1);\n                  } else {\n                    return 0.5 * ${t}(roiStart + roiEnd) * ${t}(lengthOriginal - 1);\n                  }`;case"half_pixel_symmetric":return`const outputWidth = ${t}xScale * ${t}(lengthResized);\n                  const adjustment = ${t}(lengthResized) / outputWidth;\n                  const center = ${t}(lengthOriginal) / 2;\n                  const offset = center * (1 - adjustment);\n                  return offset + ((${t}(xResized) + 0.5) / ${t}(xScale)) - 0.5;`;case"half_pixel":return`return ((${t}(xResized) + 0.5) / ${t}(xScale)) - 0.5;`;default:throw new Error(`Coordinate transform mode ${e} is not supported`)}})()+"}",sc=(e,t,r)=>`fn getNearestPixelFromOriginal(xOriginal: ${r}, isDownSample: bool) -> ${r} {`+(()=>{switch(e){case"round_prefer_ceil":return"if (fract(xOriginal) == 0.5) {             return ceil(xOriginal);           } else {             return round(xOriginal);           }";case"floor":return"return floor(xOriginal);";case"ceil":return"return ceil(xOriginal);";case"round_prefer_floor":return"if (fract(xOriginal) == 0.5) {                     return floor(xOriginal);                   } else {                     return round(xOriginal);                   }";case"simple":default:if(t<11)return"if (isDownSample)                     {                       return ceil(xOriginal);                     } else {                       return xOriginal;                     }";throw new Error(`Nearest mode ${e} is not supported`)}})()+"}",uc=(e,t,r)=>{let o=new Array(r).fill(0).concat(new Array(r).fill(1)),n=e.length===0?o:e.slice();return t.length>0?(t.forEach((s,u)=>{o[s]=n[u],o[u+r]=n[t.length+u]}),o):n},dc=(e,t,r,o)=>{let n=[];if(r.length>0)if(o.length>0){if(e.forEach(s=>n.push(s)),Math.max(...o)>e.length)throw new Error("axes is out of bound");o.forEach((s,u)=>n[s]=r[u])}else r.forEach(s=>n.push(s));else{if(t.length===0)throw new Error("Resize requires either scales or sizes.");n=e.map((s,u)=>Math.round(s*t[u]))}return n},lc=(e,t,r)=>{let o=(()=>{switch(r.keepAspectRatioPolicy){case"not_larger":return r.axes.length>0?Math.min(...r.axes.map(s=>t[s]),Number.MAX_VALUE):Math.min(...t,Number.MAX_VALUE);case"not_smaller":return r.axes.length>0?Math.max(...r.axes.map(s=>t[s]),Number.MIN_VALUE):Math.max(...t,Number.MIN_VALUE);default:throw new Error(`Keep aspect ratio policy ${r.keepAspectRatioPolicy} is not supported`)}})();t.fill(1,0,t.length);let n=e.slice();return r.axes.length>0?(r.axes.forEach(s=>t[s]=o),r.axes.forEach(s=>n[s]=Math.round(e[s]*t[s]))):(t.fill(o,0,t.length),n.forEach((s,u)=>n[u]=Math.round(s*t[u]))),n},cc=(e,t,r,o,n)=>`\n    fn calculateOriginalIndicesFromOutputIndices(output_indices: ${e.type.indices}) -> array<${e.type.value}, ${r.length}> {\n      var original_indices: array<${e.type.value}, ${r.length}>;\n      for (var i:u32 = 0; i < ${r.length}; i++) {\n        var output_index = ${e.indicesGet("output_indices","i")};\n        var scale = ${ce("uniforms.scales","i",o)};\n        var roi_low = ${ce("uniforms.roi","i",n)};\n        var roi_hi = ${ce("uniforms.roi",`i + ${t.length}`,n)};\n        if (scale == 1.0) {\n          original_indices[i] = ${e.type.value}(output_index);\n        } else {\n          var input_shape_i = ${ce("uniforms.input_shape","i",t.length)};\n          var output_shape_i = ${ce("uniforms.output_shape","i",r.length)};\n          original_indices[i] = getOriginalCoordinateFromResizedCoordinate(output_index, scale, output_shape_i,\n                                                                           input_shape_i, roi_low, roi_hi);\n        }\n      }\n      return original_indices;\n    }`,pc=(e,t,r,o,n,s,u)=>`\n    fn calculateInputIndicesFromOutputIndices(output_indices: ${t.type.indices}) -> ${e.type.indices} {\n      var input_indices: ${e.type.indices};\n      for (var i:u32 = 0; i < ${o.length}; i++) {\n        var output_index = ${t.indicesGet("output_indices","i")};\n        var input_index: u32;\n        var scale = ${ce("uniforms.scales","i",n)};\n        if (scale == 1.0) {\n          input_index = output_index;\n        } else {\n          var roi_low = ${ce("uniforms.roi","i",s)};\n          var roi_hi = ${ce("uniforms.roi",`i + ${r.length}`,s)};\n          var input_shape_i = ${ce("uniforms.input_shape","i",r.length)};\n          var output_shape_i = ${ce("uniforms.output_shape","i",o.length)};\n          var original_idx = getOriginalCoordinateFromResizedCoordinate(output_index, scale, output_shape_i,\n                                                                        input_shape_i, roi_low, roi_hi);\n          if (!${u} || (original_idx >= 0 && original_idx < ${t.type.value}(input_shape_i))) {\n            if (original_idx < 0) {\n              input_index = 0;\n            } else if (original_idx > ${t.type.value}(input_shape_i - 1)) {\n              input_index = input_shape_i - 1;\n            } else {\n              input_index = u32(getNearestPixelFromOriginal(original_idx, scale < 1));\n            }\n          } else {\n            input_index = u32(original_idx);\n          }\n        }\n        ${e.indicesSet("input_indices","i"," input_index")}\n      }\n      return input_indices;\n    }`,mc=(e,t)=>`\n    fn checkInputIndices(input_indices: ${e.type.indices}) -> bool {\n      for (var i:u32 = 0; i < ${t.length}; i++) {\n        var input_index = ${e.indicesGet("input_indices","i")};\n        if (input_index < 0 || input_index >= ${ce("uniforms.input_shape","i",t.length)}) {\n          return false;\n        }\n      }\n      return true;\n    }`,Ys=(e,t,r,o)=>e.rank>o?`\n    ${e.indicesSet("input_indices",t,"channel")};\n    ${e.indicesSet("input_indices",r,"batch")};\n`:"",fc=(e,t,r,o,n)=>{let[u,l,a,p]=r.length===2?[-1,0,1,-1]:[0,2,3,1],h=e.type.value;return`\n    fn getInputValue(batch: u32, channel: u32, row: u32, col: u32) -> ${h} {\n      var input_indices: ${e.type.indices};\n      ${e.indicesSet("input_indices",l,`max(0, min(row, ${r[l]} - 1))`)};\n      ${e.indicesSet("input_indices",a,`max(0, min(col, ${r[a]} - 1))`)};\n      ${Ys(e,p,u,2)}\n      return ${e.getByIndices("input_indices")};\n    }\n\n    fn bilinearInterpolation(output_indices: ${t.type.indices}) -> ${h} {\n      var originalIndices = calculateOriginalIndicesFromOutputIndices(output_indices);\n      var row:${h} = originalIndices[${l}];\n      var col:${h} = originalIndices[${a}];\n      ${o?`if (row < 0 || row > (${r[l]} - 1) || col < 0 || col > (${r[a]} - 1)) {\n        return ${n};\n      }`:""};\n      row = max(0, min(row, ${r[l]} - 1));\n      col = max(0, min(col, ${r[a]} - 1));\n      var row1: u32 = u32(row);\n      var col1: u32 = u32(col);\n      var row2: u32 = u32(row + 1);\n      var col2: u32 = u32(col + 1);\n      var channel: u32 = ${r.length>2?`u32(originalIndices[${p}])`:"0"};\n      var batch: u32 =  ${r.length>2?`u32(originalIndices[${u}])`:"0"};\n      var x11: ${h} = getInputValue(batch, channel, row1, col1);\n      var x12: ${h} = getInputValue(batch, channel, row1, col2);\n      var x21: ${h} = getInputValue(batch, channel, row2, col1);\n      var x22: ${h} = getInputValue(batch, channel, row2, col2);\n      var dx1: ${h} = abs(row - ${h}(row1));\n      var dx2: ${h} = abs(${h}(row2) - row);\n      var dy1: ${h} = abs(col - ${h}(col1));\n      var dy2: ${h} = abs(${h}(col2) - col);\n      if (row1 == row2) {\n        dx1 = 0.5;\n        dx2 = 0.5;\n      }\n      if (col1 == col2) {\n        dy1 = 0.5;\n        dy2 = 0.5;\n      }\n      return (x11 * dx2 * dy2 + x12 * dx2 * dy1 + x21 * dx1 * dy2 + x22 * dx1 * dy1);\n    }`},hc=(e,t,r,o,n,s,u,l,a,p)=>{let h=r.length===2,g=!0,[b,w]=h?[0,1]:g?[2,3]:[1,2],y=e.type.value,_=I=>{let $=I===b?"row":"col";return`\n      fn ${$}CubicInterpolation(input_indices: ${e.type.indices}, output_indices: ${t.type.indices}) -> ${y} {\n        var output_index = ${t.indicesGet("output_indices",I)};\n        var originalIdx: ${y} = getOriginalCoordinateFromResizedCoordinate(output_index, ${n[I]},\n        ${o[I]}, ${r[I]}, ${s[I]}, ${s[I]} + ${r.length});\n        var fractOriginalIdx: ${y} = originalIdx - floor(originalIdx);\n        var coefs = getCubicInterpolationCoefs(fractOriginalIdx);\n\n        if (${l} && (originalIdx < 0 || originalIdx > (${r[I]} - 1))) {\n          return ${a};\n        }\n        var data: array<${y}, 4> = array<${y}, 4>(0.0, 0.0, 0.0, 0.0);\n        for (var i: i32 = -1; i < 3; i++) {\n          var ${$}: ${y} = originalIdx + ${y}(i);\n          if (${$} < 0 || ${$} >= ${r[I]}) {\n            ${(()=>p?`coefs[i + 1] = 0.0;\n                        continue;`:l?`return ${a};`:`${$} = max(0, min(${$}, ${r[I]} - 1));`)()};\n          }\n        var input_indices_copy: ${e.type.indices} = input_indices;\n          ${e.indicesSet("input_indices_copy",I,`u32(${$})`)};\n          data[i + 1] = ${I===b?e.getByIndices("input_indices_copy"):"rowCubicInterpolation(input_indices_copy, output_indices)"};\n        }\n        return cubicInterpolation1D(data, coefs);\n      }`};return`\n    ${_(b)};\n    ${_(w)};\n  fn getCubicInterpolationCoefs(s: ${y}) -> array<${y}, 4> {\n    var absS = abs(s);\n    var coeffs: array<${y}, 4> = array<${y}, 4>(0.0, 0.0, 0.0, 0.0);\n    var oneMinusAbsS: ${y} = 1.0 - absS;\n    var twoMinusAbsS: ${y} = 2.0 - absS;\n    var onePlusAbsS: ${y} = 1.0 + absS;\n    coeffs[0] = ((${u} * onePlusAbsS - 5 * ${u}) * onePlusAbsS + 8 * ${u}) * onePlusAbsS - 4 * ${u};\n    coeffs[1] = ((${u} + 2) * absS - (${u} + 3)) * absS * absS + 1;\n    coeffs[2] = ((${u} + 2) * oneMinusAbsS - (${u} + 3)) * oneMinusAbsS * oneMinusAbsS + 1;\n    coeffs[3] = ((${u} * twoMinusAbsS - 5 * ${u}) * twoMinusAbsS + 8 * ${u}) * twoMinusAbsS - 4 * ${u};\n    return coeffs;\n  }\n\n  fn cubicInterpolation1D(x: array<${y}, 4>, coefs: array<${y}, 4>) -> ${y} {\n    var coefsSum: ${y} = coefs[0] + coefs[1] + coefs[2] + coefs[3];\n    return (x[0] * coefs[0] + x[1] * coefs[1]+ x[2] * coefs[2]+ x[3] * coefs[3]) / coefsSum;\n  }\n\n  fn bicubicInterpolation(output_indices: ${t.type.indices}) -> ${y} {\n    var input_indices: ${e.type.indices} = output_indices;\n    return colCubicInterpolation(input_indices, output_indices);\n  }\n    `},gc=(e,t,r,o,n)=>{let[u,l,a,p,h]=r.length===3?[-1,0,1,2,-1]:[0,2,3,4,1],g=e.type.value;return`\n    fn getInputValue(batch: u32, channel: u32, depth:u32, height: u32, width: u32) -> ${g} {\n      var input_indices: ${e.type.indices};\n      ${e.indicesSet("input_indices",l,`max(0, min(depth, ${r[l]} - 1))`)};\n      ${e.indicesSet("input_indices",a,`max(0, min(height, ${r[a]} - 1))`)};\n      ${e.indicesSet("input_indices",p,`max(0, min(width, ${r[p]} - 1))`)};\n      ${Ys(e,h,u,3)}\n      return ${e.getByIndices("input_indices")};\n    }\n\n    fn trilinearInterpolation(output_indices: ${t.type.indices}) -> ${g} {\n      var originalIndices = calculateOriginalIndicesFromOutputIndices(output_indices);\n      var depth:${g} = originalIndices[${l}];\n      var height:${g} = originalIndices[${a}];\n      var width:${g} = originalIndices[${p}];\n      ${o?`if (depth < 0 || depth > (${r[l]} - 1) || height < 0 || height > (${r[a]} - 1) || width < 0 || (width > ${r[p]} - 1)) {\n      return ${n};\n        }`:""};\n\n    depth = max(0, min(depth, ${r[l]} - 1));\n      height = max(0, min(height, ${r[a]} - 1));\n      width = max(0, min(width, ${r[p]} - 1));\n      var depth1: u32 = u32(depth);\n      var height1: u32 = u32(height);\n      var width1: u32 = u32(width);\n      var depth2: u32 = u32(depth + 1);\n      var height2: u32 = u32(height + 1);\n      var width2: u32 = u32(width + 1);\n      var channel: u32 = ${r.length>3?`u32(originalIndices[${h}])`:"0"};\n      var batch: u32 =  ${r.length>3?`u32(originalIndices[${u}])`:"0"};\n\n      var x111: ${g} = getInputValue(batch, channel, depth1, height1, width1);\n      var x112: ${g} = getInputValue(batch, channel, depth1, height1, width2);\n      var x121: ${g} = getInputValue(batch, channel, depth1, height2, width1);\n      var x122: ${g} = getInputValue(batch, channel, depth1, height2, width2);\n      var x211: ${g} = getInputValue(batch, channel, depth2, height1, width1);\n      var x212: ${g} = getInputValue(batch, channel, depth2, height1, width2);\n      var x221: ${g} = getInputValue(batch, channel, depth2, height2, width1);\n      var x222: ${g} = getInputValue(batch, channel, depth2, height2, width2);\n      var dx1: ${g} = abs(depth - ${g}(depth1));\n      var dx2: ${g} = abs(${g}(depth2) - depth);\n      var dy1: ${g} = abs(height - ${g}(height1));\n      var dy2: ${g} = abs(${g}(height2) - height);\n      var dz1: ${g} = abs(width - ${g}(width1));\n      var dz2: ${g} = abs(${g}(width2) - width);\n      if (depth1 == depth2) {\n        dx1 = 0.5;\n        dx2 = 0.5;\n      }\n      if (height1 == height2) {\n        dy1 = 0.5;\n        dy2 = 0.5;\n      }\n      if (width1 == width2) {\n        dz1 = 0.5;\n        dz2 = 0.5;\n      }\n      return (x111 * dx2 * dy2 * dz2 + x112 * dx2 * dy2 * dz1 + x121 * dx2 * dy1 *dz2 + x122 * dx2 * dy1 * dz1 +\n              x211 * dx1 * dy2 * dz2 + x212 * dx1 * dy2 * dz1 + x221 * dx1 * dy1 *dz2 + x222 * dx1 * dy1 * dz1);\n    }`},yc=(e,t,r,o,n,s)=>{let u=e.dims,l=uc(s,t.axes,u.length),a=dc(u,o,n,t.axes),p=o.slice();o.length===0&&(p=u.map((x,E)=>x===0?1:a[E]/x),t.keepAspectRatioPolicy!=="stretch"&&(a=lc(u,p,t)));let h=F("output",e.dataType,a.length),g=M("input",e.dataType,u.length),b=U.size(a),w=u.length===a.length&&u.every((x,E)=>x===a[E]),y=t.coordinateTransformMode==="tf_crop_and_resize",_=t.extrapolationValue,I=g.type.value,$=x=>`\n      ${w?"":`\n      ${ic(t.coordinateTransformMode,I)};\n      ${(()=>{switch(t.mode){case"nearest":return`\n              ${mc(g,u)};\n              ${sc(t.nearestMode,r,I)};\n              ${pc(g,h,u,a,p.length,l.length,y)};\n              `;case"linear":return`\n              ${cc(h,u,a,p.length,l.length)};\n              ${(()=>{if(u.length===2||u.length===4)return`${fc(g,h,u,y,_)}`;if(u.length===3||u.length===5)return`${gc(g,h,u,y,_)}`;throw Error("Linear mode only supports input dims 2, 3, 4 and 5 are supported in linear mode.")})()};\n            `;case"cubic":return`\n            ${(()=>{if(u.length===2||u.length===4)return`${hc(g,h,u,a,p,l,t.cubicCoeffA,y,t.extrapolationValue,t.excludeOutside)}`;throw Error("Cubic mode only supports input dims 2 and 4 are supported in linear mode.")})()};\n            `;default:throw Error("Invalid resize mode")}})()};\n      `}\n      ${x.registerUniform("output_size","u32").registerUniform("scales","f32",p.length).registerUniform("roi","f32",l.length).declareVariables(g,h)}\n      ${x.mainStart()}\n        ${x.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n        ${w?"output[global_idx] = input[global_idx];":`\n        let output_indices = ${h.offsetToIndices("global_idx")};\n        var input_indices: ${g.type.indices};\n        ${(()=>{switch(t.mode){case"nearest":return`input_indices = calculateInputIndicesFromOutputIndices(output_indices);\n                if (checkInputIndices(input_indices)) {\n                  output[global_idx] = ${g.getByIndices("input_indices")};\n                } else {\n                  output[global_idx] = ${t.extrapolationValue};\n                }`;case"linear":return`output[global_idx] = ${u.length===2||u.length===4?"bilinearInterpolation":"trilinearInterpolation"}(output_indices);`;case"cubic":return"output[global_idx] = bicubicInterpolation(output_indices);";default:throw Error(`Unsupported resize mode: ${t.mode}`)}})()};\n`}\n      }`;return{name:"Resize",shaderCache:{hint:`${t.cacheKey}|${r}|${p.length>0?p:""}|${n.length>0?n:""}|${l.length>0?l:""}|${w}|${u}`,inputDependencies:["rank"]},getShaderSource:$,getRunData:()=>({outputs:[{dims:a,dataType:e.dataType}],dispatchGroup:{x:Math.ceil(b/64)},programUniforms:[{type:"uint32",data:b},{type:"float32",data:p},{type:"float32",data:l},...L(u),...L(a)]})}},bc=e=>{let t=e.customDataBuffer;return new Uint32Array(t,t.byteOffset,1)[0]},Zs=(e,t)=>{let r=[],o=[],n=[],s=bc(e);if(t.antialias!==0)throw Error("Only default value (0) for Antialias attribute is supported");ac(e.inputs,t,s,r,o,n),e.compute(yc(e.inputs[0],t,s,r,o,n),{inputs:[0]})},Qs=e=>{let t=e.antialias,r=e.axes,o=e.coordinateTransformMode,n=e.cubicCoeffA,s=e.excludeOutside!==0,u=e.extrapolationValue,l=e.keepAspectRatioPolicy,a=e.mode,p=e.nearestMode===""?"simple":e.nearestMode;return ge({antialias:t,axes:r,coordinateTransformMode:o,cubicCoeffA:n,excludeOutside:s,extrapolationValue:u,keepAspectRatioPolicy:l,mode:a,nearestMode:p})}});var wc,vc,Js,eu,tu=j(()=>{"use strict";Ne();$e();je();ve();wc=e=>{if(!e||e.length<3)throw new Error("layerNorm requires at least 3 inputs.");let t=e[0],r=e[1],o=e[2];if(t.dataType!==r.dataType||t.dataType!==o.dataType)throw new Error("All inputs must have the same data type");if(t.dims.length!==3&&t.dims.length!==2)throw new Error("Input must be 2D or 3D");if(r.dims.length!==3&&r.dims.length!==2)throw new Error("Skip must be 2D or 3D");let n=t.dims[t.dims.length-1],s=t.dims[t.dims.length-2];if(r.dims[r.dims.length-1]!==n)throw new Error("Skip must have the same hidden size as input");if(r.dims[r.dims.length-2]!==s)throw new Error("Skip must have the same sequence length as input");if(o.dims.length!==1)throw new Error("Gamma must be 1D");if(o.dims[o.dims.length-1]!==n)throw new Error("Gamma must have the same hidden size as input");if(e.length>3){let u=e[3];if(u.dims.length!==1)throw new Error("Beta must be 1D");if(u.dims[u.dims.length-1]!==n)throw new Error("Beta must have the same hidden size as input")}if(e.length>4){let u=e[4];if(u.dims.length!==1)throw new Error("Bias must be 1D");if(u.dims[u.dims.length-1]!==n)throw new Error("Bias must have the same hidden size as input")}},vc=(e,t,r,o)=>{let n=e[0].dims,s=U.size(n),u=n,l=s,a=n.slice(-1)[0],p=o?n.slice(0,-1).concat(1):[],h=e.length>3,g=e.length>4,b=o&&r>1,w=o&&r>2,y=r>3,_=Fe(a),I=[M("x",e[0].dataType,e[0].dims,_),M("skip",e[1].dataType,e[1].dims,_),M("gamma",e[2].dataType,e[2].dims,_)];h&&I.push(M("beta",e[3].dataType,e[3].dims,_)),g&&I.push(M("bias",e[4].dataType,e[4].dims,_)),I.push(F("output",e[0].dataType,u,_)),b&&I.push(F("meanOutput",1,p)),w&&I.push(F("invStdOutput",1,p)),y&&I.push(F("inputSkipBiasSum",e[0].dataType,u,_));let $=Le(e[0].dataType),x=A=>`\n      const hiddenSize: f32 = ${a};\n      const hiddenSizeVectorized: u32 = ${a/_};\n      const epsilon: f32 = ${t.epsilon};\n\n      ${A.declareVariables(...I)}\n\n      ${A.mainStart()}\n        ${A.guardAgainstOutOfBoundsWorkgroupSizes(l/a)}\n        let offset = global_idx * hiddenSizeVectorized;\n        var sum = ${Ze("f32",_)};\n        var squareSum = ${Ze("f32",_)};\n        for (var i: u32 = 0; i < hiddenSizeVectorized; i++) {\n          let skipValue = skip[offset + i];\n          let biasValue = ${g?"bias[i]":"0.0"};\n          let inputValue = x[offset + i];\n          let value = inputValue + skipValue + biasValue;\n          ${y?"inputSkipBiasSum[offset + i] = value;":""}\n          output[offset + i] = value;\n          let f32Value = ${at($,_,"value")};\n          sum += f32Value;\n          squareSum += f32Value * f32Value;\n        }\n        let mean = ${Je("sum",_)} / hiddenSize;\n        let invStdDev = inverseSqrt(${Je("squareSum",_)} / hiddenSize - mean * mean + epsilon);\n        ${b?"meanOutput[global_idx] = mean;":""}\n        ${w?"invStdOutput[global_idx] = invStdDev;":""}\n        for (var i: u32 = 0; i < hiddenSizeVectorized; i++) {\n          output[offset + i] = (output[offset + i] - ${$}(mean)) * ${$}(invStdDev) * gamma[i]\n           + ${h?"beta[i]":"0.0"};\n        }\n      }`,E=[{dims:u,dataType:e[0].dataType}];return r>1&&E.push({dims:p,dataType:1}),r>2&&E.push({dims:p,dataType:1}),r>3&&E.push({dims:n,dataType:e[0].dataType}),{name:"SkipLayerNormalization",shaderCache:{hint:t.cacheKey},getShaderSource:x,getRunData:()=>({outputs:E,dispatchGroup:{x:Math.ceil(l/a/64)}})}},Js=(e,t)=>{wc(e.inputs);let o=[0];e.outputCount>1&&o.push(-3),e.outputCount>2&&o.push(-3),e.outputCount>3&&o.push(3),e.compute(vc(e.inputs,t,e.outputCount,!1),{outputs:o})},eu=e=>{let t=e.epsilon;return ge({epsilon:t})}});var $c,on,Sc,ru,xc,_c,nu,ou,au=j(()=>{"use strict";Ne();$e();je();ve();$c=(e,t)=>{if(!e||e.length<1)throw new Error("too few inputs");if(t.axes.length!==0){if(t.axes.length!==t.starts.length||t.axes.length!==t.ends.length)throw new Error("axes, starts and ends must have the same length")}else if(t.starts.length!==t.ends.length)throw new Error("starts and ends must have the same length");e.slice(1).forEach((r,o)=>{if(e[o+1].dataType!==6&&e[o+1].dataType!==7)throw new Error(`Input ${o} must be an array of int32 or int64`)})},on=(e,t)=>{let r=[];if(e.length>t)if(e[t].dataType===7)e[t].getBigInt64Array().forEach(o=>r.push(Number(o)));else if(e[t].dataType===6)e[t].getInt32Array().forEach(o=>r.push(Number(o)));else throw new Error(`Input ${t} must be an array of int32 or int64`);return r},Sc=(e,t)=>{if(e.length>1){let r=on(e,1),o=on(e,2),n=on(e,3);return n.length===0&&(n=[...Array(e[0].dims.length).keys()]),ge({starts:r,ends:o,axes:n})}else return t},ru=(e,t,r,o,n)=>{let s=e;return e<0&&(s+=r[o[t]]),n[t]<0?Math.max(0,Math.min(s,r[o[t]]-1)):Math.max(0,Math.min(s,r[o[t]]))},xc=(e,t,r)=>`fn calculateInputIndices(output_indices: ${t.type.indices}) -> ${e.type.indices} {\n          var input_indices: ${e.type.indices};\n          var carry = 0u;\n          for (var i = ${r.length}; i >= 0; i--) {\n            let input_shape_i = ${ce("uniforms.input_shape","i",r.length)};\n            let steps_i = ${ce("uniforms.steps","i",r.length)};\n            let signs_i = ${ce("uniforms.signs","i",r.length)};\n            let starts_i = ${ce("uniforms.starts","i",r.length)};\n            var output_index = ${t.indicesGet("output_indices","i")};\n            var input_index = output_index * steps_i + starts_i + carry;\n            carry = input_index / input_shape_i;\n            input_index = input_index % input_shape_i;\n            if (signs_i < 0) {\n              input_index = input_shape_i - input_index - 1u + starts_i;\n            }\n            ${e.indicesSet("input_indices","i","input_index")};\n          }\n          return input_indices;\n      }`,_c=(e,t)=>{let r=e[0].dims,o=U.size(r),n=t.axes.length>0?U.normalizeAxes(t.axes,r.length):[...Array(r.length).keys()],s=on(e,4);s.forEach($=>$!==0||(()=>{throw new Error("step cannot be 0")})),s.length===0&&(s=Array(n.length).fill(1));let u=t.starts.map(($,x)=>ru($,x,r,n,s)),l=t.ends.map(($,x)=>ru($,x,r,n,s));if(n.length!==u.length||n.length!==l.length)throw new Error("start, ends and axes should have the same number of elements");if(n.length!==r.length)for(let $=0;$<r.length;++$)n.includes($)||(u.splice($,0,0),l.splice($,0,r[$]),s.splice($,0,1));let a=s.map($=>Math.sign($));s.forEach(($,x,E)=>{if($<0){let A=(l[x]-u[x])/$,z=u[x],R=z+A*s[x];u[x]=R,l[x]=z,E[x]=-$}});let p=r.slice(0);n.forEach(($,x)=>{p[$]=Math.ceil((l[$]-u[$])/s[$])});let h={dims:p,dataType:e[0].dataType},g=F("output",e[0].dataType,p.length),b=M("input",e[0].dataType,e[0].dims.length),w=U.size(p),y=[{name:"outputSize",type:"u32"},{name:"starts",type:"u32",length:u.length},{name:"signs",type:"i32",length:a.length},{name:"steps",type:"u32",length:s.length}],_=[{type:"uint32",data:w},{type:"uint32",data:u},{type:"int32",data:a},{type:"uint32",data:s},...L(e[0].dims),...L(p)],I=$=>`\n      ${$.registerUniforms(y).declareVariables(b,g)}\n        ${xc(b,g,r)}\n        ${$.mainStart()}\n          ${$.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n          let output_indices = ${g.offsetToIndices("global_idx")};\n          let input_indices = calculateInputIndices(output_indices);\n          ${g.setByOffset("global_idx",b.getByIndices("input_indices"))}\n      }`;return{name:"Slice",shaderCache:{hint:`${a.length}_${u.length}_${s.length}`,inputDependencies:["rank"]},getShaderSource:I,getRunData:()=>({outputs:[h],dispatchGroup:{x:Math.ceil(o/64)},programUniforms:_})}},nu=(e,t)=>{$c(e.inputs,t);let r=Sc(e.inputs,t);e.compute(_c(e.inputs,r),{inputs:[0]})},ou=e=>{let t=e.starts,r=e.ends,o=e.axes;return ge({starts:t,ends:r,axes:o})}});var Cc,Ic,iu,su,uu=j(()=>{"use strict";$e();je();ve();Cc=e=>{if(!e||e.length!==1)throw new Error("Softmax op requires 1 input.")},Ic=(e,t)=>{let r=e.dims,o=U.size(r),n=64,s=t.axis;if(s<0&&(s=r.length+s),s<r.length-1)throw new Error("softmax only supports last axis for now.");let u=r[s],l=o/u,a=Fe(u),p=u/a,h=(I,$)=>$===4?`max(max(${I}.x, ${I}.y), max(${I}.z, ${I}.w))`:$===2?`max(${I}.x, ${I}.y)`:$===3?`max(max(${I}.x, ${I}.y), ${I}.z)`:I,g=M("x",e.dataType,e.dims,a),b=F("result",e.dataType,e.dims,a),w=g.type.value,y=Le(e.dataType)==="f32"?`var threadMax = ${w}(-3.402823e+38f);`:`var threadMax = ${w}(-65504.0h);`,_=I=>`\n      var<workgroup> rowMaxShared : ${w};\n      var<workgroup> rowSumShared : ${w};\n      var<workgroup> threadShared : array<${w}, ${n}>;\n\n      fn getValue(row: i32, col: i32, row_stride: i32) -> ${w} {\n        let index = row * row_stride + col;\n        return x[index];\n      }\n\n      fn setValue(row: i32, col: i32, row_stride: i32, value: ${w}) {\n        let index = row * row_stride + col;\n        result[index] = value;\n      }\n      ${I.registerUniform("packedCols","i32").declareVariables(g,b)}\n      ${I.mainStart()}\n        let gindex = i32(global_idx);\n        let lindex = i32(local_idx);\n        const wg = ${n};\n        let row = gindex / wg;\n        let cols = uniforms.packedCols;\n        let row_stride : i32 = uniforms.packedCols;\n\n        // find the rows max\n        ${y}\n        for (var col = lindex; col < cols; col += wg) {\n          let value = getValue(row, col, row_stride);\n          threadMax = max(threadMax, value);\n        }\n        if (lindex < cols) {\n          threadShared[lindex] = threadMax;\n        }\n        workgroupBarrier();\n\n        var reduceSize = min(cols, wg);\n        for (var currSize = reduceSize >> 1;  currSize > 0; currSize = reduceSize >> 1) {\n          reduceSize = currSize + (reduceSize & 1);\n          if (lindex < currSize) {\n            threadShared[lindex] = max(threadShared[lindex], threadShared[lindex + reduceSize]);\n          }\n          workgroupBarrier();\n        }\n        if (lindex == 0) {\n          rowMaxShared = ${w}(${h("threadShared[0]",a)});\n        }\n        workgroupBarrier();\n\n        // find the rows sum\n        var threadSum = ${w}(0.0);\n        for (var col = lindex; col < cols; col += wg) {\n          let subExp = exp(getValue(row, col, row_stride) - rowMaxShared);\n          threadSum += subExp;\n        }\n        threadShared[lindex] = threadSum;\n        workgroupBarrier();\n\n        for (var currSize = wg >> 1;  currSize > 0; currSize = currSize >> 1) {\n          if (lindex < currSize) {\n            threadShared[lindex] = threadShared[lindex] + threadShared[lindex + currSize];\n          }\n          workgroupBarrier();\n        }\n        if (lindex == 0) {\n          rowSumShared = ${w}(${Je("threadShared[0]",a)});\n        }\n        workgroupBarrier();\n\n        // calculate final value for each element in the row\n        for (var col = lindex; col < cols; col += wg) {\n          let value = exp(getValue(row, col, row_stride) - rowMaxShared) / rowSumShared;\n          setValue(row, col, row_stride, value);\n        }\n      }`;return{name:"Softmax",shaderCache:{hint:`${a}`,inputDependencies:["type"]},getRunData:()=>({outputs:[{dims:r,dataType:e.dataType}],dispatchGroup:{x:l},programUniforms:[{type:"uint32",data:p}]}),getShaderSource:_}},iu=(e,t)=>{Cc(e.inputs),e.compute(Ic(e.inputs[0],t))},su=e=>ge({axis:e.axis})});var Ac,Tc,Ec,Oc,Pc,du,lu,cu=j(()=>{"use strict";$e();je();ve();Ac=e=>{if(!e||e.length<1)throw new Error("too few inputs")},Tc=(e,t)=>{let r=[],o=t.numOutputs;return e[1].dims[0]>0&&(e[1].getBigInt64Array().forEach(n=>r.push(Number(n))),o=r.length),ge({numOutputs:o,axis:t.axis,splitSizes:r})},Ec=e=>`\nfn calculateOutputIndex(index: u32) -> u32 {\n    for (var i: u32 = 0u; i < ${e}u; i += 1u ) {\n    if (index < ${ce("uniforms.size_in_split_axis","i",e)}) {\n        return i;\n    }\n    }\n    return ${e}u;\n}`,Oc=e=>{let t=e.length,r=[];for(let o=0;o<t;++o){let n=e[o].setByIndices("indices","input[global_idx]");t===1?r.push(n):o===0?r.push(`if (output_number == ${o}u) { ${n} }`):o===t-1?r.push(`else { ${n} }`):r.push(`else if (output_number == ${o}) { ${n} }`)}return`\n      fn writeBufferData(output_number: u32, indices: ${e[0].type.indices}, global_idx: u32) {\n        ${r.join(`\n`)}\n      }`},Pc=(e,t)=>{let r=e[0].dims,o=U.size(r),n=e[0].dataType,s=U.normalizeAxis(t.axis,r.length),u=new Array(t.numOutputs),l=M("input",n,r),a=new Array(t.numOutputs),p=[],h=[],g=0,b=[{type:"uint32",data:o}];for(let y=0;y<t.numOutputs;y++){g+=t.splitSizes[y],a[y]=g;let _=r.slice();_[t.axis]=t.splitSizes[y],h.push(_),u[y]=F(`output${y}`,n,_),p.push({dims:h[y],dataType:e[0].dataType})}b.push({type:"uint32",data:a}),b.push(...L(r)),h.forEach(y=>b.push(...L(y)));let w=y=>`\n  ${y.registerUniform("input_size","u32").registerUniform("size_in_split_axis","u32",a.length).declareVariables(l,...u)}\n  ${Ec(a.length)}\n  ${Oc(u)}\n\n  ${y.mainStart()}\n    ${y.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.input_size")}\n\n    var indices = ${l.offsetToIndices("global_idx")};\n    var index = ${l.indicesGet("indices",s)};\n    let output_number = calculateOutputIndex(index);\n    if (output_number != 0) {\n      index -= ${ce("uniforms.size_in_split_axis","output_number - 1u",a.length)};\n      ${l.indicesSet("indices",s,"index")};\n    }\n    writeBufferData(output_number, indices, global_idx);\n  }`;return{name:"Split",shaderCache:{hint:t.cacheKey,inputDependencies:["rank"]},getShaderSource:w,getRunData:()=>({outputs:p,dispatchGroup:{x:Math.ceil(o/64)},programUniforms:b})}},du=(e,t)=>{Ac(e.inputs);let r=e.inputs.length===1?t:Tc(e.inputs,t);e.compute(Pc(e.inputs,r),{inputs:[0]})},lu=e=>{let t=e.axis,r=e.splitSizes,o=e.numOutputs<0?r.length:e.numOutputs;if(o!==r.length)throw new Error("numOutputs and splitSizes lengh must be equal");return ge({axis:t,numOutputs:o,splitSizes:r})}});var pu,kc,Rc,Bc,mu,fu=j(()=>{"use strict";Ne();$e();ve();pu=e=>Array.from(e.getBigInt64Array(),Number),kc=e=>{if(!e||e.length!==2)throw new Error("Tile requires 2 inputs.");if(e[0].dataType!==1&&e[0].dataType!==6&&e[0].dataType!==12)throw new Error("Tile only support float, int32, and uint32 data types");if(e[1].dataType!==7)throw new Error("Tile `repeats` input should be of int64 data type");if(e[1].dims.length!==1)throw new Error("Tile `repeats` input should be 1-D");if(pu(e[1]).length!==e[0].dims.length)throw new Error("Tile `repeats` input should have same number of elements as rank of input data tensor")},Rc=(e,t)=>{let r=[];for(let o=0;o<e.length;++o)r.push(e[o]*t[o]);return r},Bc=e=>{let t=e[0].dims,r=pu(e[1]),o=Rc(t,r),n=U.size(o),s=e[0].dataType,u=M("input",s,t.length),l=F("output",s,o.length),a=p=>`\n      const inputShape = ${u.indices(...t)};\n      ${p.registerUniform("output_size","u32").declareVariables(u,l)}\n      ${p.mainStart()}\n      ${p.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n      let output_indices = ${l.offsetToIndices("global_idx")};\n      var input_indices: ${u.type.indices};\n      for (var i = 0; i < ${t.length}; i++) {\n        let input_dim_i = ${u.indicesGet("uniforms.input_shape","i")};\n        let input_dim_value = ${l.indicesGet("output_indices","i")}  % input_dim_i;\n\n        ${u.indicesSet("input_indices","i","input_dim_value")}\n      }\n      ${l.setByOffset("global_idx",u.getByIndices("input_indices"))}\n    }`;return{name:"Tile",shaderCache:{hint:`${r}`,inputDependencies:["rank"]},getRunData:()=>({outputs:[{dims:o,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(n/64)},programUniforms:[{type:"uint32",data:n},...L(e[0].dims),...L(o)]}),getShaderSource:a}},mu=e=>{kc(e.inputs),e.compute(Bc(e.inputs),{inputs:[0]})}});var Dc,Mc,hu,gu=j(()=>{"use strict";Ne();$e();ve();Dc=(e,t,r,o,n)=>{let s=F("output_data",n,r.length,4),u=M("a_data",t[1].dataType,t[1].dims.length,4),l=M("b_data",t[2].dataType,t[2].dims.length,4),a=M("c_data",t[0].dataType,t[0].dims.length,4),p,h=(g,b,w)=>`select(${b}, ${g}, ${w})`;if(!o)p=s.setByOffset("global_idx",h(u.getByOffset("global_idx"),l.getByOffset("global_idx"),a.getByOffset("global_idx")));else{let g=(b,w,y="")=>{let _=`a_data[index_a${w}][component_a${w}]`,I=`b_data[index_b${w}][component_b${w}]`,$=`bool(c_data[index_c${w}] & ${4278190080>>>(3-w)*8}u)`;return`\n            let output_indices${w} = ${s.offsetToIndices(`global_idx * 4u + ${w}u`)};\n            let offset_a${w} = ${u.broadcastedIndicesToOffset(`output_indices${w}`,s)};\n            let offset_b${w} = ${l.broadcastedIndicesToOffset(`output_indices${w}`,s)};\n            let offset_c${w} = ${a.broadcastedIndicesToOffset(`output_indices${w}`,s)};\n            let index_a${w} = offset_a${w} / 4u;\n            let index_b${w} = offset_b${w} / 4u;\n            let index_c${w} = offset_c${w} / 4u;\n            let component_a${w} = offset_a${w} % 4u;\n            let component_b${w} = offset_b${w} % 4u;\n            ${b}[${w}] = ${y}(${h(_,I,$)});\n          `};n===9?p=`\n            var data = vec4<u32>(0);\n            ${g("data",0,"u32")}\n            ${g("data",1,"u32")}\n            ${g("data",2,"u32")}\n            ${g("data",3,"u32")}\n            output_data[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));`:p=`\n            ${g("output_data[global_idx]",0)}\n            ${g("output_data[global_idx]",1)}\n            ${g("output_data[global_idx]",2)}\n            ${g("output_data[global_idx]",3)}\n          `}return`\n        ${e.registerUniform("vec_size","u32").declareVariables(a,u,l,s)}\n        ${e.mainStart()}\n        ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}\n        ${p}\n      }`},Mc=e=>{let t=e[1].dims,r=e[2].dims,o=e[0].dims,n=e[1].dataType,s=!(U.areEqual(t,r)&&U.areEqual(r,o)),u=t,l=U.size(t);if(s){let p=dt.calcShape(dt.calcShape(t,r,!1),o,!1);if(!p)throw new Error("Can\'t perform where op on the given tensors");u=p,l=U.size(u)}let a=Math.ceil(l/4);return{name:"Where",shaderCache:{inputDependencies:["rank","rank","rank"]},getShaderSource:p=>Dc(p,e,u,s,n),getRunData:()=>({outputs:[{dims:u,dataType:n}],dispatchGroup:{x:Math.ceil(l/64/4)},programUniforms:[{type:"uint32",data:a},...L(o),...L(t),...L(r),...L(u)]})}},hu=e=>{e.compute(Mc(e.inputs))}});var yu,bu=j(()=>{"use strict";Wa();Un();La();ja();Ci();Mi();Vi();Gn();Ji();rs();ss();ls();ms();gs();ws();$s();xs();Fn();As();Es();js();Ks();jr();Xs();tu();au();uu();cu();fu();jt();Vn();gu();yu=new Map([["Abs",[qa]],["Acos",[Ka]],["Acosh",[Ya]],["Add",[Ii]],["ArgMax",[Na,zn]],["ArgMin",[Va,zn]],["Asin",[Za]],["Asinh",[Qa]],["Atan",[Xa]],["Atanh",[Ja]],["Attention",[Ha]],["AveragePool",[zs,Ms]],["BatchNormalization",[Ga]],["BiasAdd",[Fa]],["BiasSplitGelu",[_i]],["Cast",[ti,ei]],["Ceil",[ni]],["Clip",[ri]],["Concat",[zi,Ui]],["Conv",[qn,jn]],["ConvTranspose",[Xi,Qi]],["Cos",[oi]],["Cosh",[ai]],["CumSum",[es,ts]],["Div",[Ai]],["Einsum",[as,is]],["Elu",[ii,Yr]],["Equal",[Ti]],["Erf",[si]],["Exp",[ui]],["Expand",[ds]],["Floor",[di]],["FusedConv",[qn,jn]],["Gather",[ps,cs]],["GatherElements",[hs,fs]],["Gelu",[li]],["Gemm",[bs,ys]],["GlobalAveragePool",[Ns,Vs]],["GlobalMaxPool",[Fs,Ls]],["Greater",[ki]],["GreaterOrEqual",[Bi]],["InstanceNormalization",[vs]],["LayerNormalization",[Ss]],["LeakyRelu",[ci,Yr]],["Less",[Ri]],["LessOrEqual",[Di]],["Log",[xi]],["MatMul",[Li]],["MaxPool",[Hs,Gs]],["Mul",[Ei]],["MultiHeadAttention",[Is,Cs]],["Neg",[mi]],["Not",[pi]],["Pad",[Ts]],["Pow",[Oi]],["Range",[qs]],["Reciprocal",[fi]],["ReduceMin",[Ra]],["ReduceMean",[Ta]],["ReduceMax",[ka]],["ReduceSum",[Da]],["ReduceProd",[Ba]],["ReduceL1",[Ea]],["ReduceL2",[Oa]],["ReduceLogSum",[za]],["ReduceLogSumExp",[Pa]],["ReduceSumSquare",[Ma]],["Relu",[hi]],["Resize",[Zs,Qs]],["Sigmoid",[gi]],["Sin",[yi]],["Sinh",[bi]],["Slice",[nu,ou]],["SkipLayerNormalization",[Js,eu]],["Split",[du,lu]],["Sqrt",[wi]],["Softmax",[iu,su]],["Sub",[Pi]],["Tan",[vi]],["Tanh",[$i]],["ThresholdedRelu",[Si,Yr]],["Tile",[mu]],["Transpose",[ha,ga]],["Where",[hu]]])});var an,wu=j(()=>{"use strict";Lt();Ct();ve();an=class{constructor(t){this.backend=t;this.repo=new Map,this.attributesBound=!1}getArtifact(t){return this.repo.get(t)}setArtifact(t,r){this.repo.set(t,r)}run(t,r,o,n,s){kt(t.programInfo.name);let u=this.backend.device,l=this.backend.getComputePassEncoder();this.backend.writeTimestamp(this.backend.pendingDispatchNumber*2),l.setPipeline(t.computePipeline);let a=[];for(let h of r)a.push({binding:a.length,resource:{buffer:h.buffer}});for(let h of o)a.push({binding:a.length,resource:{buffer:h.buffer}});s&&a.push({binding:a.length,resource:s});let p=u.createBindGroup({layout:t.computePipeline.getBindGroupLayout(0),entries:a,label:t.programInfo.name});l.setBindGroup(0,p),l.dispatchWorkgroups(...n),this.backend.writeTimestamp(this.backend.pendingDispatchNumber*2+1),this.backend.pendingDispatchNumber++,(this.backend.pendingDispatchNumber>=this.backend.maxDispatchNumber||this.backend.queryType==="at-passes")&&this.backend.endComputePass(),this.backend.pendingDispatchNumber>=this.backend.maxDispatchNumber&&this.backend.flush(),Rt(t.programInfo.name)}dispose(){}build(t,r){kt(t.name);let o=this.backend.device,n=[];o.features.has("shader-f16")&&n.push("enable f16;");let s=ma(r),u=t.getShaderSource(s),l=`${n.join(`\n`)}\n${s.additionalImplementations}\n${u}`,a=o.createShaderModule({code:l,label:t.name});Be("verbose",()=>`[WebGPU] ${t.name} shader code: ${l}`);let p=o.createComputePipeline({compute:{module:a,entryPoint:"main"},layout:"auto",label:t.name});return Rt(t.name),{programInfo:t,computePipeline:p}}normalizeDispatchGroupSize(t){let r=typeof t=="number"?t:t.x,o=typeof t=="number"?1:t.y||1,n=typeof t=="number"?1:t.z||1,s=this.backend.device.limits.maxComputeWorkgroupsPerDimension;if(r<=s&&o<=s&&n<=s)return[r,o,n];let u=r*o*n,l=Math.ceil(Math.sqrt(u));if(l>s){if(l=Math.ceil(Math.cbrt(u)),l>s)throw new Error("Total dispatch size exceeds WebGPU maximum.");return[l,l,l]}else return[l,l,1]}}});var zc,Uc,sn,vu=j(()=>{"use strict";Lt();Ne();Ct();ua();pa();bu();wu();zc=(e,t)=>{if(t.length!==e.length)throw new Error(`inputDependencies length ${t.length} is not equal to inputTensors length ${e.length}.`);let r=[];for(let o=0;o<e.length;++o){let n=e[o].dataType;switch(t[o]){case"none":{r.push("");break}case"type":{r.push(`${n}`);break}case"rank":{let s=e[o].dims.length;r.push(`${n};${s}`);break}case"dims":{let s=e[o].dims.join(",");r.push(`${n};${s}`);break}default:throw new Error(`unsupported input dependency: ${t[o]}`)}}return r.join("|")},Uc=(e,t,r)=>{let o=e.name;return e.shaderCache?.hint&&(o+="["+e.shaderCache.hint+"]"),o+=":"+r+`:${zc(t,e.shaderCache?.inputDependencies??new Array(t.length).fill("dims"))}`,o},sn=class{constructor(){this.currentKernelId=null;this.commandEncoder=null;this.computePassEncoder=null;this.maxDispatchNumber=16;this.pendingDispatchNumber=0;this.pendingKernels=[];this.pendingQueries=new Map;this.sessionExternalDataMapping=new Map}get currentKernelCustomData(){if(this.currentKernelId===null)throw new Error("currentKernelCustomData(): currentKernelId is null. (should not happen)");let t=this.kernelCustomData.get(this.currentKernelId);return t||(t={},this.kernelCustomData.set(this.currentKernelId,t)),t}async initialize(t,r){this.env=t;let o=[],n={requiredLimits:{maxComputeWorkgroupStorageSize:r.limits.maxComputeWorkgroupStorageSize,maxComputeWorkgroupsPerDimension:r.limits.maxComputeWorkgroupsPerDimension,maxStorageBufferBindingSize:r.limits.maxStorageBufferBindingSize,maxBufferSize:r.limits.maxBufferSize,maxComputeInvocationsPerWorkgroup:r.limits.maxComputeInvocationsPerWorkgroup,maxComputeWorkgroupSizeX:r.limits.maxComputeWorkgroupSizeX,maxComputeWorkgroupSizeY:r.limits.maxComputeWorkgroupSizeY,maxComputeWorkgroupSizeZ:r.limits.maxComputeWorkgroupSizeZ},requiredFeatures:o};r.features.has("chromium-experimental-timestamp-query-inside-passes")?o.push("chromium-experimental-timestamp-query-inside-passes"):r.features.has("timestamp-query")&&o.push("timestamp-query"),r.features.has("shader-f16")&&o.push("shader-f16"),this.device=await r.requestDevice(n),this.gpuDataManager=ca(this),this.programManager=new an(this),this.kernels=new Map,this.kernelPersistentData=new Map,this.kernelCustomData=new Map,ia(t.logLevel,!!t.debug),this.device.onuncapturederror=s=>{s.error instanceof GPUValidationError&&console.error(`An uncaught WebGPU validation error was raised: ${s.error.message}`)},Object.defineProperty(this.env.webgpu,"device",{value:this.device}),this.setQueryType()}dispose(){typeof this.querySet<"u"&&this.querySet.destroy(),this.gpuDataManager.dispose()}getCommandEncoder(){return this.commandEncoder||(this.commandEncoder=this.device.createCommandEncoder(),this.setQueryType(),this.queryType!=="none"&&typeof this.querySet>"u"&&(this.querySet=this.device.createQuerySet({type:"timestamp",count:this.maxDispatchNumber*2}),this.queryResolveBuffer=this.device.createBuffer({size:this.maxDispatchNumber*2*8,usage:GPUBufferUsage.COPY_SRC|GPUBufferUsage.QUERY_RESOLVE}))),this.commandEncoder}getComputePassEncoder(){if(!this.computePassEncoder){let t={};this.queryType==="at-passes"&&(t.timestampWrites={querySet:this.querySet,beginningOfPassWriteIndex:this.pendingDispatchNumber*2,endOfPassWriteIndex:this.pendingDispatchNumber*2+1}),this.computePassEncoder=this.getCommandEncoder().beginComputePass(t)}return this.computePassEncoder}endComputePass(){this.computePassEncoder&&(this.computePassEncoder.end(),this.computePassEncoder=null)}flush(){if(!this.commandEncoder)return;kt(),this.endComputePass();let t;this.queryType!=="none"&&(this.commandEncoder.resolveQuerySet(this.querySet,0,this.pendingDispatchNumber*2,this.queryResolveBuffer,0),t=this.device.createBuffer({size:this.pendingDispatchNumber*2*8,usage:GPUBufferUsage.MAP_READ|GPUBufferUsage.COPY_DST}),this.pendingQueries.set(t,this.pendingKernels),this.pendingKernels=[],this.commandEncoder.copyBufferToBuffer(this.queryResolveBuffer,0,t,0,this.pendingDispatchNumber*2*8)),this.device.queue.submit([this.commandEncoder.finish()]),this.gpuDataManager.refreshPendingBuffers(),this.commandEncoder=null,this.pendingDispatchNumber=0,this.queryType!=="none"&&t.mapAsync(GPUMapMode.READ).then(()=>{let r=new BigUint64Array(t.getMappedRange()),o=this.pendingQueries.get(t);for(let n=0;n<r.length/2;n++){let s=o[n],u=s.kernelId,l=this.kernels.get(u),a=l.kernelType,p=l.kernelName,h=s.programName,g=s.inputTensorViews,b=s.outputTensorViews,w=r[n*2],y=r[n*2+1];typeof this.queryTimeBase>"u"&&(this.queryTimeBase=w);let _=Number(w-this.queryTimeBase),I=Number(y-this.queryTimeBase);if(!Number.isSafeInteger(_)||!Number.isSafeInteger(I))throw new RangeError("incorrect timestamp range");if(this.env.webgpu.profiling?.ondata)this.env.webgpu.profiling.ondata({version:1,inputsMetadata:g.map($=>({dims:$.dims,dataType:Xe($.dataType)})),outputsMetadata:b.map($=>({dims:$.dims,dataType:Xe($.dataType)})),kernelId:u,kernelType:a,kernelName:p,programName:h,startTime:_,endTime:I});else{let $="";g.forEach((E,A)=>{$+=`input[${A}]: [${E.dims}] | ${Xe(E.dataType)}, `});let x="";b.forEach((E,A)=>{x+=`output[${A}]: [${E.dims}] | ${Xe(E.dataType)}, `}),console.log(`[profiling] kernel "${u}|${a}|${p}|${h}" ${$}${x}execution time: ${I-_} ns`)}An("GPU",`${h}::${w}::${y}`)}t.unmap(),this.pendingQueries.delete(t)}),Rt()}run(t,r,o,n,s){kt(t.name);let u=[];for(let x=0;x<r.length;++x){let E=this.gpuDataManager.get(r[x].data);if(!E)throw new Error(`no GPU data for input: ${r[x].data}`);u[x]=E}let{outputs:l,dispatchGroup:a,programUniforms:p}=t.getRunData(r),h=o.length===0?l.map((x,E)=>E):o;if(h.length!==l.length)throw new Error(`Output size ${h.length} must be equal to ${l.length}.`);let g=[],b=[];for(let x=0;x<l.length;++x){if(!Number.isInteger(h[x])||h[x]<-3||h[x]>=l.length)throw new Error(`Invalid output index: ${h[x]}`);if(h[x]===-3)continue;let E=h[x]===-1,A=h[x]===-2,z=E||A?s(l[x].dataType,l[x].dims):n(h[x],l[x].dataType,l[x].dims),R=this.gpuDataManager.get(z.data);if(!R)throw new Error(`no GPU data for output: ${z.data}`);if(E&&this.temporaryData.push(R),A){let V=this.kernelPersistentData.get(this.currentKernelId);V||(V=[],this.kernelPersistentData.set(this.currentKernelId,V)),V.push(R)}g.push(z),b.push(R)}let w;if(p){let x=0,E=[];p.forEach(V=>{let T=typeof V.data=="number"?[V.data]:V.data;if(T.length===0)return;let N=T.length<=2?T.length*4:16;x=Math.ceil(x/N)*N,E.push(x),x+=T.length>4?Math.ceil(T.length/4)*16:T.length*4});let A=16;x=Math.ceil(x/A)*A;let z=new ArrayBuffer(x);p.forEach((V,T)=>{let N=E[T],te=typeof V.data=="number"?[V.data]:V.data;V.type==="int32"?new Int32Array(z,N,te.length).set(te):V.type==="uint32"?new Uint32Array(z,N,te.length).set(te):new Float32Array(z,N,te.length).set(te)});let R=this.gpuDataManager.create(x,GPUBufferUsage.COPY_DST|GPUBufferUsage.UNIFORM);this.device.queue.writeBuffer(R.buffer,0,z,0,x),this.gpuDataManager.release(R.id),w={offset:0,size:x,buffer:R.buffer}}let y=this.programManager.normalizeDispatchGroupSize(a),_=y[1]===1&&y[2]===1,I=Uc(t,r,_),$=this.programManager.getArtifact(I);if($||($=this.programManager.build(t,y),this.programManager.setArtifact(I,$),Be("info",()=>`[artifact] key: ${I}, programName: ${t.name}`)),Be("info",()=>`[ProgramManager] run "${t.name}" (key=${I}) with ${y[0]}x${y[1]}x${y[2]}`),this.queryType!=="none"){let x={kernelId:this.currentKernelId,programName:$.programInfo.name,inputTensorViews:r,outputTensorViews:g};this.pendingKernels.push(x)}return this.programManager.run($,u,b,y,w),Rt(t.name),g}upload(t,r){this.gpuDataManager.upload(t,r)}memcpy(t,r){this.gpuDataManager.memcpy(t,r)}async download(t,r){await this.gpuDataManager.download(t,r)}alloc(t){return this.gpuDataManager.create(t).id}free(t){return this.gpuDataManager.release(t)}createKernel(t,r,o,n){let s=yu.get(t);if(!s)throw new Error(`kernel not implemented: ${t}`);let u={kernelType:t,kernelName:n,kernelEntry:s[0],attributes:[s[1],o]};this.kernels.set(r,u)}releaseKernel(t){let r=this.kernelPersistentData.get(t);if(r){for(let o of r)this.gpuDataManager.release(o.id);this.kernelPersistentData.delete(t)}this.kernelCustomData.delete(t),this.kernels.delete(t)}computeKernel(t,r,o){let n=this.kernels.get(t);if(!n)throw new Error(`kernel not created: ${t}`);let s=n.kernelType,u=n.kernelName,l=n.kernelEntry,a=n.attributes;if(this.currentKernelId!==null)throw new Error(`kernel "[${s}] ${u}" is not allowed to be called recursively`);this.currentKernelId=t,a[0]&&(a[1]=a[0](a[1]),a[0]=void 0),Be("info",()=>`[WebGPU] Start to run kernel "[${s}] ${u}"...`);let p=this.env.debug;this.temporaryData=[];try{return p&&this.device.pushErrorScope("validation"),l(r,a[1]),0}catch(h){return o.push(Promise.resolve(`[WebGPU] Kernel "[${s}] ${u}" failed. ${h}`)),1}finally{p&&o.push(this.device.popErrorScope().then(h=>h?`GPU validation error for kernel "[${s}] ${u}": ${h.message}`:null));for(let h of this.temporaryData)this.gpuDataManager.release(h.id);this.temporaryData=[],this.currentKernelId=null}}registerBuffer(t,r,o,n){let s=this.sessionExternalDataMapping.get(t);s||(s=new Map,this.sessionExternalDataMapping.set(t,s));let u=s.get(r),l=this.gpuDataManager.registerExternalBuffer(o,n,u?.[1]);return s.set(r,[l,o]),l}unregisterBuffers(t){let r=this.sessionExternalDataMapping.get(t);r&&(r.forEach(o=>this.gpuDataManager.unregisterExternalBuffer(o[1])),this.sessionExternalDataMapping.delete(t))}getBuffer(t){let r=this.gpuDataManager.get(t);if(!r)throw new Error(`no GPU data for buffer: ${t}`);return r.buffer}createDownloader(t,r,o){return async()=>{let n=await On(this,t,r);return sa(n.buffer,o)}}writeTimestamp(t){this.queryType==="inside-passes"&&this.computePassEncoder.writeTimestamp(this.querySet,t)}setQueryType(){this.queryType="none",(this.env.webgpu.profiling?.mode==="default"||this.env.wasm.trace)&&(this.device.features.has("chromium-experimental-timestamp-query-inside-passes")?this.queryType="inside-passes":this.device.features.has("timestamp-query")&&(this.queryType="at-passes"))}}});var $u={};Br($u,{init:()=>Vc});var gr,Jn,Vc,Su=j(()=>{"use strict";Ne();vu();Ct();$e();gr=class e{constructor(t,r,o,n){this.module=t;this.dataType=r;this.data=o;this.dims=n}getFloat32Array(){if(this.dataType!==1)throw new Error("Invalid data type");let t=U.size(this.dims);return t===0?new Float32Array:new Float32Array(this.module.HEAP8.buffer,this.data,t)}getBigInt64Array(){if(this.dataType!==7)throw new Error("Invalid data type");let t=U.size(this.dims);return t===0?new BigInt64Array:new BigInt64Array(this.module.HEAP8.buffer,this.data,t)}getInt32Array(){if(this.dataType!==6)throw new Error("Invalid data type");let t=U.size(this.dims);return t===0?new Int32Array:new Int32Array(this.module.HEAP8.buffer,this.data,t)}reshape(t){if(U.size(t)!==U.size(this.dims))throw new Error("Invalid new shape");return new e(this.module,this.dataType,this.data,t)}},Jn=class{constructor(t,r,o){this.module=t;this.backend=r;this.customDataOffset=0;this.customDataSize=0;let n=t.HEAPU32,s=o>>>2;this.opKernelContext=n[s++];let u=n[s++];this.outputCount=n[s++],this.customDataOffset=n[s++],this.customDataSize=n[s++];let l=[];for(let a=0;a<u;a++){let p=n[s++],h=n[s++],g=n[s++],b=[];for(let w=0;w<g;w++)b.push(n[s++]);l.push(new gr(t,p,h,b))}this.inputs=l}get kernelCustomData(){return this.backend.currentKernelCustomData}get customDataBuffer(){return this.module.HEAPU8.subarray(this.customDataOffset,this.customDataOffset+this.customDataSize)}compute(t,r){let o=r?.inputs?.map(l=>typeof l=="number"?this.inputs[l]:l)??this.inputs,n=r?.outputs??[],s=(l,a,p)=>new gr(this.module,a,this.output(l,p),p),u=(l,a)=>{let p=cr(l);if(!p)throw new Error(`Unsupported data type: ${l}`);let h=p*U.size(a);return new gr(this.module,l,this.backend.gpuDataManager.create(h).id,a)};return this.backend.run(t,o,n,s,u)}output(t,r){let o=this.module.stackSave();try{let n=this.module.stackAlloc((1+r.length)*4),s=n>>2;this.module.HEAPU32[s++]=r.length;for(let u=0;u<r.length;u++)this.module.HEAPU32[s++]=r[u];return this.module._JsepOutput(this.opKernelContext,t,n)}catch(n){throw new Error(`Failed to generate kernel\'s output[${t}] with dims [${r}]. If you are running with pre-allocated output, please make sure the output type/dims are correct. Error: ${n}`)}finally{this.module.stackRestore(o)}}},Vc=async(e,t,r)=>{let o=e.jsepInit;if(!o)throw new Error("Failed to initialize JSEP. The WebAssembly module is not built with JSEP support.");let n=new sn;await n.initialize(t,r),o(n,s=>n.alloc(s),s=>n.free(s),(s,u,l,a=!1)=>{if(a)Be("verbose",()=>`[WebGPU] jsepCopyGpuToGpu: src=${s}, dst=${u}, size=${l}`),n.memcpy(s,u);else{Be("verbose",()=>`[WebGPU] jsepCopyCpuToGpu: dataOffset=${s}, gpuDataId=${u}, size=${l}`);let p=e.HEAPU8.subarray(s>>>0,(s>>>0)+l);n.upload(u,p)}},async(s,u,l)=>{Be("verbose",()=>`[WebGPU] jsepCopyGpuToCpu: gpuDataId=${s}, dataOffset=${u}, size=${l}`),await n.download(s,()=>e.HEAPU8.subarray(u>>>0,(u>>>0)+l))},(s,u,l)=>n.createKernel(s,u,l,e.UTF8ToString(e._JsepGetNodeName(u))),s=>n.releaseKernel(s),(s,u,l,a)=>{Be("verbose",()=>`[WebGPU] jsepRun: sessionHandle=${l}, kernel=${s}, contextDataOffset=${u}`);let p=new Jn(e,n,u);return n.computeKernel(s,p,a)})}});var Mo;Mo=Io();var Ju=Ro(),Sn,xn=!1,Dr=!1,Do=!1,ed=e=>{if(e===1)return!1;if(typeof SharedArrayBuffer>"u")return typeof self<"u"&&!self.crossOriginIsolated&&console.warn("env.wasm.numThreads is set to "+e+", but this will not work unless you enable crossOriginIsolated mode. See https://web.dev/cross-origin-isolation-guide/ for more info."),!1;typeof process<"u"&&process.versions&&process.versions.node&&console.warn("env.wasm.numThreads is set to "+e+", however, currently onnxruntime-web does not support multi-threads in Node.js. Please consider using onnxruntime-node for performance critical scenarios.");try{return typeof MessageChannel<"u"&&new MessageChannel().port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11]))}catch{return!1}},td=()=>{try{return WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,30,1,28,0,65,0,253,15,253,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,186,1,26,11]))}catch{return!1}},rd=(e,t)=>e?t?"ort-wasm-simd-threaded.wasm":"ort-wasm-simd.wasm":t?"ort-wasm-threaded.wasm":"ort-wasm.wasm",zo=async e=>{if(xn)return Promise.resolve();if(Dr)throw new Error("multiple calls to \'initializeWebAssembly()\' detected.");if(Do)throw new Error("previous call to \'initializeWebAssembly()\' failed.");Dr=!0;let t=e.initTimeout,r=e.numThreads,o=e.simd,n=ed(r),s=o&&td(),u=e.wasmPaths,l=typeof u=="string"?u:void 0,a=rd(s,n),p=typeof u=="object"?u[a]:void 0,h=!1,g=[];if(t>0&&g.push(new Promise(b=>{setTimeout(()=>{h=!0,b()},t)})),g.push(new Promise((b,w)=>{let y=n?Ju:Mo,_={locateFile:(I,$)=>{if(n&&I.endsWith(".worker.js")&&typeof Blob<"u")return URL.createObjectURL(new Blob([Bo()],{type:"text/javascript"}));if(I.endsWith(".wasm")){if(p)return p;let x=l??$;return a==="ort-wasm-simd.wasm"?x+"ort-wasm-simd.jsep.wasm":a==="ort-wasm-simd-threaded.wasm"?x+"ort-wasm-simd-threaded.jsep.wasm":x+a}return $+I}};if(n)if(_.numThreads=r,typeof Blob>"u")_.mainScriptUrlOrBlob=(void 0)(__dirname,"ort-wasm-threaded.js");else{let I=`var ortWasmThreaded=${y.toString()};`;_.mainScriptUrlOrBlob=new Blob([I],{type:"text/javascript"})}y(_).then(I=>{Dr=!1,xn=!0,Sn=I,b()},I=>{Dr=!1,Do=!0,w(I)})})),await Promise.race(g),h)throw new Error(`WebAssembly backend initializing failed due to timeout: ${t}ms`)},Ve=()=>{if(xn&&Sn)return Sn;throw new Error("WebAssembly is not initialized yet.")};var He=(e,t)=>{let r=Ve(),o=r.lengthBytesUTF8(e)+1,n=r._malloc(o);return r.stringToUTF8(e,n,o),t.push(n),n},lr=(e,t,r,o)=>{if(typeof e=="object"&&e!==null){if(r.has(e))throw new Error("Circular reference in options");r.add(e)}Object.entries(e).forEach(([n,s])=>{let u=t?t+n:n;if(typeof s=="object")lr(s,u+".",r,o);else if(typeof s=="string"||typeof s=="number")o(u,s.toString());else if(typeof s=="boolean")o(u,s?"1":"0");else throw new Error(`Can\'t handle extra config type: ${typeof s}`)})},ke=e=>{let t=Ve(),r=t.stackSave();try{let o=t.stackAlloc(8);t._OrtGetLastError(o,o+4);let n=t.HEAP32[o/4],s=t.HEAPU32[o/4+1],u=s?t.UTF8ToString(s):"";throw new Error(`${e} ERROR_CODE: ${n}, ERROR_MESSAGE: ${u}`)}finally{t.stackRestore(r)}};var Uo=e=>{let t=Ve(),r=0,o=[],n=e||{};try{if(e?.logSeverityLevel===void 0)n.logSeverityLevel=2;else if(typeof e.logSeverityLevel!="number"||!Number.isInteger(e.logSeverityLevel)||e.logSeverityLevel<0||e.logSeverityLevel>4)throw new Error(`log serverity level is not valid: ${e.logSeverityLevel}`);if(e?.logVerbosityLevel===void 0)n.logVerbosityLevel=0;else if(typeof e.logVerbosityLevel!="number"||!Number.isInteger(e.logVerbosityLevel))throw new Error(`log verbosity level is not valid: ${e.logVerbosityLevel}`);e?.terminate===void 0&&(n.terminate=!1);let s=0;return e?.tag!==void 0&&(s=He(e.tag,o)),r=t._OrtCreateRunOptions(n.logSeverityLevel,n.logVerbosityLevel,!!n.terminate,s),r===0&&ke("Can\'t create run options."),e?.extra!==void 0&&lr(e.extra,"",new WeakSet,(u,l)=>{let a=He(u,o),p=He(l,o);t._OrtAddRunConfigEntry(r,a,p)!==0&&ke(`Can\'t set a run config entry: ${u} - ${l}.`)}),[r,o]}catch(s){throw r!==0&&t._OrtReleaseRunOptions(r),o.forEach(u=>t._free(u)),s}};var nd=e=>{switch(e){case"disabled":return 0;case"basic":return 1;case"extended":return 2;case"all":return 99;default:throw new Error(`unsupported graph optimization level: ${e}`)}},od=e=>{switch(e){case"sequential":return 0;case"parallel":return 1;default:throw new Error(`unsupported execution mode: ${e}`)}},ad=e=>{e.extra||(e.extra={}),e.extra.session||(e.extra.session={});let t=e.extra.session;t.use_ort_model_bytes_directly||(t.use_ort_model_bytes_directly="1"),e.executionProviders&&e.executionProviders.some(r=>(typeof r=="string"?r:r.name)==="webgpu")&&(e.enableMemPattern=!1)},id=(e,t,r)=>{for(let o of t){let n=typeof o=="string"?o:o.name;switch(n){case"webnn":if(n="WEBNN",typeof o!="string"){let u=o;if(u?.deviceType){let l=He("deviceType",r),a=He(u.deviceType,r);Ve()._OrtAddSessionConfigEntry(e,l,a)!==0&&ke(`Can\'t set a session config entry: \'deviceType\' - ${u.deviceType}.`)}if(u?.numThreads){let l=u.numThreads;(typeof l!="number"||!Number.isInteger(l)||l<0)&&(l=0);let a=He("numThreads",r),p=He(l.toString(),r);Ve()._OrtAddSessionConfigEntry(e,a,p)!==0&&ke(`Can\'t set a session config entry: \'numThreads\' - ${u.numThreads}.`)}if(u?.powerPreference){let l=He("powerPreference",r),a=He(u.powerPreference,r);Ve()._OrtAddSessionConfigEntry(e,l,a)!==0&&ke(`Can\'t set a session config entry: \'powerPreference\' - ${u.powerPreference}.`)}}break;case"webgpu":if(n="JS",typeof o!="string"){let u=o;if(u?.preferredLayout){if(u.preferredLayout!=="NCHW"&&u.preferredLayout!=="NHWC")throw new Error(`preferredLayout must be either \'NCHW\' or \'NHWC\': ${u.preferredLayout}`);let l=He("preferredLayout",r),a=He(u.preferredLayout,r);Ve()._OrtAddSessionConfigEntry(e,l,a)!==0&&ke(`Can\'t set a session config entry: \'preferredLayout\' - ${u.preferredLayout}.`)}}break;case"wasm":case"cpu":continue;default:throw new Error(`not supported execution provider: ${n}`)}let s=He(n,r);Ve()._OrtAppendExecutionProvider(e,s)!==0&&ke(`Can\'t append execution provider: ${n}.`)}},Vo=e=>{let t=Ve(),r=0,o=[],n=e||{};ad(n);try{let s=nd(n.graphOptimizationLevel??"all"),u=od(n.executionMode??"sequential"),l=typeof n.logId=="string"?He(n.logId,o):0,a=n.logSeverityLevel??2;if(!Number.isInteger(a)||a<0||a>4)throw new Error(`log serverity level is not valid: ${a}`);let p=n.logVerbosityLevel??0;if(!Number.isInteger(p)||p<0||p>4)throw new Error(`log verbosity level is not valid: ${p}`);let h=typeof n.optimizedModelFilePath=="string"?He(n.optimizedModelFilePath,o):0;if(r=t._OrtCreateSessionOptions(s,!!n.enableCpuMemArena,!!n.enableMemPattern,u,!!n.enableProfiling,0,l,a,p,h),r===0&&ke("Can\'t create session options."),n.executionProviders&&id(r,n.executionProviders,o),n.freeDimensionOverrides)for(let[g,b]of Object.entries(n.freeDimensionOverrides)){if(typeof g!="string")throw new Error(`free dimension override name must be a string: ${g}`);if(typeof b!="number"||!Number.isInteger(b)||b<0)throw new Error(`free dimension override value must be a non-negative integer: ${b}`);let w=He(g,o);t._OrtAddFreeDimensionOverride(r,w,b)!==0&&ke(`Can\'t set a free dimension override: ${g} - ${b}.`)}return n.extra!==void 0&&lr(n.extra,"",new WeakSet,(g,b)=>{let w=He(g,o),y=He(b,o);t._OrtAddSessionConfigEntry(r,w,y)!==0&&ke(`Can\'t set a session config entry: ${g} - ${b}.`)}),[r,o]}catch(s){throw r!==0&&t._OrtReleaseSessionOptions(r),o.forEach(u=>t._free(u)),s}};Ne();var Wo=async e=>{if(typeof e=="string")if(typeof process<"u"&&process.versions&&process.versions.node)try{return new Uint8Array(await(void 0)(e))}catch(t){if(t.code==="ERR_FS_FILE_TOO_LARGE"){let r=(void 0)(e),o=[];for await(let n of r)o.push(n);return new Uint8Array(Buffer.concat(o))}throw t}else{let t=await fetch(e);if(!t.ok)throw new Error(`failed to load external data file: ${e}`);let r=t.headers.get("Content-Length"),o=r?parseInt(r,10):0;if(o<1073741824)return new Uint8Array(await t.arrayBuffer());{if(!t.body)throw new Error(`failed to load external data file: ${e}, no response body.`);let n=t.body.getReader(),s;try{s=new ArrayBuffer(o)}catch(l){if(l instanceof RangeError){let a=Math.ceil(o/65536);s=new WebAssembly.Memory({initial:a,maximum:a}).buffer}else throw l}let u=0;for(;;){let{done:l,value:a}=await n.read();if(l)break;let p=a.byteLength;new Uint8Array(s,u,p).set(a),u+=p}return new Uint8Array(s,0,o)}}else return e instanceof Blob?new Uint8Array(await e.arrayBuffer()):e instanceof Uint8Array?e:new Uint8Array(e)};var Nc=(e,t)=>{Ve()._OrtInit(e,t)!==0&&ke("Can\'t initialize onnxruntime.")},_u=async e=>{Nc(e.wasm.numThreads,pr(e.logLevel))},Cu=async(e,t)=>{if(t==="webgpu"){if(typeof navigator>"u"||!navigator.gpu)throw new Error("WebGPU is not supported in current environment");let r=await navigator.gpu.requestAdapter();if(!r)throw new Error(\'Failed to get GPU adapter. You may need to enable flag "--enable-unsafe-webgpu" if you are using Chrome.\');if(!e.wasm.simd)throw new Error("Not supported for WebGPU=ON and SIMD=OFF. Please set `env.wasm.simd` to true when using `webgpu` EP");let o=(Su(),Ht($u)).init;await o(Ve(),e,r)}},yr=new Map,Wc=e=>{let t=Ve(),r=t.stackSave();try{let o=t.stackAlloc(8);return t._OrtGetInputOutputCount(e,o,o+4)!==0&&ke("Can\'t get session input/output count."),[t.HEAP32[o/4],t.HEAP32[o/4+1]]}finally{t.stackRestore(r)}},eo=e=>{let t=Ve(),r=t._malloc(e.byteLength);if(r===0)throw new Error(`Can\'t create a session. failed to allocate a buffer of size ${e.byteLength}.`);return t.HEAPU8.set(e,r),[r,e.byteLength]},Iu=async(e,t)=>{let r,o,n=Ve();Array.isArray(e)?[r,o]=e:e.buffer===n.HEAPU8.buffer?[r,o]=[e.byteOffset,e.byteLength]:[r,o]=eo(e);let s=0,u=0,l=0,a=[],p=[],h=[];try{if([u,a]=Vo(t),t?.externalData&&n.mountExternalData){let $=[];for(let x of t.externalData){let E=typeof x=="string"?x:x.path;$.push(Wo(typeof x=="string"?x:x.data).then(A=>{n.mountExternalData(E,A)}))}await Promise.all($)}s=n._OrtCreateSession(r,o,u),s===0&&ke("Can\'t create a session.");let[g,b]=Wc(s),w=[],y=[],_=[];for(let $=0;$<g;$++){let x=n._OrtGetInputName(s,$);x===0&&ke("Can\'t get an input name."),p.push(x),w.push(n.UTF8ToString(x))}for(let $=0;$<b;$++){let x=n._OrtGetOutputName(s,$);x===0&&ke("Can\'t get an output name."),h.push(x);let E=n.UTF8ToString(x);y.push(E);{let A=typeof t?.preferredOutputLocation=="string"?t.preferredOutputLocation:t?.preferredOutputLocation?.[E]??"cpu";if(A!=="cpu"&&A!=="cpu-pinned"&&A!=="gpu-buffer")throw new Error(`Not supported preferred output location: ${A}.`);_.push(A)}}let I=null;return _.some($=>$==="gpu-buffer")&&(l=n._OrtCreateBinding(s),l===0&&ke("Can\'t create IO binding."),I={handle:l,outputPreferredLocations:_,outputPreferredLocationsEncoded:_.map($=>Cn($))}),yr.set(s,[s,p,h,I]),[s,w,y]}catch(g){throw p.forEach(b=>n._OrtFree(b)),h.forEach(b=>n._OrtFree(b)),l!==0&&n._OrtReleaseBinding(l),s!==0&&n._OrtReleaseSession(s),g}finally{n._free(r),u!==0&&n._OrtReleaseSessionOptions(u),a.forEach(g=>n._free(g)),n.unmountExternalData?.()}},Au=e=>{let t=Ve(),r=yr.get(e);if(!r)throw new Error(`cannot release session. invalid session id: ${e}`);let[o,n,s,u]=r;u&&t._OrtReleaseBinding(u.handle),t.jsepUnregisterBuffers?.(e),n.forEach(l=>t._OrtFree(l)),s.forEach(l=>t._OrtFree(l)),t._OrtReleaseSession(o),yr.delete(e)},xu=(e,t,r,o,n)=>{if(!e){t.push(0);return}let s=Ve(),u=e[0],l=e[1],a=e[3],p,h;if(u==="string"&&a==="gpu-buffer")throw new Error("String tensor is not supported on GPU.");if(a==="gpu-buffer"){let w=e[2].gpuBuffer,y=cr(_n(u));h=l.reduce((_,I)=>_*I,1)*y,p=s.jsepRegisterBuffer(o,n,w,h)}else{let w=e[2];if(Array.isArray(w)){h=4*w.length,p=s._malloc(h),r.push(p);let y=p/4;for(let _=0;_<w.length;_++){if(typeof w[_]!="string")throw new TypeError(`tensor data at index ${_} is not a string`);s.HEAPU32[y++]=He(w[_],r)}}else h=w.byteLength,p=s._malloc(h),r.push(p),s.HEAPU8.set(new Uint8Array(w.buffer,w.byteOffset,h),p)}let g=s.stackSave(),b=s.stackAlloc(4*l.length);try{let w=b/4;l.forEach(_=>s.HEAP32[w++]=_);let y=s._OrtCreateTensor(_n(u),p,h,b,l.length,Cn(a));y===0&&ke(`Can\'t create tensor for input/output. session=${o}, index=${n}.`),t.push(y)}finally{s.stackRestore(g)}},Tu=async(e,t,r,o,n,s)=>{let u=Ve(),l=yr.get(e);if(!l)throw new Error(`cannot run inference. invalid session id: ${e}`);let[a,p,h,g]=l,b=t.length,w=o.length,y=0,_=[],I=[],$=[],x=[],E=u.stackSave(),A=u.stackAlloc(b*4),z=u.stackAlloc(b*4),R=u.stackAlloc(w*4),V=u.stackAlloc(w*4);try{[y,_]=Uo(s);for(let Z=0;Z<b;Z++)xu(r[Z],I,x,e,t[Z]);for(let Z=0;Z<w;Z++)xu(n[Z],$,x,e,b+o[Z]);let T=A/4,N=z/4,te=R/4,Y=V/4;for(let Z=0;Z<b;Z++)u.HEAPU32[T++]=I[Z],u.HEAPU32[N++]=p[t[Z]];for(let Z=0;Z<w;Z++)u.HEAPU32[te++]=$[Z],u.HEAPU32[Y++]=h[o[Z]];if(g){let{handle:Z,outputPreferredLocations:Ee,outputPreferredLocationsEncoded:Pe}=g;if(p.length!==b)throw new Error(`input count from feeds (${b}) is expected to be always equal to model\'s input count (${p.length}).`);for(let fe=0;fe<b;fe++){let Ie=t[fe];await u._OrtBindInput(Z,p[Ie],I[fe])!==0&&ke(`Can\'t bind input[${fe}] for session=${e}.`)}for(let fe=0;fe<w;fe++){let Ie=o[fe];n[fe]?.[3]?u._OrtBindOutput(Z,h[Ie],$[fe],0)!==0&&ke(`Can\'t bind pre-allocated output[${fe}] for session=${e}.`):u._OrtBindOutput(Z,h[Ie],0,Pe[Ie])!==0&&ke(`Can\'t bind output[${fe}] to ${Ee[fe]} for session=${e}.`)}}let K;g?K=await u._OrtRunWithBinding(a,g.handle,w,R,y):K=await u._OrtRun(a,z,A,b,V,w,R,y),K!==0&&ke("failed to call OrtRun().");let Q=[];for(let Z=0;Z<w;Z++){let Ee=u.HEAPU32[R/4+Z];if(Ee===$[Z]){Q.push(n[Z]);continue}let Pe=u.stackSave(),fe=u.stackAlloc(4*4),Ie=!1,he,ye=0;try{u._OrtGetTensorData(Ee,fe,fe+4,fe+8,fe+12)!==0&&ke(`Can\'t access output tensor data on index ${Z}.`);let De=fe/4,Ge=u.HEAPU32[De++];ye=u.HEAPU32[De++];let G=u.HEAPU32[De++],ee=u.HEAPU32[De++],be=[];for(let Ue=0;Ue<ee;Ue++)be.push(u.HEAPU32[G/4+Ue]);u._OrtFree(G);let et=be.reduce((Ue,Me)=>Ue*Me,1);he=Xe(Ge);let ze=g?.outputPreferredLocations[o[Z]];if(he==="string"){if(ze==="gpu-buffer")throw new Error("String tensor is not supported on GPU.");let Ue=[],Me=ye/4;for(let wt=0;wt<et;wt++){let rt=u.HEAPU32[Me++],Dt=wt===et-1?void 0:u.HEAPU32[Me]-rt;Ue.push(u.UTF8ToString(rt,Dt))}Q.push([he,be,Ue,"cpu"])}else if(ze==="gpu-buffer"&&et>0){let Ue=u.jsepGetBuffer(ye),Me=cr(Ge);if(Me===void 0||!No(he))throw new Error(`Unsupported data type: ${he}`);Ie=!0,Q.push([he,be,{gpuBuffer:Ue,download:u.jsepCreateDownloader(Ue,et*Me,he),dispose:()=>{u._OrtReleaseTensor(Ee)}},"gpu-buffer"])}else{let Ue=Mr(he),Me=new Ue(et);new Uint8Array(Me.buffer,Me.byteOffset,Me.byteLength).set(u.HEAPU8.subarray(ye,ye+Me.byteLength)),Q.push([he,be,Me,"cpu"])}}finally{u.stackRestore(Pe),he==="string"&&ye&&u._free(ye),Ie||u._OrtReleaseTensor(Ee)}}return g&&u._OrtClearBoundOutputs(g.handle),Q}finally{u.stackRestore(E),I.forEach(T=>u._OrtReleaseTensor(T)),$.forEach(T=>u._OrtReleaseTensor(T)),x.forEach(T=>u._free(T)),y!==0&&u._OrtReleaseRunOptions(y),_.forEach(T=>u._free(T))}},Eu=e=>{let t=Ve(),r=yr.get(e);if(!r)throw new Error("invalid session id");let o=r[0],n=t._OrtEndProfiling(o);n===0&&ke("Can\'t get an profile file name."),t._OrtFree(n)},Ou=e=>{let t=[];for(let r of e){let o=r[2];!Array.isArray(o)&&"buffer"in o&&t.push(o.buffer)}return t};self.onmessage=e=>{let{type:t,in:r}=e.data;try{switch(t){case"init-wasm":zo(r.wasm).then(()=>{_u(r).then(()=>{postMessage({type:t})},o=>{postMessage({type:t,err:o})})},o=>{postMessage({type:t,err:o})});break;case"init-ep":{let{epName:o,env:n}=r;Cu(n,o).then(()=>{postMessage({type:t})},s=>{postMessage({type:t,err:s})});break}case"copy-from":{let{buffer:o}=r,n=eo(o);postMessage({type:t,out:n});break}case"create":{let{model:o,options:n}=r;Iu(o,n).then(s=>{postMessage({type:t,out:s})},s=>{postMessage({type:t,err:s})});break}case"release":Au(r),postMessage({type:t});break;case"run":{let{sessionId:o,inputIndices:n,inputs:s,outputIndices:u,options:l}=r;Tu(o,n,s,u,new Array(u.length).fill(null),l).then(a=>{a.some(p=>p[3]!=="cpu")?postMessage({type:t,err:"Proxy does not support non-cpu tensor location."}):postMessage({type:t,out:a},Ou(a))},a=>{postMessage({type:t,err:a})});break}case"end-profiling":Eu(r),postMessage({type:t});break;default:}}catch(o){postMessage({type:t,err:o})}};})();\n/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n'}),dr,At,Vr,gn,_n,Ds,za,br,$r,bh,yn,$h,xh,Sh,kh,Eh,Ch,Ah,Ih=Q(()=>{Dt(),W_(),un(),dr=()=>!!Pe.wasm.proxy&&typeof document<"u",Vr=!1,gn=!1,_n=!1,za=new Map,br=(t,e)=>{let r=za.get(t);r?r.push(e):za.set(t,[e])},$r=()=>{if(Vr||!gn||_n||!At)throw new Error("worker not ready")},bh=t=>{switch(t.data.type){case"init-wasm":Vr=!1,t.data.err?(_n=!0,Ds[1](t.data.err)):(gn=!0,Ds[0]());break;case"init-ep":case"copy-from":case"create":case"release":case"run":case"end-profiling":{let e=za.get(t.data.type);t.data.err?e.shift()[1](t.data.err):e.shift()[0](t.data.out);break}}},yn=typeof document<"u"?document?.currentScript?.src:void 0,$h=async()=>{if(!gn){if(Vr)throw new Error("multiple calls to 'initWasm()' detected.");if(_n)throw new Error("previous call to 'initWasm()' failed.");if(Vr=!0,dr())return Pe.wasm.wasmPaths===void 0&&yn&&yn.indexOf("blob:")!==0&&(Pe.wasm.wasmPaths=yn.substr(0,+yn.lastIndexOf("/")+1)),new Promise((t,e)=>{At?.terminate();let r=URL.createObjectURL(new Blob([L_()],{type:"text/javascript"}));At=new Worker(r,{name:"ort-wasm-proxy-worker"}),At.onerror=a=>e(a),At.onmessage=bh,URL.revokeObjectURL(r),Ds=[t,e];let n={type:"init-wasm",in:Pe};At.postMessage(n)});try{await rl(Pe.wasm),await hh(Pe),gn=!0}catch(t){throw _n=!0,t}finally{Vr=!1}}},xh=async t=>{if(dr())return $r(),new Promise((e,r)=>{br("init-ep",[e,r]);let n={type:"init-ep",in:{epName:t,env:Pe}};At.postMessage(n)});await fh(Pe,t)},Sh=async t=>dr()?($r(),new Promise((e,r)=>{br("copy-from",[e,r]);let n={type:"copy-from",in:{buffer:t}};At.postMessage(n,[t.buffer])})):Bs(t),kh=async(t,e)=>{if(dr()){if(e?.preferredOutputLocation)throw new Error('session option "preferredOutputLocation" is not supported for proxy.');return $r(),new Promise((r,n)=>{br("create",[r,n]);let a={type:"create",in:{model:t,options:e}},i=[];t instanceof Uint8Array&&i.push(t.buffer),At.postMessage(a,i)})}else return gh(t,e)},Eh=async t=>{if(dr())return $r(),new Promise((e,r)=>{br("release",[e,r]);let n={type:"release",in:t};At.postMessage(n)});_h(t)},Ch=async(t,e,r,n,a,i)=>{if(dr()){if(r.some(s=>s[3]!=="cpu"))throw new Error("input tensor on GPU is not supported for proxy.");if(a.some(s=>s))throw new Error("pre-allocated output tensor is not supported for proxy.");return $r(),new Promise((s,o)=>{br("run",[s,o]);let l=r,d={type:"run",in:{sessionId:t,inputIndices:e,inputs:l,outputIndices:n,options:i}};At.postMessage(d,vh(l))})}else return yh(t,e,r,n,a,i)},Ah=async t=>{if(dr())return $r(),new Promise((e,r)=>{br("end-profiling",[e,r]);let n={type:"end-profiling",in:t};At.postMessage(n)});wh(t)}}),Ps,Th,Oh,F_=Q(()=>{Dt(),Ih(),Ye(),ul(),Ps=(t,e)=>{switch(t.location){case"cpu":return[t.type,t.dims,t.data,"cpu"];case"gpu-buffer":return[t.type,t.dims,{gpuBuffer:t.gpuBuffer},"gpu-buffer"];default:throw new Error(`invalid data location: ${t.location} for ${e()}`)}},Th=t=>{switch(t[3]){case"cpu":return new ht(t[0],t[2],t[1]);case"gpu-buffer":{let e=t[0];if(!Gi(e))throw new Error(`not supported data type: ${e} for deserializing GPU tensor`);let{gpuBuffer:r,download:n,dispose:a}=t[2];return ht.fromGpuBuffer(r,{dataType:e,dims:t[1],download:n,dispose:a})}default:throw new Error(`invalid data location: ${t[3]}`)}},Oh=class{async fetchModelAndCopyToWasmMemory(t){return Sh(await wa(t))}async loadModel(t,e){Bt();let r;typeof t=="string"?typeof process<"u"&&process.versions&&process.versions.node?r=await wa(t):r=await this.fetchModelAndCopyToWasmMemory(t):r=t,[this.sessionId,this.inputNames,this.outputNames]=await kh(r,e),Rt()}async dispose(){return Eh(this.sessionId)}async run(t,e,r){Bt();let n=[],a=[];Object.entries(t).forEach(u=>{let h=u[0],f=u[1],g=this.inputNames.indexOf(h);if(g===-1)throw new Error(`invalid input '${h}'`);n.push(f),a.push(g)});let i=[],s=[];Object.entries(e).forEach(u=>{let h=u[0],f=u[1],g=this.outputNames.indexOf(h);if(g===-1)throw new Error(`invalid output '${h}'`);i.push(f),s.push(g)});let o=n.map((u,h)=>Ps(u,()=>`input "${this.inputNames[a[h]]}"`)),l=i.map((u,h)=>u?Ps(u,()=>`output "${this.outputNames[s[h]]}"`):null),d=await Ch(this.sessionId,a,o,s,l,r),c={};for(let u=0;u<d.length;u++)c[this.outputNames[s[u]]]=i[u]??Th(d[u]);return Rt(),c}startProfiling(){}endProfiling(){Ah(this.sessionId)}}}),Mh,zh,V_=Q(()=>{Dt(),Ih(),F_(),Mh=()=>{if((typeof Pe.wasm.initTimeout!="number"||Pe.wasm.initTimeout<0)&&(Pe.wasm.initTimeout=0),typeof Pe.wasm.simd!="boolean"&&(Pe.wasm.simd=!0),typeof Pe.wasm.proxy!="boolean"&&(Pe.wasm.proxy=!1),typeof Pe.wasm.trace!="boolean"&&(Pe.wasm.trace=!1),typeof Pe.wasm.numThreads!="number"||!Number.isInteger(Pe.wasm.numThreads)||Pe.wasm.numThreads<=0){(typeof self<"u"&&!self.crossOriginIsolated||typeof process<"u"&&process.versions&&process.versions.node)&&(Pe.wasm.numThreads=1);let t=typeof navigator>"u"?(void 0)().length:navigator.hardwareConcurrency;Pe.wasm.numThreads=Math.min(4,Math.ceil((t||1)/2))}},zh=class{async init(t){Mh(),await $h(),await xh(t)}async createInferenceSessionHandler(t,e){let r=new Oh;return await r.loadModel(t,e),Promise.resolve(r)}}}),Bh={};Pr(Bh,{wasmBackend:()=>Rh});var Rh,H_=Q(()=>{V_(),Rh=new zh});Dt(),Dt(),Dt();var G_="1.17.1",q_=Fo;{let t=(H_(),yr(Bh)).wasmBackend;Nr("webgpu",t,5),Nr("cpu",t,10),Nr("wasm",t,10)}Object.defineProperty(Pe.versions,"web",{value:G_,enumerable:!0});var j_=Object.freeze({__proto__:null,get InferenceSession(){return Di},get TRACE(){return on},get TRACE_FUNC_BEGIN(){return Bt},get TRACE_FUNC_END(){return Rt},get Tensor(){return ht},get TrainingSession(){return Pi},default:q_,get env(){return Pe},get registerBackend(){return Nr}});const K_=(t,e)=>{const r=typeof document<"u"?document.createElement("canvas"):new OffscreenCanvas(1,1);r.width=t.dims[3],r.height=t.dims[2];const n=r.getContext("2d");if(n!=null){let a,i;e?.tensorLayout!==void 0&&e.tensorLayout==="NHWC"?(a=t.dims[2],i=t.dims[3]):(a=t.dims[3],i=t.dims[2]);const s=e?.format!==void 0?e.format:"RGB",o=e?.norm;let l,d;o===void 0||o.mean===void 0?l=[255,255,255,255]:typeof o.mean=="number"?l=[o.mean,o.mean,o.mean,o.mean]:(l=[o.mean[0],o.mean[1],o.mean[2],0],o.mean[3]!==void 0&&(l[3]=o.mean[3])),o===void 0||o.bias===void 0?d=[0,0,0,0]:typeof o.bias=="number"?d=[o.bias,o.bias,o.bias,o.bias]:(d=[o.bias[0],o.bias[1],o.bias[2],0],o.bias[3]!==void 0&&(d[3]=o.bias[3]));const c=i*a;let u=0,h=c,f=c*2,g=-1;s==="RGBA"?(u=0,h=c,f=c*2,g=c*3):s==="RGB"?(u=0,h=c,f=c*2):s==="RBG"&&(u=0,f=c,h=c*2);for(let y=0;y<i;y++)for(let w=0;w<a;w++){const v=(t.data[u++]-d[0])*l[0],S=(t.data[h++]-d[1])*l[1],E=(t.data[f++]-d[2])*l[2],x=g===-1?255:(t.data[g++]-d[3])*l[3];n.fillStyle="rgba("+v+","+S+","+E+","+x+")",n.fillRect(w,y,1,1)}if("toDataURL"in r)return r.toDataURL();throw new Error("toDataURL is not supported")}else throw new Error("Can not access image data")},Y_=(t,e)=>{const r=typeof document<"u"?document.createElement("canvas").getContext("2d"):new OffscreenCanvas(1,1).getContext("2d");let n;if(r!=null){let a,i,s;e?.tensorLayout!==void 0&&e.tensorLayout==="NHWC"?(a=t.dims[2],i=t.dims[1],s=t.dims[3]):(a=t.dims[3],i=t.dims[2],s=t.dims[1]);const o=e!==void 0&&e.format!==void 0?e.format:"RGB",l=e?.norm;let d,c;l===void 0||l.mean===void 0?d=[255,255,255,255]:typeof l.mean=="number"?d=[l.mean,l.mean,l.mean,l.mean]:(d=[l.mean[0],l.mean[1],l.mean[2],255],l.mean[3]!==void 0&&(d[3]=l.mean[3])),l===void 0||l.bias===void 0?c=[0,0,0,0]:typeof l.bias=="number"?c=[l.bias,l.bias,l.bias,l.bias]:(c=[l.bias[0],l.bias[1],l.bias[2],0],l.bias[3]!==void 0&&(c[3]=l.bias[3]));const u=i*a;if(e!==void 0&&(e.format!==void 0&&s===4&&e.format!=="RGBA"||s===3&&e.format!=="RGB"&&e.format!=="BGR"))throw new Error("Tensor format doesn't match input tensor dims");const h=4;let f=0,g=1,y=2,w=3,v=0,S=u,E=u*2,x=-1;o==="RGBA"?(v=0,S=u,E=u*2,x=u*3):o==="RGB"?(v=0,S=u,E=u*2):o==="RBG"&&(v=0,E=u,S=u*2),n=r.createImageData(a,i);for(let A=0;A<i*a;f+=h,g+=h,y+=h,w+=h,A++)n.data[f]=(t.data[v++]-c[0])*d[0],n.data[g]=(t.data[S++]-c[1])*d[1],n.data[y]=(t.data[E++]-c[2])*d[2],n.data[w]=x===-1?255:(t.data[x++]-c[3])*d[3]}else throw new Error("Can not access image data");return n},Ns=(t,e)=>{if(t===void 0)throw new Error("Image buffer must be defined");if(e.height===void 0||e.width===void 0)throw new Error("Image height and width must be defined");if(e.tensorLayout==="NHWC")throw new Error("NHWC Tensor layout is not supported yet");const{height:r,width:n}=e,a=e.norm??{mean:255,bias:0};let i,s;typeof a.mean=="number"?i=[a.mean,a.mean,a.mean,a.mean]:i=[a.mean[0],a.mean[1],a.mean[2],a.mean[3]??255],typeof a.bias=="number"?s=[a.bias,a.bias,a.bias,a.bias]:s=[a.bias[0],a.bias[1],a.bias[2],a.bias[3]??0];const o=e.format!==void 0?e.format:"RGBA",l=e.tensorFormat!==void 0&&e.tensorFormat!==void 0?e.tensorFormat:"RGB",d=r*n,c=l==="RGBA"?new Float32Array(d*4):new Float32Array(d*3);let u=4,h=0,f=1,g=2,y=3,w=0,v=d,S=d*2,E=-1;o==="RGB"&&(u=3,h=0,f=1,g=2,y=-1),l==="RGBA"?E=d*3:l==="RBG"?(w=0,S=d,v=d*2):l==="BGR"&&(S=0,v=d,w=d*2);for(let x=0;x<d;x++,h+=u,g+=u,f+=u,y+=u)c[w++]=(t[h]+s[0])/i[0],c[v++]=(t[f]+s[1])/i[1],c[S++]=(t[g]+s[2])/i[2],E!==-1&&y!==-1&&(c[E++]=(t[y]+s[3])/i[3]);return l==="RGBA"?new Kt("float32",c,[1,4,r,n]):new Kt("float32",c,[1,3,r,n])},X_=async(t,e)=>{const r=typeof HTMLImageElement<"u"&&t instanceof HTMLImageElement,n=typeof ImageData<"u"&&t instanceof ImageData,a=typeof ImageBitmap<"u"&&t instanceof ImageBitmap,i=typeof t=="string";let s,o=e??{};const l=()=>{if(typeof document<"u")return document.createElement("canvas");if(typeof OffscreenCanvas<"u")return new OffscreenCanvas(1,1);throw new Error("Canvas is not supported")},d=c=>c instanceof HTMLCanvasElement||c instanceof OffscreenCanvas?c.getContext("2d"):null;if(r){const c=l();c.width=t.width,c.height=t.height;const u=d(c);if(u!=null){let h=t.height,f=t.width;if(e!==void 0&&e.resizedHeight!==void 0&&e.resizedWidth!==void 0&&(h=e.resizedHeight,f=e.resizedWidth),e!==void 0){if(o=e,e.tensorFormat!==void 0)throw new Error("Image input config format must be RGBA for HTMLImageElement");o.tensorFormat="RGBA",o.height=h,o.width=f}else o.tensorFormat="RGBA",o.height=h,o.width=f;u.drawImage(t,0,0),s=u.getImageData(0,0,f,h).data}else throw new Error("Can not access image data")}else if(n){let c,u;if(e!==void 0&&e.resizedWidth!==void 0&&e.resizedHeight!==void 0?(c=e.resizedHeight,u=e.resizedWidth):(c=t.height,u=t.width),e!==void 0&&(o=e),o.format="RGBA",o.height=c,o.width=u,e!==void 0){const h=l();h.width=u,h.height=c;const f=d(h);if(f!=null)f.putImageData(t,0,0),s=f.getImageData(0,0,u,c).data;else throw new Error("Can not access image data")}else s=t.data}else if(a){if(e===void 0)throw new Error("Please provide image config with format for Imagebitmap");const c=l();c.width=t.width,c.height=t.height;const u=d(c);if(u!=null){const h=t.height,f=t.width;return u.drawImage(t,0,0,f,h),s=u.getImageData(0,0,f,h).data,o.height=h,o.width=f,Ns(s,o)}else throw new Error("Can not access image data")}else{if(i)return new Promise((c,u)=>{const h=l(),f=d(h);if(!t||!f)return u();const g=new Image;g.crossOrigin="Anonymous",g.src=t,g.onload=()=>{h.width=g.width,h.height=g.height,f.drawImage(g,0,0,h.width,h.height);const y=f.getImageData(0,0,h.width,h.height);o.height=h.height,o.width=h.width,c(Ns(y.data,o))}});throw new Error("Input data provided is not supported - aborted tensor creation")}if(s!==void 0)return Ns(s,o);throw new Error("Input data provided is not supported - aborted tensor creation")},Q_=(t,e)=>{const{width:r,height:n,download:a,dispose:i}=e,s=[1,n,r,4];return new Kt({location:"texture",type:"float32",texture:t,dims:s,download:a,dispose:i})},Z_=(t,e)=>{const{dataType:r,dims:n,download:a,dispose:i}=e;return new Kt({location:"gpu-buffer",type:r??"float32",gpuBuffer:t,dims:n,download:a,dispose:i})},J_=(t,e,r)=>new Kt({location:"cpu-pinned",type:t,data:e,dims:r??[e.length]}),Ba=new Map([["float32",Float32Array],["uint8",Uint8Array],["int8",Int8Array],["uint16",Uint16Array],["float16",Uint16Array],["int16",Int16Array],["int32",Int32Array],["bool",Uint8Array],["float64",Float64Array],["uint32",Uint32Array]]),Us=new Map([[Float32Array,"float32"],[Uint8Array,"uint8"],[Int8Array,"int8"],[Uint16Array,"uint16"],[Int16Array,"int16"],[Int32Array,"int32"],[Float64Array,"float64"],[Uint32Array,"uint32"]]);let Dh=!1;const e0=()=>{if(!Dh){Dh=!0;const t=typeof BigInt64Array<"u"&&typeof BigInt64Array.from=="function",e=typeof BigUint64Array<"u"&&typeof BigUint64Array.from=="function";t&&(Ba.set("int64",BigInt64Array),Us.set(BigInt64Array,"int64")),e&&(Ba.set("uint64",BigUint64Array),Us.set(BigUint64Array,"uint64"))}},t0=t=>{let e=1;for(let r=0;r<t.length;r++){const n=t[r];if(typeof n!="number"||!Number.isSafeInteger(n))throw new TypeError(`dims[${r}] must be an integer, got: ${n}`);if(n<0)throw new RangeError(`dims[${r}] must be a non-negative integer, got: ${n}`);e*=n}return e},r0=(t,e)=>{switch(t.location){case"cpu":return new Kt(t.type,t.data,e);case"cpu-pinned":return new Kt({location:"cpu-pinned",data:t.data,type:t.type,dims:e});case"texture":return new Kt({location:"texture",texture:t.texture,type:t.type,dims:e});case"gpu-buffer":return new Kt({location:"gpu-buffer",gpuBuffer:t.gpuBuffer,type:t.type,dims:e});default:throw new Error(`tensorReshape: tensor location ${t.location} is not supported`)}};let Kt=class{constructor(t,e,r){e0();let n,a;if(typeof t=="object"&&"location"in t)switch(this.dataLocation=t.location,n=t.type,a=t.dims,t.location){case"cpu-pinned":{const s=Ba.get(n);if(!s)throw new TypeError(`unsupported type "${n}" to create tensor from pinned buffer`);if(!(t.data instanceof s))throw new TypeError(`buffer should be of type ${s.name}`);this.cpuData=t.data;break}case"texture":{if(n!=="float32")throw new TypeError(`unsupported type "${n}" to create tensor from texture`);this.gpuTextureData=t.texture,this.downloader=t.download,this.disposer=t.dispose;break}case"gpu-buffer":{if(n!=="float32"&&n!=="float16"&&n!=="int32"&&n!=="int64"&&n!=="uint32"&&n!=="bool")throw new TypeError(`unsupported type "${n}" to create tensor from gpu buffer`);this.gpuBufferData=t.gpuBuffer,this.downloader=t.download,this.disposer=t.dispose;break}default:throw new Error(`Tensor constructor: unsupported location '${this.dataLocation}'`)}else{let s,o;if(typeof t=="string")if(n=t,o=r,t==="string"){if(!Array.isArray(e))throw new TypeError("A string tensor's data must be a string array.");s=e}else{const l=Ba.get(t);if(l===void 0)throw new TypeError(`Unsupported tensor type: ${t}.`);if(Array.isArray(e)){if(t==="float16")throw new TypeError("Creating a float16 tensor from number array is not supported. Please use Uint16Array as data.");t==="uint64"||t==="int64"?s=l.from(e,BigInt):s=l.from(e)}else if(e instanceof l)s=e;else throw new TypeError(`A ${n} tensor's data must be type of ${l}`)}else if(o=e,Array.isArray(t)){if(t.length===0)throw new TypeError("Tensor type cannot be inferred from an empty array.");const l=typeof t[0];if(l==="string")n="string",s=t;else if(l==="boolean")n="bool",s=Uint8Array.from(t);else throw new TypeError(`Invalid element type of data array: ${l}.`)}else{const l=Us.get(t.constructor);if(l===void 0)throw new TypeError(`Unsupported type for tensor data: ${t.constructor}.`);n=l,s=t}if(o===void 0)o=[s.length];else if(!Array.isArray(o))throw new TypeError("A tensor's dims must be a number array");a=o,this.cpuData=s,this.dataLocation="cpu"}const i=t0(a);if(this.cpuData&&i!==this.cpuData.length)throw new Error(`Tensor's size(${i}) does not match data length(${this.cpuData.length}).`);this.type=n,this.dims=a,this.size=i}static async fromImage(t,e){return X_(t,e)}static fromTexture(t,e){return Q_(t,e)}static fromGpuBuffer(t,e){return Z_(t,e)}static fromPinnedBuffer(t,e,r){return J_(t,e,r)}toDataURL(t){return K_(this,t)}toImageData(t){return Y_(this,t)}get data(){if(this.ensureValid(),!this.cpuData)throw new Error("The data is not on CPU. Use `getData()` to download GPU data to CPU, or use `texture` or `gpuBuffer` property to access the GPU data directly.");return this.cpuData}get location(){return this.dataLocation}get texture(){if(this.ensureValid(),!this.gpuTextureData)throw new Error("The data is not stored as a WebGL texture.");return this.gpuTextureData}get gpuBuffer(){if(this.ensureValid(),!this.gpuBufferData)throw new Error("The data is not stored as a WebGPU buffer.");return this.gpuBufferData}async getData(t){switch(this.ensureValid(),this.dataLocation){case"cpu":case"cpu-pinned":return this.data;case"texture":case"gpu-buffer":{if(!this.downloader)throw new Error("The current tensor is not created with a specified data downloader.");if(this.isDownloading)throw new Error("The current tensor is being downloaded.");try{this.isDownloading=!0;const e=await this.downloader();return this.downloader=void 0,this.dataLocation="cpu",this.cpuData=e,t&&this.disposer&&(this.disposer(),this.disposer=void 0),e}finally{this.isDownloading=!1}}default:throw new Error(`cannot get data from location: ${this.dataLocation}`)}}dispose(){if(this.isDownloading)throw new Error("The current tensor is being downloaded.");this.disposer&&(this.disposer(),this.disposer=void 0),this.cpuData=void 0,this.gpuTextureData=void 0,this.gpuBufferData=void 0,this.downloader=void 0,this.isDownloading=void 0,this.dataLocation="none"}ensureValid(){if(this.dataLocation==="none")throw new Error("The tensor is disposed.")}reshape(t){if(this.ensureValid(),this.downloader||this.disposer)throw new Error("Cannot reshape a tensor that owns GPU resource.");return r0(this,t)}};const n0=Kt,a0=typeof navigator<"u"&&"gpu"in navigator,i0=typeof process<"u"&&process?.release?.name==="node",wn=[];let Ws,vn;i0?(vn=Ke??gg,wn.push("cpu"),Ws=["cpu"]):(vn=j_,a0&&wn.push("webgpu"),wn.push("wasm"),Ws=["wasm"]);const s0=vn.InferenceSession;function o0(t){let e=Ws;if(t){if(!wn.includes(t))throw new Error(`Unsupported device: "${t}". Should be one of: ${wn.join(", ")}.`);e=[t]}return e}async function l0(t,e){const r={...e};return await s0.create(t,r)}function Ph(t){return t instanceof vn.Tensor}const xr=vn?.env;xr?.wasm&&(xr.wasm.wasmPaths="https://cdn.jsdelivr.net/npm/onnxruntime-web@1.17.1/dist/",xr.wasm.proxy=!0,(typeof crossOriginIsolated>"u"||!crossOriginIsolated)&&(xr.wasm.numThreads=1),typeof navigator<"u"&&/iP(hone|od|ad).+16_4.+AppleWebKit/.test(navigator.userAgent)&&(xr.wasm.simd=!1));function u0(){return xr?.wasm?.proxy}tt.backends.onnx=xr;const Nh=Object.freeze({float32:Float32Array,float16:Uint16Array,float64:Float64Array,string:Array,int8:Int8Array,uint8:Uint8Array,int16:Int16Array,uint16:Uint16Array,int32:Int32Array,uint32:Uint32Array,int64:BigInt64Array,uint64:BigUint64Array,bool:Uint8Array});class re{get dims(){return this.ort_tensor.dims}set dims(e){this.ort_tensor.dims=e}get type(){return this.ort_tensor.type}get data(){return this.ort_tensor.data}get size(){return this.ort_tensor.size}ort_tensor;constructor(...e){return Ph(e[0])?this.ort_tensor=e[0]:this.ort_tensor=new n0(e[0],e[1],e[2]),new Proxy(this,{get:(r,n)=>{if(typeof n=="string"){let a=Number(n);if(Number.isInteger(a))return r._getitem(a)}return r[n]},set:(r,n,a)=>r[n]=a})}dispose(){this.ort_tensor.dispose()}*[Symbol.iterator](){const[e,...r]=this.dims;if(r.length>0){const n=r.reduce((a,i)=>a*i);for(let a=0;a<e;++a)yield this._subarray(a,n,r)}else yield*this.data}_getitem(e){const[r,...n]=this.dims;if(e=cr(e,r),n.length>0){const a=n.reduce((i,s)=>i*s);return this._subarray(e,a,n)}else return new re(this.type,[this.data[e]],n)}indexOf(e){for(let r=0;r<this.data.length;++r)if(this.data[r]==e)return r;return-1}_subarray(e,r,n){const a=e*r,i=(e+1)*r,s="subarray"in this.data?this.data.subarray(a,i):this.data.slice(a,i);return new re(this.type,s,n)}item(){if(this.data.length!==1)throw new Error(`a Tensor with ${this.data.length} elements cannot be converted to Scalar`);return this.data[0]}tolist(){return d0(this.data,this.dims)}sigmoid(){return this.clone().sigmoid_()}sigmoid_(){for(let e=0;e<this.data.length;++e)this.data[e]=1/(1+Math.exp(-this.data[e]));return this}mul(e){return this.clone().mul_(e)}mul_(e){for(let r=0;r<this.data.length;++r)this.data[r]*=e;return this}add(e){return this.clone().add_(e)}add_(e){for(let r=0;r<this.data.length;++r)this.data[r]+=e;return this}clone(){return new re(this.type,this.data.slice(),this.dims.slice())}slice(...e){let r=[],n=[];for(let l=0;l<this.dims.length;++l){let d=e[l];if(d==null)n.push([0,this.dims[l]]),r.push(this.dims[l]);else if(typeof d=="number")d=cr(d,this.dims[l],l),n.push([d,d+1]);else if(Array.isArray(d)&&d.length===2){if(d[0]>d[1])throw new Error(`Invalid slice: ${d}`);let c=[Math.max(d[0],0),Math.min(d[1],this.dims[l])];n.push(c),r.push(c[1]-c[0])}else throw new Error(`Invalid slice: ${d}`)}let a=n.map(([l,d])=>d-l),i=a.reduce((l,d)=>l*d),s=new this.data.constructor(i);const o=this.stride();for(let l=0;l<i;++l){let d=0;for(let c=a.length-1,u=l;c>=0;--c){const h=a[c];d+=(u%h+n[c][0])*o[c],u=Math.floor(u/h)}s[l]=this.data[d]}return new re(this.type,s,r)}permute(...e){return c0(this,e)}transpose(...e){return this.permute(...e)}sum(e=null,r=!1){return this.norm(1,e,r)}norm(e="fro",r=null,n=!1){if(e==="fro")e=2;else if(typeof e=="string")throw Error(`Unsupported norm: ${e}`);if(r===null){let s=this.data.reduce((o,l)=>o+l**e,0)**(1/e);return new re(this.type,[s],[])}r=cr(r,this.dims.length);const a=this.dims.slice();a[r]=1;const i=new this.data.constructor(this.data.length/this.dims[r]);for(let s=0;s<this.data.length;++s){let o=0;for(let l=this.dims.length-1,d=s,c=1;l>=0;--l){const u=this.dims[l];if(l!==r){const h=d%u;o+=h*c,c*=a[l]}d=Math.floor(d/u)}i[o]+=this.data[s]**e}if(e!==1)for(let s=0;s<i.length;++s)i[s]=i[s]**(1/e);return n||a.splice(r,1),new re(this.type,i,a)}normalize_(e=2,r=1){r=cr(r,this.dims.length);const n=this.norm(e,r,!0);for(let a=0;a<this.data.length;++a){let i=0;for(let s=this.dims.length-1,o=a,l=1;s>=0;--s){const d=this.dims[s];if(s!==r){const c=o%d;i+=c*l,l*=this.dims[s]}o=Math.floor(o/d)}this.data[a]/=n.data[i]}return this}normalize(e=2,r=1){return this.clone().normalize_(e,r)}stride(){return m0(this.dims)}squeeze(e=null){return new re(this.type,this.data,Uh(this.dims,e))}squeeze_(e=null){return this.dims=Uh(this.dims,e),this}unsqueeze(e=null){return new re(this.type,this.data,Wh(this.dims,e))}unsqueeze_(e=null){return this.dims=Wh(this.dims,e),this}flatten_(e=0,r=-1){r=(r+this.dims.length)%this.dims.length;let n=this.dims.slice(0,e),a=this.dims.slice(e,r+1),i=this.dims.slice(r+1);return this.dims=[...n,a.reduce((s,o)=>s*o,1),...i],this}flatten(e=0,r=-1){return this.clone().flatten_(e,r)}view(...e){let r=-1;for(let n=0;n<e.length;++n)if(e[n]===-1){if(r!==-1)throw new Error("Only one dimension can be inferred");r=n}if(r!==-1){const n=e.reduce((a,i,s)=>s!==r?a*i:a,1);e[r]=this.data.length/n}return new re(this.type,this.data,e)}neg_(){for(let e=0;e<this.data.length;++e)this.data[e]=-this.data[e];return this}neg(){return this.clone().neg_()}clamp_(e,r){for(let n=0;n<this.data.length;++n)this.data[n]=Math.min(Math.max(this.data[n],e),r);return this}clamp(e,r){return this.clone().clamp_(e,r)}round_(){for(let e=0;e<this.data.length;++e)this.data[e]=Math.round(this.data[e]);return this}round(){return this.clone().round_()}to(e){if(this.type===e)return this;if(!Nh.hasOwnProperty(e))throw new Error(`Unsupported type: ${e}`);return new re(e,Nh[e].from(this.data),this.dims)}}function d0(t,e){const r=t.length,n=e.reduce((i,s)=>i*s);if(r!==n)throw Error(`cannot reshape array of size ${r} into shape (${e})`);let a=t;for(let i=e.length-1;i>=0;i--)a=a.reduce((s,o)=>{let l=s[s.length-1];return l.length<e[i]?l.push(o):s.push([o]),s},[[]]);return a[0]}function c0(t,e){const[r,n]=Cg(t.data,t.dims,e);return new re(t.type,r,n)}function bn(t,[e,r],n="bilinear",a=!1){const i=t.dims.at(-3)??1,s=t.dims.at(-2),o=t.dims.at(-1);let l=Eg(t.data,[i,s,o],[e,r],n,a);return new re(t.type,l,[i,e,r])}function p0(t,e){let r=[t.dims[0],t.dims[2]],n=new t.data.constructor(r[0]*r[1]),[a,i,s]=t.dims,o=0;for(let l=0;l<a;++l){let d=l*s*i;for(let c=0;c<s;++c){let u=0,h=0,f=l*i,g=d+c;for(let w=0;w<i;++w){let v=Number(e.data[f+w]);h+=v,u+=t.data[g+w*s]*v}let y=u/h;n[o++]=y}}return new re(t.type,n,r)}function Uh(t,e){return t=t.slice(),e===null?t=t.filter(r=>r!==1):typeof e=="number"?t[e]===1&&t.splice(e,1):Array.isArray(e)&&(t=t.filter((r,n)=>r!==1||!e.includes(n))),t}function Wh(t,e){return e=cr(e,t.length+1),t=t.slice(),t.splice(e,0,1),t}function cr(t,e,r=null){if(t<-e||t>=e)throw new Error(`IndexError: index ${t} is out of bounds for dimension${r===null?"":" "+r} with size ${e}`);return t<0&&(t=(t%e+e)%e),t}function Ra(t,e=0){e=cr(e,t[0].dims.length);const r=t[0].dims.slice();r[e]=t.reduce((s,o)=>s+o.dims[e],0);const n=r.reduce((s,o)=>s*o,1),a=new t[0].data.constructor(n),i=t[0].type;if(e===0){let s=0;for(let o of t)a.set(o.data,s),s+=o.data.length}else{let s=0;for(let o=0;o<t.length;++o){let l=t[o];for(let d=0;d<l.data.length;++d){let c=0;for(let u=l.dims.length-1,h=d,f=1;u>=0;--u){const g=l.dims[u];let y=h%g;u===e&&(y+=s),c+=y*f,f*=r[u],h=Math.floor(h/g)}a[c]=l.data[d]}s+=l.dims[e]}}return new re(i,a,r)}function Da(t,e=0){return Ra(t.map(r=>r.unsqueeze(e)),e)}function h0(t,e=null,r=1,n=!1){if(e===null){const o=t.data.reduce((c,u)=>c+u,0)/t.data.length,l=Math.sqrt(t.data.reduce((c,u)=>c+(u-o)**2,0)/(t.data.length-r)),d=new re(t.type,[o],[]);return[new re(t.type,[l],[]),d]}e=cr(e,t.dims.length);const a=Lh(t,e,n),i=t.dims.slice();i[e]=1;const s=new t.data.constructor(t.data.length/t.dims[e]);for(let o=0;o<t.data.length;++o){let l=0;for(let d=t.dims.length-1,c=o,u=1;d>=0;--d){const h=t.dims[d];if(d!==e){const f=c%h;l+=f*u,u*=i[d]}c=Math.floor(c/h)}s[l]+=(t.data[o]-a.data[l])**2}for(let o=0;o<s.length;++o)s[o]=Math.sqrt(s[o]/(t.dims[e]-r));return n||i.splice(e,1),[new re(t.type,s,i),a]}function Lh(t,e=null,r=!1){if(e===null){let i=t.data.reduce((s,o)=>s+o,0);return new re(t.type,[i/t.data.length],[])}e=cr(e,t.dims.length);const n=t.dims.slice();n[e]=1;const a=new t.data.constructor(t.data.length/t.dims[e]);for(let i=0;i<t.data.length;++i){let s=0;for(let o=t.dims.length-1,l=i,d=1;o>=0;--o){const c=t.dims[o];if(o!==e){const u=l%c;s+=u*d,d*=n[o]}l=Math.floor(l/c)}a[s]+=t.data[i]}if(t.dims[e]!==1)for(let i=0;i<a.length;++i)a[i]=a[i]/t.dims[e];return r||n.splice(e,1),new re(t.type,a,n)}function f0(t){const[e,r]=t.dims,n=[e+1,r+1],a=new re("float32",new Float32Array(n[0]*n[1]).fill(1/0),n),i=new re("float32",new Float32Array(n[0]*n[1]).fill(-1),n);a[0].data[0]=0;for(let c=1;c<r+1;++c)for(let u=1;u<e+1;++u){const h=a[u-1][c-1].item(),f=a[u-1][c].item(),g=a[u][c-1].item();let y,w;h<f&&h<g?(y=h,w=0):f<h&&f<g?(y=f,w=1):(y=g,w=2),a[u].data[c]=t[u-1][c-1].item()+y,i[u].data[c]=w}let s=e,o=r;i.data.fill(2,0,n[1]);for(let c=0;c<n[0];++c)i[c].data[0]=1;let l=[],d=[];for(;s>0||o>0;)switch(l.push(s-1),d.push(o-1),i[s][o].item()){case 0:--s,--o;break;case 1:--s;break;case 2:--o;break;default:throw new Error(`Internal error in dynamic time warping. Unexpected trace[${s}, ${o}]. Please file a bug report.`)}return l.reverse(),d.reverse(),[l,d]}function m0(t){const e=new Array(t.length);for(let r=t.length-1,n=1;r>=0;--r)e[r]=n,n*=t[r];return e}function g0(t){const e=t.reduce((r,n)=>r*n,1);return new re("int64",new BigInt64Array(e).fill(1n),t)}function _0(t){return g0(t.dims)}class y0{constructor(e=(r,n)=>r>n){this._heap=[],this._comparator=e}get size(){return this._heap.length}isEmpty(){return this.size===0}peek(){return this._heap[0]}push(...e){return this.extend(e)}extend(e){for(const r of e)this._heap.push(r),this._siftUp();return this.size}pop(){const e=this.peek(),r=this.size-1;return r>0&&this._swap(0,r),this._heap.pop(),this._siftDown(),e}replace(e){const r=this.peek();return this._heap[0]=e,this._siftDown(),r}_parent(e){return(e+1>>>1)-1}_left(e){return(e<<1)+1}_right(e){return e+1<<1}_greater(e,r){return this._comparator(this._heap[e],this._heap[r])}_swap(e,r){const n=this._heap[e];this._heap[e]=this._heap[r],this._heap[r]=n}_siftUp(){let e=this.size-1;for(;e>0&&this._greater(e,this._parent(e));)this._swap(e,this._parent(e)),e=this._parent(e)}_siftDown(){let e=0;for(;this._left(e)<this.size&&this._greater(this._left(e),e)||this._right(e)<this.size&&this._greater(this._right(e),e);){const r=this._right(e)<this.size&&this._greater(this._right(e),this._left(e))?this._right(e):this._left(e);this._swap(e,r),e=r}}}class w0{constructor(){this.root=Pa.default()}extend(e){for(let r of e)this.push(r)}push(e){let r=this.root;for(let n of e){let a=r.children.get(n);a===void 0&&(a=Pa.default(),r.children.set(n,a)),r=a}r.isLeaf=!0}*commonPrefixSearch(e){let r=this.root,n="";for(let a=0;a<e.length&&r!==void 0;++a){const i=e[a];n+=i,r=r.children.get(i),r!==void 0&&r.isLeaf&&(yield n)}}}class Pa{constructor(e,r){this.isLeaf=e,this.children=r}static default(){return new Pa(!1,new Map)}}class v0{constructor(e,r,n){this.sentence=e,this.len=e.length,this.bosTokenId=r,this.eosTokenId=n,this.nodes=[],this.beginNodes=Array.from({length:this.len+1},()=>[]),this.endNodes=Array.from({length:this.len+1},()=>[]);const a=new $n(this.bosTokenId,0,0,0,0),i=new $n(this.eosTokenId,1,this.len,0,0);this.nodes.push(a.clone()),this.nodes.push(i.clone()),this.beginNodes[this.len].push(i),this.endNodes[0].push(a)}insert(e,r,n,a){const i=this.nodes.length,s=new $n(a,i,e,r,n);this.beginNodes[e].push(s),this.endNodes[e+r].push(s),this.nodes.push(s)}viterbi(){const e=this.len;let r=0;for(;r<=e;){if(this.beginNodes[r].length==0)return[];for(let s of this.beginNodes[r]){s.prev=null;let o=0,l=null;for(let d of this.endNodes[r]){const c=d.backtraceScore+s.score;(l===null||c>o)&&(l=d.clone(),o=c)}if(l!==null)s.prev=l,s.backtraceScore=o;else return[]}++r}const n=[],a=this.beginNodes[e][0].prev;if(a===null)return[];let i=a.clone();for(;i.prev!==null;)n.push(i.clone()),i=i.clone().prev.clone();return n.reverse(),n}piece(e){return this.sentence.slice(e.pos,e.pos+e.length)}tokens(){return this.viterbi().map(e=>this.piece(e))}tokenIds(){return this.viterbi().map(e=>e.tokenId)}}class $n{constructor(e,r,n,a,i){this.tokenId=e,this.nodeId=r,this.pos=n,this.length=a,this.score=i,this.prev=null,this.backtraceScore=0}clone(){const e=new $n(this.tokenId,this.nodeId,this.pos,this.length,this.score);return e.prev=this.prev,e.backtraceScore=this.backtraceScore,e}}var N=Object.freeze({Text:"Text",NumericLiteral:"NumericLiteral",BooleanLiteral:"BooleanLiteral",StringLiteral:"StringLiteral",Identifier:"Identifier",Equals:"Equals",OpenParen:"OpenParen",CloseParen:"CloseParen",OpenStatement:"OpenStatement",CloseStatement:"CloseStatement",OpenExpression:"OpenExpression",CloseExpression:"CloseExpression",OpenSquareBracket:"OpenSquareBracket",CloseSquareBracket:"CloseSquareBracket",OpenCurlyBracket:"OpenCurlyBracket",CloseCurlyBracket:"CloseCurlyBracket",Comma:"Comma",Dot:"Dot",Colon:"Colon",Pipe:"Pipe",CallOperator:"CallOperator",AdditiveBinaryOperator:"AdditiveBinaryOperator",MultiplicativeBinaryOperator:"MultiplicativeBinaryOperator",ComparisonBinaryOperator:"ComparisonBinaryOperator",UnaryOperator:"UnaryOperator",Set:"Set",If:"If",For:"For",In:"In",Is:"Is",NotIn:"NotIn",Else:"Else",EndIf:"EndIf",ElseIf:"ElseIf",EndFor:"EndFor",And:"And",Or:"Or",Not:"UnaryOperator"}),Fh=Object.freeze({set:N.Set,for:N.For,in:N.In,is:N.Is,if:N.If,else:N.Else,endif:N.EndIf,elif:N.ElseIf,endfor:N.EndFor,and:N.And,or:N.Or,not:N.Not,"not in":N.NotIn,true:N.BooleanLiteral,false:N.BooleanLiteral}),Sr=class{constructor(t,e){this.value=t,this.type=e}};function Vh(t){return/\w/.test(t)}function Ls(t){return/[0-9]/.test(t)}var b0=[["{%",N.OpenStatement],["%}",N.CloseStatement],["{{",N.OpenExpression],["}}",N.CloseExpression],["(",N.OpenParen],[")",N.CloseParen],["{",N.OpenCurlyBracket],["}",N.CloseCurlyBracket],["[",N.OpenSquareBracket],["]",N.CloseSquareBracket],[",",N.Comma],[".",N.Dot],[":",N.Colon],["|",N.Pipe],["<=",N.ComparisonBinaryOperator],[">=",N.ComparisonBinaryOperator],["==",N.ComparisonBinaryOperator],["!=",N.ComparisonBinaryOperator],["<",N.ComparisonBinaryOperator],[">",N.ComparisonBinaryOperator],["+",N.AdditiveBinaryOperator],["-",N.AdditiveBinaryOperator],["*",N.MultiplicativeBinaryOperator],["/",N.MultiplicativeBinaryOperator],["%",N.MultiplicativeBinaryOperator],["=",N.Equals]],$0=new Map([["n",`
`],["t","	"],["r","\r"],["b","\b"],["f","\f"],["v","\v"],["'","'"],['"','"'],["\\","\\"]]);function x0(t,e={}){return t.endsWith(`
`)&&(t=t.slice(0,-1)),t=t.replace(/{#.*?#}/gs,"{##}"),e.lstrip_blocks&&(t=t.replace(/^[ \t]*({[#%])/gm,"$1")),e.trim_blocks&&(t=t.replace(/([#%]})\n/g,"$1")),t.replace(/{##}/g,"").replace(/-%}\s*/g,"%}").replace(/\s*{%-/g,"{%").replace(/-}}\s*/g,"}}").replace(/\s*{{-/g,"{{")}function S0(t,e={}){const r=[],n=x0(t,e);let a=0;const i=s=>{let o="";for(;s(n[a]);){if(n[a]==="\\"){if(++a,a>=n.length)throw new SyntaxError("Unexpected end of input");const l=n[a++],d=$0.get(l);if(d===void 0)throw new SyntaxError(`Unexpected escaped character: ${l}`);o+=d;continue}if(o+=n[a++],a>=n.length)throw new SyntaxError("Unexpected end of input")}return o};e:for(;a<n.length;){const s=r.at(-1)?.type;if(s===void 0||s===N.CloseStatement||s===N.CloseExpression){let l="";for(;a<n.length&&!(n[a]==="{"&&(n[a+1]==="%"||n[a+1]==="{"));)l+=n[a++];if(l.length>0){r.push(new Sr(l,N.Text));continue}}i(l=>/\s/.test(l));const o=n[a];if(o==="-"||o==="+"){const l=r.at(-1)?.type;if(l===N.Text||l===void 0)throw new SyntaxError(`Unexpected character: ${o}`);switch(l){case N.Identifier:case N.NumericLiteral:case N.BooleanLiteral:case N.StringLiteral:case N.CloseParen:case N.CloseSquareBracket:break;default:{++a;const d=i(Ls);r.push(new Sr(`${o}${d}`,d.length>0?N.NumericLiteral:N.UnaryOperator));continue}}}for(const[l,d]of b0)if(n.slice(a,a+l.length)===l){r.push(new Sr(l,d)),a+=l.length;continue e}if(o==="'"||o==='"'){++a;const l=i(d=>d!==o);r.push(new Sr(l,N.StringLiteral)),++a;continue}if(Ls(o)){const l=i(Ls);r.push(new Sr(l,N.NumericLiteral));continue}if(Vh(o)){const l=i(Vh),d=Object.hasOwn(Fh,l)?Fh[l]:N.Identifier;d===N.In&&r.at(-1)?.type===N.Not?(r.pop(),r.push(new Sr("not in",N.NotIn))):r.push(new Sr(l,d));continue}throw new SyntaxError(`Unexpected character: ${o}`)}return r}var xn=class{type="Statement"},k0=class extends xn{constructor(t){super(),this.body=t}type="Program"},Hh=class extends xn{constructor(t,e,r){super(),this.test=t,this.body=e,this.alternate=r}type="If"},E0=class extends xn{constructor(t,e,r){super(),this.loopvar=t,this.iterable=e,this.body=r}type="For"},C0=class extends xn{constructor(t,e){super(),this.assignee=t,this.value=e}type="Set"},Yt=class extends xn{type="Expression"},A0=class extends Yt{constructor(t,e,r){super(),this.object=t,this.property=e,this.computed=r}type="MemberExpression"},I0=class extends Yt{constructor(t,e){super(),this.callee=t,this.args=e}type="CallExpression"},Hr=class extends Yt{constructor(t){super(),this.value=t}type="Identifier"},Gr=class extends Yt{constructor(t){super(),this.value=t}type="Literal"},T0=class extends Gr{type="NumericLiteral"},Gh=class extends Gr{type="StringLiteral"},qh=class extends Gr{type="BooleanLiteral"},O0=class extends Gr{type="ArrayLiteral"},jh=class extends Gr{type="TupleLiteral"},M0=class extends Gr{type="ObjectLiteral"},Sn=class extends Yt{constructor(t,e,r){super(),this.operator=t,this.left=e,this.right=r}type="BinaryExpression"},z0=class extends Yt{constructor(t,e){super(),this.operand=t,this.filter=e}type="FilterExpression"},B0=class extends Yt{constructor(t,e,r){super(),this.operand=t,this.negate=e,this.test=r}type="TestExpression"},R0=class extends Yt{constructor(t,e){super(),this.operator=t,this.argument=e}type="UnaryExpression"},D0=class extends Yt{constructor(t=void 0,e=void 0,r=void 0){super(),this.start=t,this.stop=e,this.step=r}type="SliceExpression"},P0=class extends Yt{constructor(t,e){super(),this.key=t,this.value=e}type="KeywordArgumentExpression"};function N0(t){const e=new k0([]);let r=0;function n(D,L){const V=t[r++];if(!V||V.type!==D)throw new Error(`Parser Error: ${L}. ${V.type} !== ${D}.`);return V}function a(){switch(t[r].type){case N.Text:return o();case N.OpenStatement:return l();case N.OpenExpression:return d();default:throw new SyntaxError(`Unexpected token type: ${t[r].type}`)}}function i(...D){return r+D.length<=t.length&&D.some((L,V)=>L!==t[r+V].type)}function s(...D){return r+D.length<=t.length&&D.every((L,V)=>L===t[r+V].type)}function o(){return new Gh(n(N.Text,"Expected text token").value)}function l(){n(N.OpenStatement,"Expected opening statement token");let D;switch(t[r].type){case N.Set:++r,D=c(),n(N.CloseStatement,"Expected closing statement token");break;case N.If:++r,D=u(),n(N.OpenStatement,"Expected {% token"),n(N.EndIf,"Expected endif token"),n(N.CloseStatement,"Expected %} token");break;case N.For:++r,D=f(),n(N.OpenStatement,"Expected {% token"),n(N.EndFor,"Expected endfor token"),n(N.CloseStatement,"Expected %} token");break;default:throw new SyntaxError(`Unknown statement type: ${t[r].type}`)}return D}function d(){n(N.OpenExpression,"Expected opening expression token");const D=g();return n(N.CloseExpression,"Expected closing expression token"),D}function c(){const D=g();if(s(N.Equals)){++r;const L=c();return new C0(D,L)}return D}function u(){const D=g();n(N.CloseStatement,"Expected closing statement token");const L=[],V=[];for(;!(t[r]?.type===N.OpenStatement&&(t[r+1]?.type===N.ElseIf||t[r+1]?.type===N.Else||t[r+1]?.type===N.EndIf));)L.push(a());if(t[r]?.type===N.OpenStatement&&t[r+1]?.type!==N.EndIf)if(++r,s(N.ElseIf))n(N.ElseIf,"Expected elseif token"),V.push(u());else for(n(N.Else,"Expected else token"),n(N.CloseStatement,"Expected closing statement token");!(t[r]?.type===N.OpenStatement&&t[r+1]?.type===N.EndIf);)V.push(a());return new Hh(D,L,V)}function h(D=!1){const L=D?q:g,V=[L()],te=s(N.Comma);for(;te&&(++r,V.push(L()),!!s(N.Comma)););return te?new jh(V):V[0]}function f(){const D=h(!0);if(!(D instanceof Hr||D instanceof jh))throw new SyntaxError(`Expected identifier/tuple for the loop variable, got ${D.type} instead`);n(N.In,"Expected `in` keyword following loop variable");const L=g();n(N.CloseStatement,"Expected closing statement token");const V=[];for(;i(N.OpenStatement,N.EndFor);)V.push(a());return new E0(D,L,V)}function g(){return y()}function y(){const D=w();if(s(N.If)){++r;const L=w();n(N.Else,"Expected else token");const V=w();return new Hh(L,[D],[V])}return D}function w(){let D=v();for(;s(N.Or);){const L=t[r];++r;const V=v();D=new Sn(L,D,V)}return D}function v(){let D=S();for(;s(N.And);){const L=t[r];++r;const V=S();D=new Sn(L,D,V)}return D}function S(){let D;for(;s(N.Not);){const L=t[r];++r;const V=S();D=new R0(L,V)}return D??E()}function E(){let D=x();for(;s(N.ComparisonBinaryOperator)||s(N.In)||s(N.NotIn);){const L=t[r];++r;const V=x();D=new Sn(L,D,V)}return D}function x(){let D=O();for(;s(N.AdditiveBinaryOperator);){const L=t[r];++r;const V=O();D=new Sn(L,D,V)}return D}function A(){const D=K();return s(N.OpenParen)?T(D):D}function T(D){let L=new I0(D,B());return s(N.OpenParen)&&(L=T(L)),L}function B(){n(N.OpenParen,"Expected opening parenthesis for arguments list");const D=U();return n(N.CloseParen,"Expected closing parenthesis for arguments list"),D}function U(){const D=[];for(;!s(N.CloseParen);){let L=g();if(s(N.Equals)){if(++r,!(L instanceof Hr))throw new SyntaxError("Expected identifier for keyword argument");const V=g();L=new P0(L,V)}D.push(L),s(N.Comma)&&++r}return D}function H(){const D=[];let L=!1;for(;!s(N.CloseSquareBracket);)s(N.Colon)?(D.push(void 0),++r,L=!0):(D.push(g()),s(N.Colon)&&(++r,L=!0));if(D.length===0)throw new SyntaxError("Expected at least one argument for member/slice expression");if(L){if(D.length>3)throw new SyntaxError("Expected 0-3 arguments for slice expression");return new D0(...D)}return D[0]}function K(){let D=q();for(;s(N.Dot)||s(N.OpenSquareBracket);){const L=t[r];++r;let V;const te=L.type!==N.Dot;if(te)V=H(),n(N.CloseSquareBracket,"Expected closing square bracket");else if(V=q(),V.type!=="Identifier")throw new SyntaxError("Expected identifier following dot operator");D=new A0(D,V,te)}return D}function O(){let D=G();for(;s(N.MultiplicativeBinaryOperator);){const L=t[r];++r;const V=G();D=new Sn(L,D,V)}return D}function G(){let D=ne();for(;s(N.Is);){++r;const L=s(N.Not);L&&++r;let V=q();if(V instanceof qh&&(V=new Hr(V.value.toString())),!(V instanceof Hr))throw new SyntaxError("Expected identifier for the test");D=new B0(D,L,V)}return D}function ne(){let D=A();for(;s(N.Pipe);){++r;let L=q();if(!(L instanceof Hr))throw new SyntaxError("Expected identifier for the filter");s(N.OpenParen)&&(L=T(L)),D=new z0(D,L)}return D}function q(){const D=t[r];switch(D.type){case N.NumericLiteral:return++r,new T0(Number(D.value));case N.StringLiteral:return++r,new Gh(D.value);case N.BooleanLiteral:return++r,new qh(D.value==="true");case N.Identifier:return++r,new Hr(D.value);case N.OpenParen:{++r;const L=h();if(t[r].type!==N.CloseParen)throw new SyntaxError(`Expected closing parenthesis, got ${t[r].type} instead`);return++r,L}case N.OpenSquareBracket:{++r;const L=[];for(;!s(N.CloseSquareBracket);)L.push(g()),s(N.Comma)&&++r;return++r,new O0(L)}case N.OpenCurlyBracket:{++r;const L=new Map;for(;!s(N.CloseCurlyBracket);){const V=g();n(N.Colon,"Expected colon between key and value in object literal");const te=g();L.set(V,te),s(N.Comma)&&++r}return++r,new M0(L)}default:throw new SyntaxError(`Unexpected token: ${D.type}`)}}for(;r<t.length;)e.body.push(a());return e}function U0(t,e,r=1){e===void 0&&(e=t,t=0);const n=[];for(let a=t;a<e;a+=r)n.push(a);return n}function Kh(t,e,r,n=1){const a=Math.sign(n);a>=0?(e=(e??=0)<0?Math.max(t.length+e,0):Math.min(e,t.length),r=(r??=t.length)<0?Math.max(t.length+r,0):Math.min(r,t.length)):(e=(e??=t.length-1)<0?Math.max(t.length+e,-1):Math.min(e,t.length-1),r=(r??=-1)<-1?Math.max(t.length+r,-1):Math.min(r,t.length-1));const i=[];for(let s=e;a*s<a*r;s+=n)i.push(t[s]);return i}function Yh(t){return t.replace(/\b\w/g,e=>e.toUpperCase())}var ar=class{type="RuntimeValue";value;builtins=new Map;constructor(t=void 0){this.value=t}__bool__(){return new Je(!!this.value)}},Fe=class extends ar{type="NumericValue"},Te=class extends ar{type="StringValue";builtins=new Map([["upper",new ir(()=>new Te(this.value.toUpperCase()))],["lower",new ir(()=>new Te(this.value.toLowerCase()))],["strip",new ir(()=>new Te(this.value.trim()))],["title",new ir(()=>new Te(Yh(this.value)))],["length",new Fe(this.value.length)]])},Je=class extends ar{type="BooleanValue"},Ft=class extends ar{type="ObjectValue";__bool__(){return new Je(this.value.size>0)}builtins=new Map([["get",new ir(([t,e])=>{if(!(t instanceof Te))throw new Error(`Object key must be a string: got ${t.type}`);return this.value.get(t.value)??e??new kn})],["items",new ir(()=>new Xe(Array.from(this.value.entries()).map(([t,e])=>new Xe([new Te(t),e]))))]])},Xe=class extends ar{type="ArrayValue";builtins=new Map([["length",new Fe(this.value.length)]]);__bool__(){return new Je(this.value.length>0)}},W0=class extends Xe{type="TupleValue"},ir=class extends ar{type="FunctionValue"},kn=class extends ar{type="NullValue"},Vt=class extends ar{type="UndefinedValue"},Fs=class{constructor(t){this.parent=t}variables=new Map([["namespace",new ir(t=>{if(t.length===0)return new Ft(new Map);if(t.length!==1||!(t[0]instanceof Ft))throw new Error("`namespace` expects either zero arguments or a single object argument");return t[0]})]]);tests=new Map([["boolean",t=>t.type==="BooleanValue"],["callable",t=>t instanceof ir],["odd",t=>{if(t.type!=="NumericValue")throw new Error(`Cannot apply test "odd" to type: ${t.type}`);return t.value%2!==0}],["even",t=>{if(t.type!=="NumericValue")throw new Error(`Cannot apply test "even" to type: ${t.type}`);return t.value%2===0}],["false",t=>t.type==="BooleanValue"&&!t.value],["true",t=>t.type==="BooleanValue"&&t.value],["number",t=>t.type==="NumericValue"],["integer",t=>t.type==="NumericValue"&&Number.isInteger(t.value)],["iterable",t=>t instanceof Xe||t instanceof Te],["lower",t=>{const e=t.value;return t.type==="StringValue"&&e===e.toLowerCase()}],["upper",t=>{const e=t.value;return t.type==="StringValue"&&e===e.toUpperCase()}],["none",t=>t.type==="NullValue"],["defined",t=>t.type!=="UndefinedValue"],["undefined",t=>t.type==="UndefinedValue"],["equalto",(t,e)=>t.value===e.value]]);set(t,e){return this.declareVariable(t,Na(e))}declareVariable(t,e){if(this.variables.has(t))throw new SyntaxError(`Variable already declared: ${t}`);return this.variables.set(t,e),e}setVariable(t,e){return this.variables.set(t,e),e}resolve(t){if(this.variables.has(t))return this;if(this.parent)return this.parent.resolve(t);throw new Error(`Unknown variable: ${t}`)}lookupVariable(t){try{return this.resolve(t).variables.get(t)??new Vt}catch{return new Vt}}},L0=class{global;constructor(t){this.global=t??new Fs}run(t){return this.evaluate(t,this.global)}evaluateBinaryExpression(t,e){const r=this.evaluate(t.left,e);switch(t.operator.value){case"and":return r.__bool__().value?this.evaluate(t.right,e):r;case"or":return r.__bool__().value?r:this.evaluate(t.right,e)}const n=this.evaluate(t.right,e);switch(t.operator.value){case"==":return new Je(r.value==n.value);case"!=":return new Je(r.value!=n.value)}if(r instanceof Vt||n instanceof Vt)throw new Error("Cannot perform operation on undefined values");if(r instanceof kn||n instanceof kn)throw new Error("Cannot perform operation on null values");if(r instanceof Fe&&n instanceof Fe)switch(t.operator.value){case"+":return new Fe(r.value+n.value);case"-":return new Fe(r.value-n.value);case"*":return new Fe(r.value*n.value);case"/":return new Fe(r.value/n.value);case"%":return new Fe(r.value%n.value);case"<":return new Je(r.value<n.value);case">":return new Je(r.value>n.value);case">=":return new Je(r.value>=n.value);case"<=":return new Je(r.value<=n.value)}else if(r instanceof Xe&&n instanceof Xe)switch(t.operator.value){case"+":return new Xe(r.value.concat(n.value))}else if(n instanceof Xe){const a=n.value.find(i=>i.value===r.value)!==void 0;switch(t.operator.value){case"in":return new Je(a);case"not in":return new Je(!a)}}if(r instanceof Te||n instanceof Te)switch(t.operator.value){case"+":return new Te(r.value.toString()+n.value.toString())}if(r instanceof Te&&n instanceof Te)switch(t.operator.value){case"in":return new Je(n.value.includes(r.value));case"not in":return new Je(!n.value.includes(r.value))}if(r instanceof Te&&n instanceof Ft)switch(t.operator.value){case"in":return new Je(n.value.has(r.value));case"not in":return new Je(!n.value.has(r.value))}throw new SyntaxError(`Unknown operator "${t.operator.value}" between ${r.type} and ${n.type}`)}evaluateFilterExpression(t,e){const r=this.evaluate(t.operand,e);if(t.filter.type==="Identifier"){const n=t.filter;if(r instanceof Xe)switch(n.value){case"list":return r;case"first":return r.value[0];case"last":return r.value[r.value.length-1];case"length":return new Fe(r.value.length);case"reverse":return new Xe(r.value.reverse());case"sort":return new Xe(r.value.sort((a,i)=>{if(a.type!==i.type)throw new Error(`Cannot compare different types: ${a.type} and ${i.type}`);switch(a.type){case"NumericValue":return a.value-i.value;case"StringValue":return a.value.localeCompare(i.value);default:throw new Error(`Cannot compare type: ${a.type}`)}}));default:throw new Error(`Unknown ArrayValue filter: ${n.value}`)}else if(r instanceof Te)switch(n.value){case"length":return new Fe(r.value.length);case"upper":return new Te(r.value.toUpperCase());case"lower":return new Te(r.value.toLowerCase());case"title":return new Te(Yh(r.value));case"capitalize":return new Te(r.value.charAt(0).toUpperCase()+r.value.slice(1));case"trim":return new Te(r.value.trim());default:throw new Error(`Unknown StringValue filter: ${n.value}`)}else if(r instanceof Fe)switch(n.value){case"abs":return new Fe(Math.abs(r.value));default:throw new Error(`Unknown NumericValue filter: ${n.value}`)}else if(r instanceof Ft)switch(n.value){case"items":return new Xe(Array.from(r.value.entries()).map(([a,i])=>new Xe([new Te(a),i])));case"length":return new Fe(r.value.size);default:throw new Error(`Unknown ObjectValue filter: ${n.value}`)}throw new Error(`Cannot apply filter "${n.value}" to type: ${r.type}`)}else if(t.filter.type==="CallExpression"){const n=t.filter;if(n.callee.type!=="Identifier")throw new Error(`Unknown filter: ${n.callee.type}`);const a=n.callee.value;if(r instanceof Xe){switch(a){case"selectattr":{if(r.value.some(c=>!(c instanceof Ft)))throw new Error("`selectattr` can only be applied to array of objects");if(n.args.some(c=>c.type!=="StringLiteral"))throw new Error("arguments of `selectattr` must be strings");const[i,s,o]=n.args.map(c=>this.evaluate(c,e));let l;if(s){const c=e.tests.get(s.value);if(!c)throw new Error(`Unknown test: ${s.value}`);l=c}else l=(...c)=>c[0].__bool__().value;const d=r.value.filter(c=>{const u=c.value.get(i.value);return u?l(u,o):!1});return new Xe(d)}}throw new Error(`Unknown ArrayValue filter: ${a}`)}else throw new Error(`Cannot apply filter "${a}" to type: ${r.type}`)}throw new Error(`Unknown filter: ${t.filter.type}`)}evaluateTestExpression(t,e){const r=this.evaluate(t.operand,e),n=e.tests.get(t.test.value);if(!n)throw new Error(`Unknown test: ${t.test.value}`);const a=n(r);return new Je(t.negate?!a:a)}evaluateUnaryExpression(t,e){const r=this.evaluate(t.argument,e);switch(t.operator.value){case"not":return new Je(!r.value);default:throw new SyntaxError(`Unknown operator: ${t.operator.value}`)}}evalProgram(t,e){return this.evaluateBlock(t.body,e)}evaluateBlock(t,e){let r="";for(const n of t){const a=this.evaluate(n,e);a.type!=="NullValue"&&a.type!=="UndefinedValue"&&(r+=a.value)}return new Te(r)}evaluateIdentifier(t,e){return e.lookupVariable(t.value)}evaluateCallExpression(t,e){const r=[],n=new Map;for(const i of t.args)if(i.type==="KeywordArgumentExpression"){const s=i;n.set(s.key.value,this.evaluate(s.value,e))}else r.push(this.evaluate(i,e));n.size>0&&r.push(new Ft(n));const a=this.evaluate(t.callee,e);if(a.type!=="FunctionValue")throw new Error(`Cannot call something that is not a function: got ${a.type}`);return a.value(r,e)}evaluateSliceExpression(t,e,r){if(!(t instanceof Xe||t instanceof Te))throw new Error("Slice object must be an array or string");const n=this.evaluate(e.start,r),a=this.evaluate(e.stop,r),i=this.evaluate(e.step,r);if(!(n instanceof Fe||n instanceof Vt))throw new Error("Slice start must be numeric or undefined");if(!(a instanceof Fe||a instanceof Vt))throw new Error("Slice stop must be numeric or undefined");if(!(i instanceof Fe||i instanceof Vt))throw new Error("Slice step must be numeric or undefined");return t instanceof Xe?new Xe(Kh(t.value,n.value,a.value,i.value)):new Te(Kh(Array.from(t.value),n.value,a.value,i.value).join(""))}evaluateMemberExpression(t,e){const r=this.evaluate(t.object,e);let n;if(t.computed){if(t.property.type==="SliceExpression")return this.evaluateSliceExpression(r,t.property,e);n=this.evaluate(t.property,e)}else n=new Te(t.property.value);let a;if(r instanceof Ft){if(!(n instanceof Te))throw new Error(`Cannot access property with non-string: got ${n.type}`);a=r.value.get(n.value)??r.builtins.get(n.value)}else if(r instanceof Xe||r instanceof Te)if(n instanceof Fe)a=r.value.at(n.value),r instanceof Te&&(a=new Te(r.value.at(n.value)));else if(n instanceof Te)a=r.builtins.get(n.value);else throw new Error(`Cannot access property with non-string/non-number: got ${n.type}`);else{if(!(n instanceof Te))throw new Error(`Cannot access property with non-string: got ${n.type}`);a=r.builtins.get(n.value)}return a instanceof ar?a:new Vt}evaluateSet(t,e){const r=this.evaluate(t.value,e);if(t.assignee.type==="Identifier"){const n=t.assignee.value;e.setVariable(n,r)}else if(t.assignee.type==="MemberExpression"){const n=t.assignee,a=this.evaluate(n.object,e);if(!(a instanceof Ft))throw new Error("Cannot assign to member of non-object");if(n.property.type!=="Identifier")throw new Error("Cannot assign to member with non-identifier property");a.value.set(n.property.value,r)}else throw new Error(`Invalid LHS inside assignment expression: ${JSON.stringify(t.assignee)}`);return new kn}evaluateIf(t,e){const r=this.evaluate(t.test,e);return this.evaluateBlock(r.__bool__().value?t.body:t.alternate,e)}evaluateFor(t,e){const r=new Fs(e),n=this.evaluate(t.iterable,r);if(!(n instanceof Xe))throw new Error(`Expected iterable type in for loop: got ${n.type}`);let a="";for(let i=0;i<n.value.length;++i){const s=new Map([["index",new Fe(i+1)],["index0",new Fe(i)],["revindex",new Fe(n.value.length-i)],["revindex0",new Fe(n.value.length-i-1)],["first",new Je(i===0)],["last",new Je(i===n.value.length-1)],["length",new Fe(n.value.length)],["previtem",i>0?n.value[i-1]:new Vt],["nextitem",i<n.value.length-1?n.value[i+1]:new Vt]]);r.setVariable("loop",new Ft(s));const o=n.value[i];if(t.loopvar.type==="Identifier")r.setVariable(t.loopvar.value,o);else if(t.loopvar.type==="TupleLiteral"){const d=t.loopvar;if(o.type!=="ArrayValue")throw new Error(`Cannot unpack non-iterable type: ${o.type}`);const c=o;if(d.value.length!==c.value.length)throw new Error(`Too ${d.value.length>c.value.length?"few":"many"} items to unpack`);for(let u=0;u<d.value.length;++u){if(d.value[u].type!=="Identifier")throw new Error(`Cannot unpack non-identifier type: ${d.value[u].type}`);r.setVariable(d.value[u].value,c.value[u])}}const l=this.evaluateBlock(t.body,r);a+=l.value}return new Te(a)}evaluate(t,e){if(t===void 0)return new Vt;switch(t.type){case"Program":return this.evalProgram(t,e);case"Set":return this.evaluateSet(t,e);case"If":return this.evaluateIf(t,e);case"For":return this.evaluateFor(t,e);case"NumericLiteral":return new Fe(Number(t.value));case"StringLiteral":return new Te(t.value);case"BooleanLiteral":return new Je(t.value);case"ArrayLiteral":return new Xe(t.value.map(r=>this.evaluate(r,e)));case"TupleLiteral":return new W0(t.value.map(r=>this.evaluate(r,e)));case"ObjectLiteral":{const r=new Map;for(const[n,a]of t.value){const i=this.evaluate(n,e);if(!(i instanceof Te))throw new Error(`Object keys must be strings: got ${i.type}`);r.set(i.value,this.evaluate(a,e))}return new Ft(r)}case"Identifier":return this.evaluateIdentifier(t,e);case"CallExpression":return this.evaluateCallExpression(t,e);case"MemberExpression":return this.evaluateMemberExpression(t,e);case"UnaryExpression":return this.evaluateUnaryExpression(t,e);case"BinaryExpression":return this.evaluateBinaryExpression(t,e);case"FilterExpression":return this.evaluateFilterExpression(t,e);case"TestExpression":return this.evaluateTestExpression(t,e);default:throw new SyntaxError(`Unknown node type: ${t.type}`)}}};function Na(t){switch(typeof t){case"number":return new Fe(t);case"string":return new Te(t);case"boolean":return new Je(t);case"object":return t===null?new kn:Array.isArray(t)?new Xe(t.map(Na)):new Ft(new Map(Object.entries(t).map(([e,r])=>[e,Na(r)])));case"function":return new ir((e,r)=>{const n=t(...e.map(a=>a.value))??null;return Na(n)});default:throw new Error(`Cannot convert to runtime value: ${t}`)}}var F0=class{parsed;constructor(t){const e=S0(t,{lstrip_blocks:!0,trim_blocks:!0});this.parsed=N0(e)}render(t){const e=new Fs;e.set("false",!1),e.set("true",!0),e.set("raise_exception",r=>{throw new Error(r)}),e.set("range",U0);for(const[r,n]of Object.entries(t))e.set(r,n);return new L0(e).run(this.parsed).value}};async function Xh(t,e){const r=await Promise.all([Br(t,"tokenizer.json",!0,e),Br(t,"tokenizer_config.json",!0,e)]);return e.legacy!==null&&(r[1].legacy=e.legacy),r}function V0(t,e){const r=[];let n=0;for(const a of t.matchAll(e)){const i=a[0];n<a.index&&r.push(t.slice(n,a.index)),i.length>0&&r.push(i),n=a.index+i.length}return n<t.length&&r.push(t.slice(n)),r}function Ua(t,e=!0){if(t.Regex!==void 0){let r=t.Regex.replace(/\\([#&~])/g,"$1");for(const[n,a]of j0)r=r.replaceAll(n,a);return new RegExp(r,"gu")}else if(t.String!==void 0){const r=go(t.String);return new RegExp(e?r:`(${r})`,"gu")}else return console.warn("Unknown pattern type:",t),null}function Vs(t){return new Map(Object.entries(t))}function Qh(t){const e=t.dims;switch(e.length){case 1:return t.tolist();case 2:if(e[0]!==1)throw new Error("Unable to decode tensor with `batch size !== 1`. Use `tokenizer.batch_decode(...)` for batched inputs.");return t.tolist()[0];default:throw new Error(`Expected tensor to have 1-2 dimensions, got ${e.length}.`)}}function Hs(t){return t.replace(/ \./g,".").replace(/ \?/g,"?").replace(/ \!/g,"!").replace(/ ,/g,",").replace(/ \' /g,"'").replace(/ n\'t/g,"n't").replace(/ \'m/g,"'m").replace(/ \'s/g,"'s").replace(/ \'ve/g,"'ve").replace(/ \'re/g,"'re")}function Zh(t){return t.replace(/[\u0300-\u036f]/g,"")}function H0(t){return Zh(t.toLowerCase())}function G0(t,e,r){const n=[];let a=0;for(;a<t.length;){if(n.push(t[a]),(r.get(t[a])??e)!==e){++a;continue}for(;a<t.length&&(r.get(t[a])??e)===e;)++a}return n}function q0(t){return t.match(/\S+/g)||[]}const En="\\p{P}\\u0021-\\u002F\\u003A-\\u0040\\u005B-\\u0060\\u007B-\\u007E",j0=new Map([["(?i:'s|'t|'re|'ve|'m|'ll|'d)","(?:'([sS]|[tT]|[rR][eE]|[vV][eE]|[mM]|[lL][lL]|[dD]))"]]);class K0{constructor(e){this.content=e.content,this.id=e.id,this.single_word=e.single_word??!1,this.lstrip=e.lstrip??!1,this.rstrip=e.rstrip??!1,this.special=e.special??!1,this.normalized=e.normalized??null}}class Cn extends yt{constructor(e){super(),this.config=e,this.vocab=[],this.tokens_to_ids=new Map,this.unk_token_id=void 0,this.unk_token=void 0,this.end_of_word_suffix=void 0,this.fuse_unk=this.config.fuse_unk??!1}static fromConfig(e,...r){switch(e.type){case"WordPiece":return new Y0(e);case"Unigram":return new X0(e,...r);case"BPE":return new Z0(e);default:if(e.vocab)return new J0(e,...r);throw new Error(`Unknown TokenizerModel type: ${e.type}`)}}_call(e){let r=this.encode(e);return this.fuse_unk&&(r=G0(r,this.unk_token_id,this.tokens_to_ids)),r}encode(e){throw Error("encode should be implemented in subclass.")}convert_tokens_to_ids(e){return e.map(r=>this.tokens_to_ids.get(r)??this.unk_token_id)}convert_ids_to_tokens(e){return e.map(r=>this.vocab[r]??this.unk_token)}}class Y0 extends Cn{constructor(e){super(e),this.tokens_to_ids=Vs(e.vocab),this.unk_token_id=this.tokens_to_ids.get(e.unk_token),this.unk_token=e.unk_token,this.max_input_chars_per_word=e.max_input_chars_per_word??100,this.vocab=new Array(this.tokens_to_ids.size);for(const[r,n]of this.tokens_to_ids)this.vocab[n]=r}encode(e){const r=[];for(const n of e){const a=[...n];if(a.length>this.max_input_chars_per_word){r.push(this.unk_token);continue}let i=!1,s=0;const o=[];for(;s<a.length;){let l=a.length,d=null;for(;s<l;){let c=a.slice(s,l).join("");if(s>0&&(c=this.config.continuing_subword_prefix+c),this.tokens_to_ids.has(c)){d=c;break}--l}if(d===null){i=!0;break}o.push(d),s=l}i?r.push(this.unk_token):r.push(...o)}return r}}class X0 extends Cn{constructor(e,r){super(e);const n=e.vocab.length;this.vocab=new Array(n),this.scores=new Array(n);for(let a=0;a<n;++a){const i=e.vocab[a];this.vocab[a]=i[0],this.scores[a]=i[1]}this.unk_token_id=e.unk_id,this.unk_token=this.vocab[e.unk_id],this.tokens_to_ids=new Map(this.vocab.map((a,i)=>[a,i])),this.bosToken=" ",this.bosTokenId=this.tokens_to_ids.get(this.bosToken),this.eosToken=r.eos_token,this.eosTokenId=this.tokens_to_ids.get(this.eosToken),this.unkToken=this.vocab[this.unk_token_id],this.minScore=So(this.scores)[0],this.unkScore=this.minScore-10,this.scores[this.unk_token_id]=this.unkScore,this.trie=new w0,this.trie.extend(this.vocab),this.fuse_unk=!0}populateNodes(e){const r=e.sentence,n=r.length;let a=0;for(;a<n;){let i=!1;for(let s of this.trie.commonPrefixSearch(r.slice(a))){const o=this.tokens_to_ids.get(s),l=this.scores[o],d=s.length;e.insert(a,d,l,o),!i&&d===1&&(i=!0)}i||e.insert(a,1,this.unkScore,this.unk_token_id),a+=1}}tokenize(e){const r=new v0(e,this.bosTokenId,this.eosTokenId);return this.populateNodes(r),r.tokens()}encode(e){const r=[];for(const n of e){const a=this.tokenize(n);r.push(...a)}return r}}const Jh=(()=>{const t=[...Array.from({length:94},(a,i)=>i+33),...Array.from({length:12},(a,i)=>i+161),...Array.from({length:82},(a,i)=>i+174)],e=t.slice();let r=0;for(let a=0;a<256;++a)t.includes(a)||(t.push(a),e.push(256+r),r+=1);const n=e.map(a=>String.fromCharCode(a));return Object.fromEntries(t.map((a,i)=>[a,n[i]]))})(),Q0=pg(Jh);class Z0 extends Cn{constructor(e){super(e),this.BPE_SPLIT_TOKEN=" ",this.tokens_to_ids=Vs(e.vocab),this.unk_token_id=this.tokens_to_ids.get(e.unk_token),this.unk_token=e.unk_token,this.vocab=new Array(this.tokens_to_ids.size);for(const[r,n]of this.tokens_to_ids)this.vocab[n]=r;this.bpe_ranks=new Map(e.merges.map((r,n)=>[r,n])),this.merges=e.merges.map(r=>r.split(this.BPE_SPLIT_TOKEN)),this.end_of_word_suffix=e.end_of_word_suffix,this.continuing_subword_suffix=e.continuing_subword_suffix??null,this.byte_fallback=this.config.byte_fallback??!1,this.byte_fallback&&(this.text_encoder=new TextEncoder),this.cache=new Map}bpe(e){if(e.length===0)return[];const r=this.cache.get(e);if(r!==void 0)return r;const n=Array.from(e);this.end_of_word_suffix&&(n[n.length-1]+=this.end_of_word_suffix);let a=[];if(n.length>1){const i=new y0((l,d)=>l.score<d.score);let s={token:n[0],bias:0,prev:null,next:null},o=s;for(let l=1;l<n.length;++l){const d={bias:l/n.length,token:n[l],prev:o,next:null};o.next=d,this._add_node(i,o),o=d}for(;!i.isEmpty();){const l=i.pop();if(l.deleted||!l.next||l.next.deleted)continue;if(l.deleted=!0,l.next.deleted=!0,l.prev){const c={...l.prev};l.prev.deleted=!0,l.prev=c,c.prev?c.prev.next=c:s=c}const d={token:l.token+l.next.token,bias:l.bias,prev:l.prev,next:l.next.next};d.prev?(d.prev.next=d,this._add_node(i,d.prev)):s=d,d.next&&(d.next.prev=d,this._add_node(i,d))}for(let l=s;l!==null;l=l.next)a.push(l.token)}else a=n;if(this.continuing_subword_suffix)for(let i=0;i<a.length-1;++i)a[i]+=this.continuing_subword_suffix;return this.cache.set(e,a),a}_add_node(e,r){const n=this.bpe_ranks.get(r.token+this.BPE_SPLIT_TOKEN+r.next.token);n!==void 0&&(r.score=n+r.bias,e.push(r))}encode(e){const r=[];for(const n of e){const a=this.bpe(n);for(const i of a)this.tokens_to_ids.has(i)?r.push(i):this.byte_fallback?r.push(...Array.from(this.text_encoder.encode(i)).map(s=>`<0x${s.toString(16).toUpperCase().padStart(2,"0")}>`)):r.push(this.unk_token)}return r}}class J0 extends Cn{constructor(e,r){super(e),this.tokens_to_ids=Vs(r.target_lang?e.vocab[r.target_lang]:e.vocab),this.bos_token=r.bos_token,this.bos_token_id=this.tokens_to_ids.get(this.bos_token),this.eos_token=r.eos_token,this.eos_token_id=this.tokens_to_ids.get(this.eos_token),this.pad_token=r.pad_token,this.pad_token_id=this.tokens_to_ids.get(this.pad_token),this.unk_token=r.unk_token,this.unk_token_id=this.tokens_to_ids.get(this.unk_token),this.vocab=new Array(this.tokens_to_ids.size);for(const[n,a]of this.tokens_to_ids)this.vocab[a]=n}encode(e){return e}}class bt extends yt{constructor(e){super(),this.config=e}static fromConfig(e){if(e===null)return null;switch(e.type){case"BertNormalizer":return new uy(e);case"Precompiled":return new Ay(e);case"Sequence":return new ly(e);case"Replace":return new ey(e);case"NFC":return new ty(e);case"NFKC":return new ry(e);case"NFKD":return new ny(e);case"Strip":return new ay(e);case"StripAccents":return new iy(e);case"Lowercase":return new sy(e);case"Prepend":return new oy(e);default:throw new Error(`Unknown Normalizer type: ${e.type}`)}}normalize(e){throw Error("normalize should be implemented in subclass.")}_call(e){return this.normalize(e)}}class ey extends bt{normalize(e){const r=Ua(this.config.pattern);return r===null?e:e.replaceAll(r,this.config.content)}}class ty extends bt{normalize(e){return e=e.normalize("NFC"),e}}class ry extends bt{normalize(e){return e=e.normalize("NFKC"),e}}class ny extends bt{normalize(e){return e=e.normalize("NFKD"),e}}class ay extends bt{normalize(e){return this.config.strip_left&&this.config.strip_right?e=e.trim():(this.config.strip_left&&(e=e.trimStart()),this.config.strip_right&&(e=e.trimEnd())),e}}class iy extends bt{normalize(e){return e=Zh(e),e}}class sy extends bt{normalize(e){return e=e.toLowerCase(),e}}class oy extends bt{normalize(e){return e=this.config.prepend+e,e}}class ly extends bt{constructor(e){super(e),this.normalizers=e.normalizers.map(r=>bt.fromConfig(r))}normalize(e){return this.normalizers.reduce((r,n)=>n.normalize(r),e)}}class uy extends bt{_tokenize_chinese_chars(e){const r=[];for(let n=0;n<e.length;++n){const a=e[n],i=a.charCodeAt(0);this._is_chinese_char(i)?(r.push(" "),r.push(a),r.push(" ")):r.push(a)}return r.join("")}_is_chinese_char(e){return e>=19968&&e<=40959||e>=13312&&e<=19903||e>=131072&&e<=173791||e>=173824&&e<=177983||e>=177984&&e<=178207||e>=178208&&e<=183983||e>=63744&&e<=64255||e>=194560&&e<=195103}stripAccents(e){return e.normalize("NFD").replace(/[\u0300-\u036f]/g,"")}_is_control(e){switch(e){case"	":case`
`:case"\r":return!1;default:return/^\p{Cc}|\p{Cf}|\p{Co}|\p{Cs}$/u.test(e)}}_clean_text(e){const r=[];for(const n of e){const a=n.charCodeAt(0);a===0||a===65533||this._is_control(n)||(/^\s$/.test(n)?r.push(" "):r.push(n))}return r.join("")}normalize(e){return this.config.clean_text&&(e=this._clean_text(e)),this.config.handle_chinese_chars&&(e=this._tokenize_chinese_chars(e)),this.config.lowercase?(e=e.toLowerCase(),this.config.strip_accents!==!1&&(e=this.stripAccents(e))):this.config.strip_accents&&(e=this.stripAccents(e)),e}}class It extends yt{static fromConfig(e){if(e===null)return null;switch(e.type){case"BertPreTokenizer":return new dy(e);case"Sequence":return new Iy(e);case"Whitespace":return new Ty(e);case"WhitespaceSplit":return new Oy(e);case"Metaspace":return new rf(e);case"ByteLevel":return new cy(e);case"Split":return new py(e);case"Punctuation":return new hy(e);case"Digits":return new fy(e);case"Replace":return new My(e);default:throw new Error(`Unknown PreTokenizer type: ${e.type}`)}}pre_tokenize_text(e,r){throw Error("pre_tokenize_text should be implemented in subclass.")}pre_tokenize(e,r){return(Array.isArray(e)?e.map(n=>this.pre_tokenize_text(n,r)):this.pre_tokenize_text(e,r)).flat()}_call(e,r){return this.pre_tokenize(e,r)}}class dy extends It{constructor(e){super(),this.pattern=new RegExp(`[^\\s${En}]+|[${En}]`,"gu")}pre_tokenize_text(e,r){return e.trim().match(this.pattern)||[]}}class cy extends It{constructor(e){super(),this.config=e,this.add_prefix_space=this.config.add_prefix_space,this.trim_offsets=this.config.trim_offsets,this.use_regex=this.config.use_regex??!0,this.pattern=/'s|'t|'re|'ve|'m|'ll|'d| ?\p{L}+| ?\p{N}+| ?[^\s\p{L}\p{N}]+|\s+(?!\S)|\s+/gu,this.byte_encoder=Jh,this.text_encoder=new TextEncoder}pre_tokenize_text(e,r){return this.add_prefix_space&&!e.startsWith(" ")&&(e=" "+e),(this.use_regex?e.match(this.pattern)||[]:[e]).map(n=>Array.from(this.text_encoder.encode(n),a=>this.byte_encoder[a]).join(""))}}class py extends It{constructor(e){super(),this.config=e,this.pattern=Ua(this.config.pattern,this.config.invert)}pre_tokenize_text(e,r){return this.pattern===null?[]:this.config.invert?e.match(this.pattern)||[]:V0(e,this.pattern)}}class hy extends It{constructor(e){super(),this.config=e,this.pattern=new RegExp(`[^${En}]+|[${En}]+`,"gu")}pre_tokenize_text(e,r){return e.match(this.pattern)||[]}}class fy extends It{constructor(e){super(),this.config=e;const r=`[^\\d]+|\\d${this.config.individual_digits?"":"+"}`;this.pattern=new RegExp(r,"gu")}pre_tokenize_text(e,r){return e.match(this.pattern)||[]}}class Wa extends yt{constructor(e){super(),this.config=e}static fromConfig(e){if(e===null)return null;switch(e.type){case"TemplateProcessing":return new my(e);case"ByteLevel":return new gy(e);case"RobertaProcessing":return new tf(e);case"BertProcessing":return new ef(e);default:throw new Error(`Unknown PostProcessor type: ${e.type}`)}}post_process(e,...r){throw Error("post_process should be implemented in subclass.")}_call(e,...r){return this.post_process(e,...r)}}class ef extends Wa{constructor(e){super(e),this.cls=e.cls[0],this.sep=e.sep[0]}post_process(e,r=null,{add_special_tokens:n=!0}={}){n&&(e=lt([this.cls],e,[this.sep]));let a=new Array(e.length).fill(0);if(r!==null){const i=n&&this instanceof tf?[this.sep]:[],s=n?[this.sep]:[];e=lt(e,i,r,s),a=lt(a,new Array(r.length+i.length+s.length).fill(1))}return{tokens:e,token_type_ids:a}}}class tf extends ef{}class my extends Wa{constructor(e){super(e),this.single=e.single,this.pair=e.pair}post_process(e,r=null,{add_special_tokens:n=!0}={}){const a=r===null?this.single:this.pair;let i=[],s=[];for(const o of a)"SpecialToken"in o?n&&(i.push(o.SpecialToken.id),s.push(o.SpecialToken.type_id)):"Sequence"in o&&(o.Sequence.id==="A"?(i=lt(i,e),s=lt(s,new Array(e.length).fill(o.Sequence.type_id))):o.Sequence.id==="B"&&(i=lt(i,r),s=lt(s,new Array(r.length).fill(o.Sequence.type_id))));return{tokens:i,token_type_ids:s}}}class gy extends Wa{post_process(e,r=null){return r&&(e=lt(e,r)),{tokens:e}}}class $t extends yt{constructor(e){super(),this.config=e,this.added_tokens=[],this.end_of_word_suffix=null,this.trim_offsets=e.trim_offsets}static fromConfig(e){if(e===null)return null;switch(e.type){case"WordPiece":return new by(e);case"Metaspace":return new Cy(e);case"ByteLevel":return new $y(e);case"Replace":return new _y(e);case"ByteFallback":return new yy(e);case"Fuse":return new wy(e);case"Strip":return new vy(e);case"Sequence":return new Sy(e);case"CTC":return new xy(e);case"BPEDecoder":return new ky(e);default:throw new Error(`Unknown Decoder type: ${e.type}`)}}_call(e){return this.decode(e)}decode(e){return this.decode_chain(e).join("")}decode_chain(e){throw Error("`decode_chain` should be implemented in subclass.")}}class _y extends $t{decode_chain(e){const r=Ua(this.config.pattern);return r===null?e:e.map(n=>n.replaceAll(r,this.config.content))}}class yy extends $t{constructor(e){super(e),this.text_decoder=new TextDecoder}decode_chain(e){const r=[];let n=[];for(const a of e){let i=null;if(a.length===6&&a.startsWith("<0x")&&a.endsWith(">")){const s=parseInt(a.slice(3,5),16);isNaN(s)||(i=s)}if(i!==null)n.push(i);else{if(n.length>0){const s=this.text_decoder.decode(Uint8Array.from(n));r.push(s),n=[]}r.push(a)}}if(n.length>0){const a=this.text_decoder.decode(Uint8Array.from(n));r.push(a),n=[]}return r}}class wy extends $t{decode_chain(e){return[e.join("")]}}class vy extends $t{constructor(e){super(e),this.content=this.config.content,this.start=this.config.start,this.stop=this.config.stop}decode_chain(e){return e.map(r=>{let n=0;for(let i=0;i<this.start&&r[i]===this.content;++i)n=i+1;let a=r.length;for(let i=0;i<this.stop;++i){const s=r.length-i-1;if(r[s]===this.content){a=s;continue}else break}return r.slice(n,a)})}}class by extends $t{constructor(e){super(e),this.cleanup=e.cleanup}decode_chain(e){return e.map((r,n)=>(n!==0&&(r.startsWith(this.config.prefix)?r=r.replace(this.config.prefix,""):r=" "+r),this.cleanup&&(r=Hs(r)),r))}}class $y extends $t{constructor(e){super(e),this.byte_decoder=Q0,this.text_decoder=new TextDecoder("utf-8",{fatal:!1,ignoreBOM:!0}),this.end_of_word_suffix=null}convert_tokens_to_string(e){const r=e.join(""),n=new Uint8Array([...r].map(a=>this.byte_decoder[a]));return this.text_decoder.decode(n)}decode_chain(e){const r=[];let n=[];for(const a of e)this.added_tokens.find(i=>i.content===a)!==void 0?(n.length>0&&(r.push(this.convert_tokens_to_string(n)),n=[]),r.push(a)):n.push(a);return n.length>0&&r.push(this.convert_tokens_to_string(n)),r}}class xy extends $t{constructor(e){super(e),this.pad_token=this.config.pad_token,this.word_delimiter_token=this.config.word_delimiter_token,this.cleanup=this.config.cleanup}convert_tokens_to_string(e){if(e.length===0)return"";const r=[e[0]];for(let a=1;a<e.length;++a)e[a]!==r.at(-1)&&r.push(e[a]);let n=r.filter(a=>a!==this.pad_token).join("");return this.cleanup&&(n=Hs(n).replaceAll(this.word_delimiter_token," ").trim()),n}decode_chain(e){return[this.convert_tokens_to_string(e)]}}class Sy extends $t{constructor(e){super(e),this.decoders=e.decoders.map(r=>$t.fromConfig(r))}decode_chain(e){return this.decoders.reduce((r,n)=>n.decode_chain(r),e)}}class ky extends $t{constructor(e){super(e),this.suffix=this.config.suffix}decode_chain(e){return e.map((r,n)=>r.replaceAll(this.suffix,n===e.length-1?"":" "))}}class Ey extends $t{decode_chain(e){let r="";for(let n=1;n<e.length;n+=2)r+=e[n];return[r]}}class rf extends It{constructor(e){super(),this.addPrefixSpace=e.add_prefix_space,this.replacement=e.replacement,this.strRep=e.str_rep||this.replacement,this.prepend_scheme=e.prepend_scheme??"always"}pre_tokenize_text(e,{section_index:r=void 0}={}){let n=e.replaceAll(" ",this.strRep);return this.addPrefixSpace&&!n.startsWith(this.replacement)&&(this.prepend_scheme==="always"||this.prepend_scheme==="first"&&r===0)&&(n=this.strRep+n),[n]}}class Cy extends $t{constructor(e){super(e),this.addPrefixSpace=e.add_prefix_space,this.replacement=e.replacement}decode_chain(e){const r=[];for(let n=0;n<e.length;++n){let a=e[n].replaceAll(this.replacement," ");this.addPrefixSpace&&n==0&&a.startsWith(" ")&&(a=a.substring(1)),r.push(a)}return r}}class Ay extends bt{constructor(e){super(e),this.charsmap=e.precompiled_charsmap}normalize(e){return e=e.replace(/[\u0001-\u0008\u000B\u000E-\u001F\u007F\u008F\u009F]/gm,""),e=e.replace(/[\u0009\u000A\u000C\u000D\u1680\u200B\u200C\u200E\u200F\u2028\u2029\u2581\uFEFF\uFFFD]/gm," "),e.includes("\uFF5E")?e=e.split("\uFF5E").map(r=>r.normalize("NFKC")).join("\uFF5E"):e=e.normalize("NFKC"),e}}class Iy extends It{constructor(e){super(),this.tokenizers=e.pretokenizers.map(r=>It.fromConfig(r))}pre_tokenize_text(e,r){return this.tokenizers.reduce((n,a)=>a.pre_tokenize(n,r),[e])}}class Ty extends It{constructor(e){super()}pre_tokenize_text(e,r){return e.match(/\w+|[^\w\s]+/g)||[]}}class Oy extends It{constructor(e){super()}pre_tokenize_text(e,r){return q0(e)}}class My extends It{constructor(e){super(),this.config=e,this.pattern=Ua(this.config.pattern),this.content=this.config.content}pre_tokenize_text(e,r){return this.pattern===null?[e]:[e.replaceAll(this.pattern,this.config.content)]}}const zy=["bos_token","eos_token","unk_token","sep_token","pad_token","cls_token","mask_token"];function By(t,e,r,n){for(const a of Object.keys(t)){const i=e-t[a].length,s=r(a),o=new Array(i).fill(s);t[a]=n==="right"?lt(t[a],o):lt(o,t[a])}}function Ry(t,e){for(const r of Object.keys(t))t[r].length=e}class Se extends yt{return_token_type_ids=!1;_default_chat_template=`{% for message in messages %}{{'<|im_start|>' + message['role'] + '
' + message['content'] + '<|im_end|>' + '
'}}{% endfor %}{% if add_generation_prompt %}{{ '<|im_start|>assistant
' }}{% endif %}`;constructor(e,r){super(),this._tokenizer_config=r,this.normalizer=bt.fromConfig(e.normalizer),this.pre_tokenizer=It.fromConfig(e.pre_tokenizer),this.model=Cn.fromConfig(e.model,r),this.post_processor=Wa.fromConfig(e.post_processor),this.decoder=$t.fromConfig(e.decoder),this.special_tokens=[],this.all_special_ids=[],this.added_tokens=[];for(const n of e.added_tokens){const a=new K0(n);this.added_tokens.push(a),this.model.tokens_to_ids.set(a.content,a.id),this.model.vocab[a.id]=a.content,a.special&&(this.special_tokens.push(a.content),this.all_special_ids.push(a.id))}if(this.additional_special_tokens=r.additional_special_tokens??[],this.special_tokens.push(...this.additional_special_tokens),this.special_tokens=[...new Set(this.special_tokens)],this.decoder&&(this.decoder.added_tokens=this.added_tokens,this.decoder.end_of_word_suffix=this.model.end_of_word_suffix),this.added_tokens_regex=this.added_tokens.length>0?new RegExp(this.added_tokens.map(n=>`${n.lstrip?"\\s*":""}(${go(n.content)})${n.rstrip?"\\s*":""}`).join("|")):null,this.mask_token=this.getToken("mask_token"),this.mask_token_id=this.model.tokens_to_ids.get(this.mask_token),this.pad_token=this.getToken("pad_token","eos_token"),this.pad_token_id=this.model.tokens_to_ids.get(this.pad_token),this.sep_token=this.getToken("sep_token"),this.sep_token_id=this.model.tokens_to_ids.get(this.sep_token),this.unk_token=this.getToken("unk_token"),this.unk_token_id=this.model.tokens_to_ids.get(this.unk_token),this.model_max_length=r.model_max_length,this.remove_space=r.remove_space,this.clean_up_tokenization_spaces=r.clean_up_tokenization_spaces??!0,this.do_lowercase_and_remove_accent=r.do_lowercase_and_remove_accent??!1,this.padding_side="right",this.legacy=!1,this.chat_template=r.chat_template??null,Array.isArray(this.chat_template)){const n=Object.create(null);for(const{name:a,template:i}of this.chat_template){if(typeof a!="string"||typeof i!="string")throw new Error('Chat template must be a list of objects with "name" and "template" properties');n[a]=i}this.chat_template=n}this._compiled_template_cache=new Map}getToken(...e){for(const r of e){const n=this._tokenizer_config[r];if(n)if(typeof n=="object"){if(n.__type==="AddedToken")return n.content;throw Error(`Unknown token: ${n}`)}else return n}return null}static async from_pretrained(e,{progress_callback:r=null,config:n=null,cache_dir:a=null,local_files_only:i=!1,revision:s="main",legacy:o=null}={}){const l=await Xh(e,{progress_callback:r,config:n,cache_dir:a,local_files_only:i,revision:s,legacy:o});return new this(...l)}_call(e,{text_pair:r=null,add_special_tokens:n=!0,padding:a=!1,truncation:i=null,max_length:s=null,return_tensor:o=!0}={}){const l=Array.isArray(e);let d;if(l){if(e.length===0)throw Error("text array must be non-empty");if(r!==null){if(Array.isArray(r)){if(e.length!==r.length)throw Error("text and text_pair must have the same length")}else throw Error("text_pair must also be an array");d=e.map((u,h)=>this._encode_plus(u,r[h],{add_special_tokens:n}))}else d=e.map(u=>this._encode_plus(u,null,{add_special_tokens:n}))}else{if(e===null)throw Error("text may not be null");if(Array.isArray(r))throw Error("When specifying `text_pair`, since `text` is a string, `text_pair` must also be a string (i.e., not an array).");d=[this._encode_plus(e,r,{add_special_tokens:n})]}if(s===null?a==="max_length"?s=this.model_max_length:s=Et(d.map(u=>u.input_ids.length))[0]:i||console.warn("Truncation was not explicitly activated but `max_length` is provided a specific value, please use `truncation=true` to explicitly truncate examples to max length."),s=Math.min(s,this.model_max_length),a||i)for(let u=0;u<d.length;++u)d[u].input_ids.length!==s&&(d[u].input_ids.length>s?i&&Ry(d[u],s):a&&By(d[u],s,h=>h==="input_ids"?this.pad_token_id:0,this.padding_side));const c={};if(o){if(!(a&&i)&&d.some(h=>{for(const f of Object.keys(h))if(h[f].length!==d[0][f]?.length)return!0;return!1}))throw Error("Unable to create tensor, you should probably activate truncation and/or padding with 'padding=true' and 'truncation=true' to have batched tensors with the same length.");const u=[d.length,d[0].input_ids.length];for(const h of Object.keys(d[0]))c[h]=new re("int64",BigInt64Array.from(d.flatMap(f=>f[h]).map(BigInt)),u)}else{for(const u of Object.keys(d[0]))c[u]=d.map(h=>h[u]);if(!l)for(const u of Object.keys(c))c[u]=c[u][0]}return c}_encode_text(e){return e===null?null:(this.added_tokens_regex?e.split(this.added_tokens_regex).filter(r=>r):[e]).map((r,n)=>{if(this.added_tokens.find(a=>a.content===r)!==void 0)return r;{if(this.remove_space===!0&&(r=r.trim().split(/\s+/).join(" ")),this.do_lowercase_and_remove_accent&&(r=H0(r)),this.normalizer!==null&&(r=this.normalizer(r)),r.length===0)return[];const a=this.pre_tokenizer!==null?this.pre_tokenizer(r,{section_index:n}):[r];return this.model(a)}}).flat()}_encode_plus(e,r=null,{add_special_tokens:n=!0}={}){const a=this._encode_text(e),i=this._encode_text(r),s=this.post_processor?this.post_processor(a,i,{add_special_tokens:n}):{tokens:lt(a??[],i??[])},o=this.model.convert_tokens_to_ids(s.tokens),l={input_ids:o,attention_mask:new Array(o.length).fill(1)};return this.return_token_type_ids&&s.token_type_ids&&(l.token_type_ids=s.token_type_ids),l}encode(e,r=null,{add_special_tokens:n=!0}={}){const{input_ids:a}=this._encode_plus(e,r,{add_special_tokens:n});return a}batch_decode(e,r={}){return e instanceof re&&(e=e.tolist()),e.map(n=>this.decode(n,r))}decode(e,r={}){if(e instanceof re&&(e=Qh(e)),!Array.isArray(e)||e.length===0||!_o(e[0]))throw Error("token_ids must be a non-empty array of integers.");return this.decode_single(e,r)}decode_single(e,{skip_special_tokens:r=!1,clean_up_tokenization_spaces:n=null}){let a=this.model.convert_ids_to_tokens(e);r&&(a=a.filter(s=>!this.special_tokens.includes(s)));let i=this.decoder?this.decoder(a):a.join(" ");return this.decoder&&this.decoder.end_of_word_suffix&&(i=i.replaceAll(this.decoder.end_of_word_suffix," "),r&&(i=i.trim())),(n??this.clean_up_tokenization_spaces)&&(i=Hs(i)),i}get default_chat_template(){return this._warned_about_chat_template||(console.warn("No chat template is defined for this tokenizer - using a default chat template that implements the ChatML format. If the default is not appropriate for your model, please set `tokenizer.chat_template` to an appropriate template. See https://huggingface.co/docs/transformers/main/chat_templating for more information."),this._warned_about_chat_template=!0),this._default_chat_template}apply_chat_template(e,{chat_template:r=null,add_generation_prompt:n=!1,tokenize:a=!0,padding:i=!1,truncation:s=!1,max_length:o=null,return_tensor:l=!0,tokenizer_kwargs:d={},...c}={}){if(this.chat_template&&typeof this.chat_template=="object"||this.chat_template===null&&this.default_chat_template&&typeof this.default_chat_template=="object"){const g=this.chat_template??this.default_chat_template;if(r!==null&&Object.hasOwn(g,r))r=g[r];else if(r===null&&"default"in g)r=g.default;else if(r===null)throw Error(`This model has multiple chat templates with no default specified! Please either pass a chat template or the name of the template you wish to use to the 'chat_template' argument. Available template names are ${Object.keys(g).sort()}.`)}else r??=this.chat_template??this.default_chat_template;if(typeof r!="string")throw Error(`chat_template must be a string, but got ${typeof r}`);let u=this._compiled_template_cache.get(r);u===void 0&&(u=new F0(r),this._compiled_template_cache.set(r,u));const h=Object.create(null);for(const g of zy){const y=this.getToken(g);y&&(h[g]=y)}const f=u.render({messages:e,add_generation_prompt:n,...h,...c});return a?this._call(f,{add_special_tokens:!1,padding:i,truncation:s,max_length:o,return_tensor:l,...d}).input_ids:f}}class Dy extends Se{return_token_type_ids=!0}class Py extends Se{return_token_type_ids=!0}class Ny extends Se{return_token_type_ids=!0}class Uy extends Se{return_token_type_ids=!0}class Wy extends Se{return_token_type_ids=!0}class Ly extends Se{return_token_type_ids=!0}class Fy extends Se{return_token_type_ids=!0}class Vy extends Se{return_token_type_ids=!0}class Hy extends Se{return_token_type_ids=!0}class Gy extends Se{}class qy extends Se{}class jy extends Se{return_token_type_ids=!0;constructor(e,r){super(e,r),console.warn('WARNING: `XLMTokenizer` is not yet supported by Hugging Face\'s "fast" tokenizers library. Therefore, you may experience slightly inaccurate results.')}}class Ky extends Se{return_token_type_ids=!0}class Yy extends Se{}class nf extends Se{_default_chat_template='{% for message in messages %}" "{{ message.content }}{{ eos_token }}" "{% endfor %}'}class Xy extends Se{}class af extends Se{constructor(e,r){super(e,r),this.languageRegex=/^[a-z]{2}_[A-Z]{2}$/,this.language_codes=this.special_tokens.filter(n=>this.languageRegex.test(n)),this.lang_to_token=n=>n}_build_translation_inputs(e,r,n){return Gs(this,e,r,n)}}class Qy extends af{}class Zy extends Se{}class Jy extends nf{constructor(e,r){const n=".,!?\u2026\u3002\uFF0C\u3001\u0964\u06D4\u060C",a=e.pre_tokenizer?.pretokenizers[0]?.pattern;a&&a.Regex===` ?[^(\\s|[${n}])]+`&&(a.Regex=` ?[^\\s${n}]+`),super(e,r)}}const La="\u2581";class sf extends Se{_default_chat_template=`{% if messages[0]['role'] == 'system' %}{% set loop_messages = messages[1:] %}{% set system_message = messages[0]['content'] %}{% elif USE_DEFAULT_PROMPT == true and not '<<SYS>>' in messages[0]['content'] %}{% set loop_messages = messages %}{% set system_message = 'DEFAULT_SYSTEM_MESSAGE' %}{% else %}{% set loop_messages = messages %}{% set system_message = false %}{% endif %}{% for message in loop_messages %}{% if (message['role'] == 'user') != (loop.index0 % 2 == 0) %}{{ raise_exception('Conversation roles must alternate user/assistant/user/assistant/...') }}{% endif %}{% if loop.index0 == 0 and system_message != false %}{% set content = '<<SYS>>
' + system_message + '
<</SYS>>

' + message['content'] %}{% else %}{% set content = message['content'] %}{% endif %}{% if message['role'] == 'user' %}{{ bos_token + '[INST] ' + content.strip() + ' [/INST]' }}{% elif message['role'] == 'system' %}{{ '<<SYS>>
' + content.strip() + '
<</SYS>>

' }}{% elif message['role'] == 'assistant' %}{{ ' '  + content.strip() + ' ' + eos_token }}{% endif %}{% endfor %}`;DEFAULT_SYSTEM_PROMPT=`You are a helpful, respectful and honest assistant. Always answer as helpfully as possible, while being safe. Your answers should not include any harmful, unethical, racist, sexist, toxic, dangerous, or illegal content. Please ensure that your responses are socially unbiased and positive in nature.

If a question does not make any sense, or is not factually coherent, explain why instead of answering something not correct. If you don't know the answer to a question, please don't share false information.`;constructor(e,r){super(e,r),this.use_default_system_prompt=r.use_default_system_prompt??!1,this.legacy=r.legacy??!0,this.legacy||(this.normalizer=null,this.pre_tokenizer=new rf({replacement:La,add_prefix_space:!0,prepend_scheme:"first"}))}_encode_text(e){if(e===null)return null;if(this.legacy||e.length===0)return super._encode_text(e);let r=super._encode_text(La+e.replaceAll(La," "));return r.length>1&&r[0]===La&&this.special_tokens.includes(r[1])&&(r=r.slice(1)),r}get default_chat_template(){return super.default_chat_template.replaceAll("USE_DEFAULT_PROMPT",this.use_default_system_prompt?"true":"false").replaceAll("DEFAULT_SYSTEM_MESSAGE",this.DEFAULT_SYSTEM_PROMPT.replaceAll(`
`,"\\n").replaceAll("'","\\'"))}}class ew extends sf{}class tw extends Se{}class rw extends Se{}class nw extends Se{}class aw extends Se{}class iw extends Se{}class sw extends Se{}class ow extends Se{_default_chat_template=`{% if messages[0]['role'] == 'system' %}{{ raise_exception('System role not supported') }}{% endif %}{% for message in messages %}{% if (message['role'] == 'user') != (loop.index0 % 2 == 0) %}{{ raise_exception('Conversation roles must alternate user/assistant/user/assistant/...') }}{% endif %}{% if (message['role'] == 'assistant') %}{% set role = 'model' %}{% else %}{% set role = message['role'] %}{% endif %}{{ '<start_of_turn>' + role + '
' + message['content'] | trim + '<end_of_turn>
' }}{% endfor %}{% if add_generation_prompt %}{{'<start_of_turn>model
'}}{% endif %}`}class lw extends Se{}function Gs(t,e,r,n){if(!("language_codes"in t)||!Array.isArray(t.language_codes))throw new Error("Tokenizer must have `language_codes` attribute set and it should be an array of language ids.");if(!("languageRegex"in t)||!(t.languageRegex instanceof RegExp))throw new Error("Tokenizer must have `languageRegex` attribute set and it should be a regular expression.");if(!("lang_to_token"in t)||typeof t.lang_to_token!="function")throw new Error("Tokenizer must have `lang_to_token` attribute set and it should be a function.");const a=n.src_lang,i=n.tgt_lang;if(!t.language_codes.includes(i))throw new Error(`Target language code "${i}" is not valid. Must be one of: {${t.language_codes.join(", ")}}`);if(a!==void 0){if(!t.language_codes.includes(a))throw new Error(`Source language code "${a}" is not valid. Must be one of: {${t.language_codes.join(", ")}}`);for(const s of t.post_processor.config.single)if("SpecialToken"in s&&t.languageRegex.test(s.SpecialToken.id)){s.SpecialToken.id=t.lang_to_token(a);break}}return n.forced_bos_token_id=t.model.convert_tokens_to_ids([t.lang_to_token(i)])[0],t._call(e,r)}class uw extends Se{constructor(e,r){super(e,r),this.languageRegex=/^[a-z]{3}_[A-Z][a-z]{3}$/,this.language_codes=this.special_tokens.filter(n=>this.languageRegex.test(n)),this.lang_to_token=n=>n}_build_translation_inputs(e,r,n){return Gs(this,e,r,n)}}class dw extends Se{constructor(e,r){super(e,r),this.languageRegex=/^__[a-z]{2,3}__$/,this.language_codes=this.special_tokens.filter(n=>this.languageRegex.test(n)).map(n=>n.slice(2,-2)),this.lang_to_token=n=>`__${n}__`}_build_translation_inputs(e,r,n){return Gs(this,e,r,n)}}const of=[["en","english"],["zh","chinese"],["de","german"],["es","spanish"],["ru","russian"],["ko","korean"],["fr","french"],["ja","japanese"],["pt","portuguese"],["tr","turkish"],["pl","polish"],["ca","catalan"],["nl","dutch"],["ar","arabic"],["sv","swedish"],["it","italian"],["id","indonesian"],["hi","hindi"],["fi","finnish"],["vi","vietnamese"],["he","hebrew"],["uk","ukrainian"],["el","greek"],["ms","malay"],["cs","czech"],["ro","romanian"],["da","danish"],["hu","hungarian"],["ta","tamil"],["no","norwegian"],["th","thai"],["ur","urdu"],["hr","croatian"],["bg","bulgarian"],["lt","lithuanian"],["la","latin"],["mi","maori"],["ml","malayalam"],["cy","welsh"],["sk","slovak"],["te","telugu"],["fa","persian"],["lv","latvian"],["bn","bengali"],["sr","serbian"],["az","azerbaijani"],["sl","slovenian"],["kn","kannada"],["et","estonian"],["mk","macedonian"],["br","breton"],["eu","basque"],["is","icelandic"],["hy","armenian"],["ne","nepali"],["mn","mongolian"],["bs","bosnian"],["kk","kazakh"],["sq","albanian"],["sw","swahili"],["gl","galician"],["mr","marathi"],["pa","punjabi"],["si","sinhala"],["km","khmer"],["sn","shona"],["yo","yoruba"],["so","somali"],["af","afrikaans"],["oc","occitan"],["ka","georgian"],["be","belarusian"],["tg","tajik"],["sd","sindhi"],["gu","gujarati"],["am","amharic"],["yi","yiddish"],["lo","lao"],["uz","uzbek"],["fo","faroese"],["ht","haitian creole"],["ps","pashto"],["tk","turkmen"],["nn","nynorsk"],["mt","maltese"],["sa","sanskrit"],["lb","luxembourgish"],["my","myanmar"],["bo","tibetan"],["tl","tagalog"],["mg","malagasy"],["as","assamese"],["tt","tatar"],["haw","hawaiian"],["ln","lingala"],["ha","hausa"],["ba","bashkir"],["jw","javanese"],["su","sundanese"]],Fa=new Map(of),cw=new Map([...of.map(([t,e])=>[e,t]),["burmese","my"],["valencian","ca"],["flemish","nl"],["haitian","ht"],["letzeburgesch","lb"],["pushto","ps"],["panjabi","pa"],["moldavian","ro"],["moldovan","ro"],["sinhalese","si"],["castilian","es"]]);class pw extends Se{_default_chat_template='{% for message in messages %}" "{{ message.content }}{{ eos_token }}" "{% endfor %}';_decode_asr(e,{return_timestamps:r=!1,return_language:n=!1,time_precision:a=null,force_full_sequences:i=!0}={}){if(a===null)throw Error("Must specify time_precision");let s=null;const o=r==="word";function l(){return{language:s,timestamp:[null,null],text:""}}const d=[];let c=l(),u=0;const h=this.model.convert_tokens_to_ids(["<|notimestamps|>"])[0]+1;let f=[],g=[],y=!1,w=null;const v=new Set(this.all_special_ids);for(const x of e){const A=x.tokens,T=o?x.token_timestamps:null;let B=null,U=h;if("stride"in x){const[O,G,ne]=x.stride;if(u-=G,w=O-ne,G&&(U=G/a+h),ne)for(let q=A.length-1;q>=0;--q){const D=A[q];if(D>=h){if(B!==null&&(D-h)*a<w)break;B=D}}}let H=[],K=[];for(let O=0;O<A.length;++O){const G=A[O];if(v.has(G)){const ne=this.decode([G]),q=Fa.get(ne.slice(2,-2));if(q!==void 0){if(s!==null&&q!==s&&!r){f.push(H);const D=this.findLongestCommonSequence(f)[0],L=this.decode(D);c.text=L,d.push(c),f=[],H=[],c=l()}s=c.language=q}}else if(G>=h){const ne=(G-h)*a+u,q=nn(ne,2);if(B!==null&&G>=B)y=!0;else if(y||f.length>0&&G<U)y=!1;else if(c.timestamp[0]===null)c.timestamp[0]=q;else if(q!==c.timestamp[0]){c.timestamp[1]=q,f.push(H),o&&g.push(K);const[D,L]=this.findLongestCommonSequence(f,g),V=this.decode(D);c.text=V,o&&(c.words=this.collateWordTimestamps(D,L,s)),d.push(c),f=[],H=[],g=[],K=[],c=l()}}else if(H.push(G),o){let ne=nn(T[O]+u,2),q;O+1<T.length?q=nn(T[O+1]+u,2):q=null,K.push([ne,q])}}if("stride"in x){const[O,G,ne]=x.stride;u+=O-ne}H.length>0?(f.push(H),o&&g.push(K)):f.every(O=>O.length===0)&&(c=l(),f=[],H=[],g=[],K=[])}if(f.length>0){if(i&&r)throw new Error("Whisper did not predict an ending timestamp, which can happen if audio is cut off in the middle of a word. Also make sure WhisperTimeStampLogitsProcessor was used during generation.");const[x,A]=this.findLongestCommonSequence(f,g),T=this.decode(x);c.text=T,o&&(c.words=this.collateWordTimestamps(x,A,s)),d.push(c)}let S=Object.create(null);const E=d.map(x=>x.text).join("");if(r||n){for(let x=0;x<d.length;++x){const A=d[x];r||delete A.timestamp,n||delete A.language}if(o){const x=[];for(const A of d)for(const T of A.words)x.push(T);S={chunks:x}}else S={chunks:d}}return[E,S]}findLongestCommonSequence(e,r=null){let n=e[0],a=n.length,i=[];const s=Array.isArray(r)&&r.length>0;let o=s?[]:null,l=s?r[0]:null;for(let d=1;d<e.length;++d){const c=e[d];let u=0,h=[a,a,0,0];const f=c.length;for(let x=1;x<a+f;++x){const A=x/1e4,T=Math.max(0,a-x),B=Math.min(a,a+f-x),U=n.slice(T,B),H=Math.max(0,x-a),K=Math.min(f,x),O=c.slice(H,K);if(U.length!==O.length)throw new Error("There is a bug within whisper `decode_asr` function, please report it. Dropping to prevent bad inference.");const G=U.filter((q,D)=>q===O[D]).length,ne=G/x+A;G>1&&ne>u&&(u=ne,h=[T,B,H,K])}const[g,y,w,v]=h,S=Math.floor((y+g)/2),E=Math.floor((v+w)/2);i.push(...n.slice(0,S)),n=c.slice(E),a=n.length,s&&(o.push(...l.slice(0,S)),l=r[d].slice(E))}return i.push(...n),s?(o.push(...l),[i,o]):[i,[]]}collateWordTimestamps(e,r,n){const[a,i,s]=this.combineTokensIntoWords(e,n),o=[];for(let l=0;l<a.length;++l){const d=s[l];o.push({text:a[l],timestamp:[r[d.at(0)][0],r[d.at(-1)][1]]})}return o}combineTokensIntoWords(e,r,n=`"'\u201C\xA1\xBF([{-`,a=`"'.\u3002,\uFF0C!\uFF01?\uFF1F:\uFF1A\u201D)]}\u3001`){r=r??"english";let i,s,o;return["chinese","japanese","thai","lao","myanmar"].includes(r)?[i,s,o]=this.splitTokensOnUnicode(e):[i,s,o]=this.splitTokensOnSpaces(e),this.mergePunctuations(i,s,o,n,a)}decode(e,r){let n;return r&&r.decode_with_timestamps?(e instanceof re&&(e=Qh(e)),n=this.decodeWithTimestamps(e,r)):n=super.decode(e,r),n}decodeWithTimestamps(e,r){const n=r?.time_precision??.02,a=Array.from(this.all_special_ids).at(-1)+1;let i=[[]];for(const s of e)if(s>=a){const o=nn((s-a)*n,2);i.push(`<|${o}|>`),i.push([])}else i[i.length-1].push(s);return i=i.map(s=>typeof s=="string"?s:super.decode(s,r)),i.join("")}splitTokensOnUnicode(e){const r=this.decode(e,{decode_with_timestamps:!0}),n="\uFFFD",a=[],i=[],s=[];let o=[],l=[],d=0;for(let c=0;c<e.length;++c){const u=e[c];o.push(u),l.push(c);const h=this.decode(o,{decode_with_timestamps:!0});(!h.includes(n)||r[d+h.indexOf(n)]===n)&&(a.push(h),i.push(o),s.push(l),o=[],l=[],d+=h.length)}return[a,i,s]}splitTokensOnSpaces(e){const[r,n,a]=this.splitTokensOnUnicode(e),i=[],s=[],o=[],l=new RegExp(`^[${En}]$`,"gu");for(let d=0;d<r.length;++d){const c=r[d],u=n[d],h=a[d],f=u[0]>=this.model.tokens_to_ids.get("<|endoftext|>"),g=c.startsWith(" "),y=c.trim(),w=l.test(y);if(f||g||w||i.length===0)i.push(c),s.push(u),o.push(h);else{const v=i.length-1;i[v]+=c,s[v].push(...u),o[v].push(...h)}}return[i,s,o]}mergePunctuations(e,r,n,a,i){const s=structuredClone(e),o=structuredClone(r),l=structuredClone(n);let d=s.length-2,c=s.length-1;for(;d>=0;)s[d].startsWith(" ")&&a.includes(s[d].trim())?(s[c]=s[d]+s[c],o[c]=lt(o[d],o[c]),l[c]=lt(l[d],l[c]),s[d]="",o[d]=[],l[d]=[]):c=d,--d;for(d=0,c=1;c<s.length;)!s[d].endsWith(" ")&&i.includes(s[c])?(s[d]+=s[c],o[d]=lt(o[d],o[c]),l[d]=lt(l[d],l[c]),s[c]="",o[c]=[],l[c]=[]):d=c,++c;return[s.filter(u=>u),o.filter(u=>u.length>0),l.filter(u=>u.length>0)]}get_decoder_prompt_ids({language:e=null,task:r=null,no_timestamps:n=!0}={}){const a=[];if(e){e=e.toLowerCase();let i=cw.get(e);if(i===void 0)if(Fa.has(e))i=e;else{const o=e.length===2?Fa.keys():Fa.values();throw new Error(`Language "${e}" is not supported. Must be one of: ${JSON.stringify(o)}`)}const s=this.model.tokens_to_ids.get(`<|${i}|>`);if(s===void 0)throw new Error(`Unable to find language "${i}" in model vocabulary. Please report this issue at https://github.com/xenova/transformers.js/issues/new/choose.`);a.push(s)}else a.push(null);if(r){if(r=r.toLowerCase(),r!=="transcribe"&&r!=="translate")throw new Error(`Task "${r}" is not supported. Must be one of: ["transcribe", "translate"]`);const i=this.model.tokens_to_ids.get(`<|${r}|>`);if(i===void 0)throw new Error(`Unable to find task "${r}" in model vocabulary. Please report this issue at https://github.com/xenova/transformers.js/issues/new/choose.`);a.push(i)}else a.push(null);if(n){const i=this.model.tokens_to_ids.get("<|notimestamps|>");if(i===void 0)throw new Error('Unable to find "<|notimestamps|>" in model vocabulary. Please report this issue at https://github.com/xenova/transformers.js/issues/new/choose.');a.push(i)}return a.map((i,s)=>[s+1,i]).filter(i=>i[1]!==null)}}class hw extends Se{}class fw extends Se{}class mw extends Se{}class gw extends Se{constructor(e,r){super(e,r),this.languageRegex=/^(>>\w+<<)\s*/g,this.supported_language_codes=this.model.vocab.filter(n=>this.languageRegex.test(n)),console.warn('WARNING: `MarianTokenizer` is not yet supported by Hugging Face\'s "fast" tokenizers library. Therefore, you may experience slightly inaccurate results.')}_encode_text(e){if(e===null)return null;const[r,...n]=e.trim().split(this.languageRegex);if(n.length===0)return super._encode_text(r);if(n.length===2){const[a,i]=n;return this.supported_language_codes.includes(a)||console.warn(`Unsupported language code "${a}" detected, which may lead to unexpected behavior. Should be one of: ${JSON.stringify(this.supported_language_codes)}`),lt([a],super._encode_text(i))}}}class _w extends Se{}class lf extends Se{_default_chat_template="{% for message in messages %}{% if message['role'] == 'user' %}{{ ' ' }}{% endif %}{{ message['content'] }}{% if not loop.last %}{{ '  ' }}{% endif %}{% endfor %}{{ eos_token }}"}class yw extends lf{}class ww extends Se{}class vw extends Se{}class bw extends Se{constructor(e,r){super(e,r),this.decoder=new Ey({})}}class $w extends Se{}class ut{static TOKENIZER_CLASS_MAPPING={T5Tokenizer:Yy,DistilBertTokenizer:Gy,CamembertTokenizer:qy,DebertaTokenizer:Wy,DebertaV2Tokenizer:Ly,BertTokenizer:Dy,HerbertTokenizer:Fy,ConvBertTokenizer:Vy,RoFormerTokenizer:Hy,XLMTokenizer:jy,ElectraTokenizer:Ky,MobileBertTokenizer:Ny,SqueezeBertTokenizer:Uy,AlbertTokenizer:Py,GPT2Tokenizer:nf,BartTokenizer:Xy,MBartTokenizer:af,MBart50Tokenizer:Qy,RobertaTokenizer:Zy,WhisperTokenizer:pw,CodeGenTokenizer:hw,CLIPTokenizer:fw,SiglipTokenizer:mw,MarianTokenizer:gw,BloomTokenizer:Jy,NllbTokenizer:uw,M2M100Tokenizer:dw,LlamaTokenizer:sf,CodeLlamaTokenizer:ew,XLMRobertaTokenizer:tw,MPNetTokenizer:rw,FalconTokenizer:nw,GPTNeoXTokenizer:aw,EsmTokenizer:iw,Wav2Vec2CTCTokenizer:_w,BlenderbotTokenizer:lf,BlenderbotSmallTokenizer:yw,SpeechT5Tokenizer:ww,NougatTokenizer:vw,VitsTokenizer:bw,Qwen2Tokenizer:sw,GemmaTokenizer:ow,Grok1Tokenizer:lw,CohereTokenizer:$w,PreTrainedTokenizer:Se};static async from_pretrained(e,{quantized:r=!0,progress_callback:n=null,config:a=null,cache_dir:i=null,local_files_only:s=!1,revision:o="main",legacy:l=null}={}){const[d,c]=await Xh(e,{quantized:r,progress_callback:n,config:a,cache_dir:i,local_files_only:s,revision:o,legacy:l}),u=c.tokenizer_class?.replace(/Fast$/,"")??"PreTrainedTokenizer";let h=this.TOKENIZER_CLASS_MAPPING[u];return h||(console.warn(`Unknown tokenizer class "${u}", attempting to construct from base class.`),h=Se),new h(d,c)}}async function xw(t,e){return await Br(t,"config.json",!0,e)}class Sw{constructor(e){this.model_type=null,this.is_encoder_decoder=!1,Object.assign(this,e)}static async from_pretrained(e,{progress_callback:r=null,config:n=null,cache_dir:a=null,local_files_only:i=!1,revision:s="main"}={}){let o=n??await xw(e,{progress_callback:r,config:n,cache_dir:a,local_files_only:i,revision:s});return new this(o)}}class qr{static async from_pretrained(...e){return Sw.from_pretrained(...e)}}const Va=Object.freeze({cpu:"cpu",gpu:"gpu",wasm:"wasm",webgpu:"webgpu"});async function kw(){try{return(await navigator.gpu.requestAdapter()).features.has("shader-f16")}catch{return!1}}const uf=await kw(),Ht=Object.freeze({fp32:"fp32",fp16:"fp16",q8:"q8",int8:"int8",uint8:"uint8"}),df=uf?Ht.fp16:Ht.fp32,Ew=Object.freeze({[Va.cpu]:Ht.q8,[Va.gpu]:df,[Va.wasm]:Ht.q8,[Va.webgpu]:df}),cf=Object.freeze({[Ht.fp32]:"",[Ht.fp16]:"_fp16",[Ht.int8]:"_int8",[Ht.uint8]:"_uint8",[Ht.q8]:"_quantized"});class pf extends yt{constructor(){super(),this.processors=[]}push(e){this.processors.push(e)}extend(e){this.processors.push(...e)}_call(e,r){for(let n of r)this.processors.forEach(a=>a(e,n))}[Symbol.iterator](){return this.processors.values()}}class Xt extends yt{_call(e,r){throw Error("`_call` should be implemented in a subclass")}}class Cw extends Xt{constructor(e){super(),this.force_token_map=Object.fromEntries(e??[])}_call(e,r){let n=this.force_token_map[e.length];return fg(n)&&(r.data.fill(-1/0),r.data[n]=0),r}}class Aw extends Xt{constructor(e){super(),this.bos_token_id=e}_call(e,r){return e.length===1&&(r.data.fill(-1/0),r.data[this.bos_token_id]=0),r}}class Iw extends Xt{constructor(e,r){super(),this.max_length=e,this.forced_eos_token_id=r}_call(e,r){}}class Tw extends Xt{constructor(e,r){super(),this.begin_suppress_tokens=e,this.begin_index=r}_call(e,r){if(e.length===this.begin_index)for(let n of this.begin_suppress_tokens)r.data[n]=-1/0;return r}}class Ow extends Xt{constructor(e){super(),this.eos_token_id=e.eos_token_id,this.no_timestamps_token_id=e.no_timestamps_token_id,this.timestamp_begin=this.no_timestamps_token_id+1,this.begin_index=(e.forced_decoder_ids||[]).length+2,e.forced_decoder_ids.slice(-1)[0][1]===this.no_timestamps_token_id&&(this.begin_index-=1),this.max_initial_timestamp_index=e.max_initial_timestamp_index}_call(e,r){const n=r.data;if(n[this.no_timestamps_token_id]=-1/0,e.length===this.begin_index-1)return n.fill(-1/0),n[this.timestamp_begin]=0,r;const a=e.slice(this.begin_index),i=a.length>=1&&a[a.length-1]>=this.timestamp_begin,s=a.length<2||a[a.length-2]>=this.timestamp_begin;if(i&&(s?n.subarray(this.timestamp_begin).fill(-1/0):n.subarray(0,this.eos_token_id).fill(-1/0)),e.length===this.begin_index&&this.max_initial_timestamp_index!==null){const c=this.timestamp_begin+this.max_initial_timestamp_index;n.subarray(c+1).fill(-1/0)}const o=Ag(n),l=Math.log(o.subarray(this.timestamp_begin).map(Math.exp).reduce((c,u)=>c+u)),d=Et(o.subarray(0,this.timestamp_begin))[0];return l>d&&n.subarray(0,this.timestamp_begin).fill(-1/0),r}}class Mw extends Xt{constructor(e){super(),this.no_repeat_ngram_size=e}getNgrams(e){const r=e.length,n=[];for(let i=0;i<r+1-this.no_repeat_ngram_size;++i){const s=[];for(let o=0;o<this.no_repeat_ngram_size;++o)s.push(e[i+o]);n.push(s)}const a=new Map;for(const i of n){const s=i.slice(0,i.length-1),o=JSON.stringify(s),l=a.get(o)??[];l.push(i[i.length-1]),a.set(o,l)}return a}getGeneratedNgrams(e,r){const n=r.slice(r.length+1-this.no_repeat_ngram_size,r.length);return e.get(JSON.stringify(n))??[]}calcBannedNgramTokens(e){const r=[];if(e.length+1<this.no_repeat_ngram_size)return r;{const n=this.getNgrams(e);return this.getGeneratedNgrams(n,e)}}_call(e,r){const n=this.calcBannedNgramTokens(e);for(const a of n)r.data[a]=-1/0;return r}}class zw extends Xt{constructor(e){super(),this.penalty=e}_call(e,r){for(const n of e)r.data[n]<0?r.data[n]*=this.penalty:r.data[n]/=this.penalty;return r}}class Bw extends Xt{constructor(e,r){super(),this.min_length=e,this.eos_token_id=Array.isArray(r)?r:[r]}_call(e,r){if(e.length<this.min_length)for(const n of this.eos_token_id)r.data[n]=-1/0;return r}}class Rw extends Xt{constructor(e,r,n){super(),this.prompt_length_to_skip=e,this.min_new_tokens=r,this.eos_token_id=Array.isArray(n)?n:[n]}_call(e,r){if(e.length-this.prompt_length_to_skip<this.min_new_tokens)for(const n of this.eos_token_id)r.data[n]=-1/0;return r}}class Dw extends Xt{constructor(e,r){super(),this.bad_words_ids=e,this.eos_token_id=Array.isArray(r)?r:[r]}_call(e,r){for(const n of this.bad_words_ids){let a=!0;for(let i=1;i<=n.length-1&&n.length<e.length;++i)if(n.at(-i-1)!==e.at(-i)){a=!1;break}a&&(r.data[n.at(-1)]=-1/0)}return r}}const Pw=class{constructor(t={}){this.max_length=t.max_length??20,this.max_new_tokens=t.max_new_tokens??null,this.min_length=t.min_length??0,this.min_new_tokens=t.min_new_tokens??null,this.early_stopping=t.early_stopping??!1,this.max_time=t.max_time??null,this.do_sample=t.do_sample??!1,this.num_beams=t.num_beams??1,this.num_beam_groups=t.num_beam_groups??1,this.penalty_alpha=t.penalty_alpha??null,this.use_cache=t.use_cache??!0,this.temperature=t.temperature??1,this.top_k=t.top_k??50,this.top_p=t.top_p??1,this.typical_p=t.typical_p??1,this.epsilon_cutoff=t.epsilon_cutoff??0,this.eta_cutoff=t.eta_cutoff??0,this.diversity_penalty=t.diversity_penalty??0,this.repetition_penalty=t.repetition_penalty??1,this.encoder_repetition_penalty=t.encoder_repetition_penalty??1,this.length_penalty=t.length_penalty??1,this.no_repeat_ngram_size=t.no_repeat_ngram_size??0,this.bad_words_ids=t.bad_words_ids??null,this.force_words_ids=t.force_words_ids??null,this.renormalize_logits=t.renormalize_logits??!1,this.constraints=t.constraints??null,this.forced_bos_token_id=t.forced_bos_token_id??null,this.forced_eos_token_id=t.forced_eos_token_id??null,this.remove_invalid_values=t.remove_invalid_values??!1,this.exponential_decay_length_penalty=t.exponential_decay_length_penalty??null,this.suppress_tokens=t.suppress_tokens??null,this.begin_suppress_tokens=t.begin_suppress_tokens??null,this.forced_decoder_ids=t.forced_decoder_ids??null,this.num_return_sequences=t.num_return_sequences??1,this.output_attentions=t.output_attentions??!1,this.output_hidden_states=t.output_hidden_states??!1,this.output_scores=t.output_scores??!1,this.return_dict_in_generate=t.return_dict_in_generate??!1,this.pad_token_id=t.pad_token_id??null,this.bos_token_id=t.bos_token_id??null,this.eos_token_id=t.eos_token_id??null,this.encoder_no_repeat_ngram_size=t.encoder_no_repeat_ngram_size??0,this.decoder_start_token_id=t.decoder_start_token_id??null,this.generation_kwargs=t.generation_kwargs??{}}};class Ha extends yt{constructor(e){super(),this.generation_config=e}_call(e,r=-1){return this.sample(e,r)}sample(e,r){throw Error("sample should be implemented in subclasses.")}getLogits(e,r){let n=e.dims.at(-1),a=e.data;if(r===-1)a=a.slice(-n);else{let i=r*n;a=a.slice(i,i+n)}return this.generation_config.temperature>0&&(a=a.map(i=>i/this.generation_config.temperature)),a}randomSelect(e){let r=e.reduce((a,i)=>a+i,0),n=Math.random()*r;for(let a=0;a<e.length;++a)if(n-=e[a],n<=0)return a;return 0}static getSampler(e){if(e.do_sample)return new Uw(e);if(e.num_beams>1)return new Ww(e);if(e.num_return_sequences>1)throw Error(`num_return_sequences has to be 1 when doing greedy search, but is ${e.num_return_sequences}.`);return new Nw(e)}}class Nw extends Ha{sample(e,r=-1){let n=this.getLogits(e,r);return[[Et(n)[1],0]]}}class Uw extends Ha{sample(e,r=-1){let n=e.dims.at(-1);this.generation_config.top_k>0&&(n=Math.min(this.generation_config.top_k,n));const a=this.getLogits(e,r),i=Rr(a,n),s=dt(i.map(o=>o[1]));return Array.from({length:this.generation_config.num_beams},()=>{const o=this.randomSelect(s);return[i[o][0],Math.log(s[o])]})}}class Ww extends Ha{sample(e,r=-1){let n=e.dims.at(-1);this.generation_config.top_k>0&&(n=Math.min(this.generation_config.top_k,n));const a=this.getLogits(e,r),i=Rr(a,n),s=dt(i.map(o=>o[1]));return Array.from({length:this.generation_config.num_beams},(o,l)=>[i[l][0],Math.log(s[l])])}}const ke={EncoderOnly:0,EncoderDecoder:1,Seq2Seq:2,Vision2Seq:3,DecoderOnly:4,MaskGeneration:5},Ga=new Map,hf=new Map,An=new Map;async function pr(t,e,r){const n=o0(r.device),a=r.dtype??Ew[n[0]];if(cf.hasOwnProperty(a)){if(a===Ht.fp16&&!uf)throw new Error("The device does not support fp16.")}else throw new Error(`Invalid dtype: ${a}. Should be one of: ${Object.keys(Ht).join(", ")}`);const i=cf[a],s=`onnx/${e}${i}.onnx`,o=await Ci(t,s,!0,r),l=r.session_options??{};if(l.executionProviders??=n,l.externalData!==void 0)for(let d=0;d<l.externalData.length;++d){const c=l.externalData[d];if(typeof c.data=="string"){const u=await Ci(t,c.data,!0,r);c.data=u}}return await l0(o,l)}function Lw(t,e){const r=Object.create(null),n=[];for(const s of t.inputNames){const o=e[s];if(!(o instanceof re)){n.push(s);continue}r[s]=u0()?o.clone():o}if(n.length>0)throw new Error(`An error occurred during model execution: "Missing the following inputs: ${n.join(", ")}.`);const a=Object.keys(e).length,i=t.inputNames.length;if(a>i){let s=Object.keys(e).filter(o=>!t.inputNames.includes(o));console.warn(`WARNING: Too many inputs were provided (${a} > ${i}). The following inputs will be ignored: "${s.join(", ")}".`)}return r}async function jr(t,e){const r=Lw(t,e);try{const n=Object.fromEntries(Object.entries(r).map(([i,s])=>[i,s.ort_tensor]));let a=await t.run(n);a=ff(a);for(const[i,s]of Object.entries(r))i.startsWith("past_key_values")&&s.dispose();return a}catch(n){throw console.error(`An error occurred during model execution: "${n}".`),console.error("Inputs given to model:",r),n}}function ff(t){for(let e in t)Ph(t[e])?t[e]=new re(t[e]):typeof t[e]=="object"&&ff(t[e]);return t}function Fw(t){if(t instanceof re)return t;if(t.length===0)throw Error("items must be non-empty");if(Array.isArray(t[0])){if(t.some(e=>e.length!==t[0].length))throw Error("Unable to create tensor, you should probably activate truncation and/or padding with 'padding=True' and/or 'truncation=True' to have batched tensors with the same length.");return new re("int64",BigInt64Array.from(t.flat().map(e=>BigInt(e))),[t.length,t[0].length])}else return new re("int64",BigInt64Array.from(t.map(e=>BigInt(e))),[1,t.length])}function qs(t,e){let r=t.config.pad_token_id??null,n=t.config.eos_token_id??null;_o(n)&&(n=[n]);let a=e.indexOf(r)!==-1,i=n===null||!n.includes(r);if(a&&i){let s=BigInt64Array.from(e.data.map(o=>o!=r));return new re("int64",s,e.dims)}else return _0(e)}function mf(t,e,r){if(!t.inputNames.includes("position_ids"))return;const n=new BigInt64Array(e.attention_mask.data.length);for(let a=0;a<e.attention_mask.dims[0];++a){let i=a*e.attention_mask.dims[1],s=BigInt(0);for(let o=0;o<e.attention_mask.dims[1];++o){const l=i+o;e.attention_mask.data[l]===0n?n[l]=BigInt(1):(n[l]=s,s+=e.attention_mask.data[l])}}e.position_ids=new re("int64",n,e.attention_mask.dims),r&&(e.position_ids=e.position_ids.slice(null,-1).unsqueeze_(-1))}function js(t){return new re("bool",[t],[1])}async function Vw(t,e){let{encoder_outputs:r,past_key_values:n}=e;r||(r=(await In(t,e)).last_hidden_state);let a={input_ids:e.decoder_input_ids,encoder_hidden_states:r};const i=!!n;t.decoder_merged_session.inputNames.includes("use_cache_branch")&&(a.use_cache_branch=js(i)),t.decoder_merged_session.inputNames.includes("encoder_attention_mask")&&(a.encoder_attention_mask=e.attention_mask),mf(t.decoder_merged_session,a,i),t.addPastKeyValues(a,n);const s=await jr(t.decoder_merged_session,a);let o=s.logits;n=t.getPastKeyValues(s,n);const l=t.getAttentions(s);return new B1({logits:o,past_key_values:n,encoder_outputs:r,...l})}function Hw(t,e,r,n){let a=[],i=0;const s=t.requires_attention_mask??!0;let o=r.decoder_input_ids??r.decoder_start_token_id??r.bos_token_id??r.eos_token_id;o instanceof re?o=o.tolist().flat():Array.isArray(o)||(o=[o]);for(let l of e){l.dims=[1,...l.dims];let d={inputs:l,encoder_outputs:null,prev_model_outputs:null,output_token_ids:o,done:!1,score:0,id:i++};s&&(d.attention_mask=qs(t,l)),a.push(d)}return a}async function Gw(t,e){const r=t.main_input_name;let n=e.output_token_ids;e.prev_model_outputs&&(n=n.slice(-1));let a={[r]:e.inputs,decoder_input_ids:Fw(n),encoder_outputs:e.encoder_outputs,past_key_values:e.prev_model_outputs?.past_key_values};e.attention_mask&&(a.attention_mask=e.attention_mask);let i=await t.forward(a);return e.prev_model_outputs=i,e.encoder_outputs=i.encoder_outputs,i}function qw(t,e){t.output_token_ids=[...t.output_token_ids,e]}async function In(t,e){const r=Object.create(null);for(const n of t.session.inputNames)r[n]=e[n];return t.session.inputNames.includes("token_type_ids")&&!r.token_type_ids&&(r.token_type_ids=new re("int64",new BigInt64Array(r.input_ids.data.length),r.input_ids.dims)),await jr(t.session,r)}async function jw(t,e){let{input_ids:r,past_key_values:n,attention_mask:a}=e,i={input_ids:r,attention_mask:a??qs(t,r)};const s=!!n;t.session.inputNames.includes("use_cache_branch")&&(i.use_cache_branch=js(s)),mf(t.session,i,s),t.addPastKeyValues(i,n);let o=await jr(t.session,i),l=o.logits;return n=t.getPastKeyValues(o,n),{logits:l,past_key_values:n}}function Kw(t,e,r,n,a){let i=[],s=0;for(let o of e){let l=o.tolist().map(Number);o.dims=[1,...o.dims];let d;a?(d=a[s],d.dims=[1,...d.dims]):d=qs(t,o);let c={input:o,model_input_ids:o,attention_mask:d,prev_model_outputs:null,output_token_ids:l,num_output_tokens:n,done:!1,score:0,id:s++};i.push(c)}return i}async function Yw(t,e){let r=new BigInt64Array(e.output_token_ids.length).fill(1n),n={input_ids:e.model_input_ids,attention_mask:new re("int64",r,[1,r.length]),past_key_values:e.prev_model_outputs?.past_key_values},a=await t.forward(n);return e.prev_model_outputs=a,a}function Xw(t,e){t.output_token_ids=[...t.output_token_ids,e],t.model_input_ids=new re("int64",[BigInt(e)],[1,1])}class Z extends yt{main_input_name="input_ids";constructor(e,r){super(),this.config=e,this.session=r;const n=An.get(this.constructor),a=Ga.get(n);this.can_generate=!1,this._runBeam=null,this._getStartBeams=null,this._updateBeam=null,this._forward=null,a===ke.DecoderOnly?(this.can_generate=!0,this._runBeam=Yw,this._getStartBeams=Kw,this._updateBeam=Xw,this._forward=jw):a===ke.Seq2Seq||a===ke.Vision2Seq?(this.can_generate=!0,this._runBeam=Gw,this._getStartBeams=Hw,this._updateBeam=qw,this._forward=Vw):a===ke.EncoderDecoder?this._forward=In:this._forward=In}async dispose(){const e=[];for(let r of Object.keys(this)){let n=this[r];n?.handler?.dispose!==void 0&&e.push(n.handler.dispose())}return await Promise.all(e)}static async from_pretrained(e,{progress_callback:r=null,config:n=null,cache_dir:a=null,local_files_only:i=!1,revision:s="main",model_file_name:o=null,device:l=null,dtype:d=null,session_options:c={}}={}){let u={progress_callback:r,config:n,cache_dir:a,local_files_only:i,revision:s,model_file_name:o,device:l,dtype:d,session_options:c};const h=An.get(this),f=Ga.get(h);let g;return f===ke.DecoderOnly?g=await Promise.all([qr.from_pretrained(e,u),pr(e,u.model_file_name??"decoder_model_merged",u),Br(e,"generation_config.json",!1,u)]):f===ke.Seq2Seq||f===ke.Vision2Seq?g=await Promise.all([qr.from_pretrained(e,u),pr(e,"encoder_model",u),pr(e,"decoder_model_merged",u),Br(e,"generation_config.json",!1,u)]):f===ke.MaskGeneration?g=await Promise.all([qr.from_pretrained(e,u),pr(e,"vision_encoder",u),pr(e,"prompt_encoder_mask_decoder",u)]):f===ke.EncoderDecoder?g=await Promise.all([qr.from_pretrained(e,u),pr(e,"encoder_model",u),pr(e,"decoder_model_merged",u)]):(f!==ke.EncoderOnly&&console.warn(`Model type for '${h??n?.model_type}' not found, assuming encoder-only architecture. Please report this at https://github.com/xenova/transformers.js/issues/new/choose.`),g=await Promise.all([qr.from_pretrained(e,u),pr(e,u.model_file_name??"model",u)])),new this(...g)}async _call(e){return await this.forward(e)}async forward(e){return await this._forward(this,e)}_get_logits_processor(e,r,n=null){const a=new pf;if(e.repetition_penalty!==null&&e.repetition_penalty!==1&&a.push(new zw(e.repetition_penalty)),e.no_repeat_ngram_size!==null&&e.no_repeat_ngram_size>0&&a.push(new Mw(e.no_repeat_ngram_size)),e.bad_words_ids!==null&&a.push(new Dw(e.bad_words_ids,e.eos_token_id)),e.min_length!==null&&e.eos_token_id!==null&&e.min_length>0&&a.push(new Bw(e.min_length,e.eos_token_id)),e.min_new_tokens!==null&&e.eos_token_id!==null&&e.min_new_tokens>0&&a.push(new Rw(r,e.min_new_tokens,e.eos_token_id)),e.forced_bos_token_id!==null&&a.push(new Aw(e.forced_bos_token_id)),e.forced_eos_token_id!==null&&a.push(new Iw(e.max_length,e.forced_eos_token_id)),e.begin_suppress_tokens!==null){let i=r>1||e.forced_bos_token_id===null?r:r+1;e.forced_decoder_ids!==null&&(i+=e.forced_decoder_ids[e.forced_decoder_ids.length-1][0]),a.push(new Tw(e.begin_suppress_tokens,i))}return e.forced_decoder_ids!==null&&a.push(new Cw(e.forced_decoder_ids)),n!==null&&a.extend(n),a}_get_generation_config(e){let r=new Pw(this.config);return"generation_config"in this&&Object.assign(r,this.generation_config),e!==null&&Object.assign(r,e),r}async generate(e,r=null,n=null,{inputs_attention_mask:a=null}={}){if(!this.can_generate){let y=`The current model class (${An.get(this.constructor)}) is not compatible with \`.generate()\`, as it doesn't have a language model head.`;const w=this.config.model_type,v=Ja.get(w)??eo.get(w)??Js.get(w)??to.get(w);throw v&&(y+=` Please use the following class instead: '${v[0]}'`),Error(y)}if(!(e instanceof re)&&!hg(e)&&!Array.isArray(e))throw Error(`\`inputs\` must be a Tensor, TypedArray, or Array, but is "${e.constructor.name}".`);let i;if(this.config.is_encoder_decoder)i=0;else if(i=e instanceof re?e.dims.at(-1):e.length,i===0)throw Error("Must supply a non-empty array of input token ids.");r=this._get_generation_config(r),n=n??new pf,n=this._get_logits_processor(r,i,n);let s=r.eos_token_id;s!==null&&!Array.isArray(s)&&(s=[s]);let o=1;const l=o+(r.max_new_tokens??1/0),d=Number.isInteger(r.max_length)&&(r.max_new_tokens??null)===null;let c=Ha.getSampler(r),u=this.getStartBeams(e,r,o,a);for(;u.some(y=>!y.done)&&o<l;){let y=[];for(let w of u){if(w.done){y.push(w);continue}if(d&&w.output_token_ids.length>=r.max_length){w.done=!0,y.push(w);continue}let v=await this.runBeam(w);r.output_attentions&&this.addAttentionsToBeam(w,v),r.output_scores;let S=v.logits.slice(null,-1,null);n(w.output_token_ids,S);let E=c(S);for(let[x,A]of E){let T={...w};this.updateBeam(T,x),T.score+=A,s&&s.includes(x)&&(T.done=!0),y.push(T)}}++o,y=this.groupBeams(y).map(w=>w.sort((v,S)=>S.score-v.score).slice(0,r.num_beams)),u=y.flat(),r.callback_function&&r.callback_function(u)}const h=this.groupBeams(u),f=y=>h.map(w=>r.num_return_sequences>1?w.slice(0,r.num_return_sequences).map(v=>v[y]):[w[0][y]]).flat(),g=f("output_token_ids");if(r.return_dict_in_generate){const y=f("decoder_attentions"),w=f("cross_attentions");return{sequences:g,decoder_attentions:y,cross_attentions:w}}else return g}addAttentionsToBeam(e,r){if(this.config.is_encoder_decoder){if(!r.cross_attentions||r.cross_attentions.length===0)throw Error("`output_attentions` is true, but the model did not produce cross-attentions. This is most likely because the model was not exported with `output_attentions=True`.");e.cross_attentions||(e.cross_attentions=[]),e.cross_attentions.push(r.cross_attentions)}if(!r.decoder_attentions||r.decoder_attentions.length===0)throw Error("`output_attentions` is true, but the model did not produce decoder-attentions. This is most likely because the model was not exported with `output_attentions=True`.");e.decoder_attentions||(e.decoder_attentions=[]),e.decoder_attentions.push(r.decoder_attentions)}groupBeams(e){const r=Object.create(null);for(const n of e)r[n.id]===void 0?r[n.id]=[n]:r[n.id].push(n);return Object.values(r)}getPastKeyValues(e,r){const n=Object.create(null);for(const a in e)if(a.startsWith("present")){let i=a.replace("present","past_key_values");r&&a.includes("encoder")?n[i]=r[i]:n[i]=e[a]}return n}getAttentions(e){const r=Object.create(null);for(const n of["cross_attentions","decoder_attentions"]){const a=[];for(const i in e)if(i.startsWith(n)){const s=i.split(".").pop();a[s]=e[i]}r[n]=a}return r}addPastKeyValues(e,r){if(r)Object.assign(e,r);else{const n=this.config.precision||"float32",a=n==="float16"?new Uint16Array:[];if(this.config.is_encoder_decoder&&(this.add_encoder_pkv??!0)){let i=[1,this.num_encoder_heads,0,this.encoder_dim_kv],s=[1,this.num_decoder_heads,0,this.decoder_dim_kv];for(let o=0;o<this.num_decoder_layers;++o)e[`past_key_values.${o}.encoder.key`]=new re(n,a,i),e[`past_key_values.${o}.encoder.value`]=new re(n,a,i),e[`past_key_values.${o}.decoder.key`]=new re(n,a,s),e[`past_key_values.${o}.decoder.value`]=new re(n,a,s)}else if(this.config.model_type==="falcon"){let i=[1*this.num_heads,0,this.dim_kv];for(let s=0;s<this.num_layers;++s)e[`past_key_values.${s}.key`]=new re(n,a,i),e[`past_key_values.${s}.value`]=new re(n,a,i)}else if(this.config.multi_query){let i=[1*this.num_heads,0,2*this.dim_kv];for(let s=0;s<this.num_layers;++s)e[`past_key_values.${s}.key_value`]=new re(n,a,i)}else if(this.config.model_type==="bloom"){let i=[1*this.num_heads,this.dim_kv,0],s=[1*this.num_heads,0,this.dim_kv];for(let o=0;o<this.num_layers;++o)e[`past_key_values.${o}.key`]=new re(n,a,i),e[`past_key_values.${o}.value`]=new re(n,a,s)}else{let i=[1,this.num_heads,0,this.dim_kv];for(let s=0;s<this.num_layers;++s)e[`past_key_values.${s}.key`]=new re(n,a,i),e[`past_key_values.${s}.value`]=new re(n,a,i)}}}getStartBeams(e,r,n,a){return this._getStartBeams(this,e,r,n,a)}async runBeam(e){return await this._runBeam(this,e)}updateBeam(e,r){return this._updateBeam(e,r)}}class xt{}class Tn extends Z{}class Qw extends Tn{}class Zw extends Tn{async _call(e){return new pt(await super._call(e))}}class Jw extends Tn{async _call(e){return new Oe(await super._call(e))}}class ev extends Tn{async _call(e){return new ct(await super._call(e))}}class tv extends Tn{async _call(e){return new ft(await super._call(e))}}class rv extends Z{}class nv extends rv{}class On extends Z{}class av extends On{}class iv extends On{async _call(e){return new pt(await super._call(e))}}class sv extends On{async _call(e){return new Oe(await super._call(e))}}class ov extends On{async _call(e){return new ct(await super._call(e))}}class lv extends On{async _call(e){return new ft(await super._call(e))}}class Mn extends Z{}class uv extends Mn{}class dv extends Mn{async _call(e){return new pt(await super._call(e))}}class cv extends Mn{async _call(e){return new Oe(await super._call(e))}}class pv extends Mn{async _call(e){return new ct(await super._call(e))}}class hv extends Mn{async _call(e){return new ft(await super._call(e))}}class zn extends Z{}class fv extends zn{}class mv extends zn{async _call(e){return new pt(await super._call(e))}}class gv extends zn{async _call(e){return new Oe(await super._call(e))}}class _v extends zn{async _call(e){return new ct(await super._call(e))}}class yv extends zn{async _call(e){return new ft(await super._call(e))}}class Bn extends Z{}class wv extends Bn{}class vv extends Bn{async _call(e){return new pt(await super._call(e))}}class bv extends Bn{async _call(e){return new Oe(await super._call(e))}}class $v extends Bn{async _call(e){return new ct(await super._call(e))}}class xv extends Bn{async _call(e){return new ft(await super._call(e))}}class Rn extends Z{}class Sv extends Rn{}class kv extends Rn{async _call(e){return new pt(await super._call(e))}}class Ev extends Rn{async _call(e){return new Oe(await super._call(e))}}class Cv extends Rn{async _call(e){return new ct(await super._call(e))}}class Av extends Rn{async _call(e){return new ft(await super._call(e))}}class Dn extends Z{}class Iv extends Dn{}class Tv extends Dn{async _call(e){return new pt(await super._call(e))}}class Ov extends Dn{async _call(e){return new Oe(await super._call(e))}}class Mv extends Dn{async _call(e){return new ct(await super._call(e))}}class zv extends Dn{async _call(e){return new ft(await super._call(e))}}class Pn extends Z{}class Bv extends Pn{}class Rv extends Pn{async _call(e){return new Oe(await super._call(e))}}class Dv extends Pn{async _call(e){return new ct(await super._call(e))}}class Pv extends Pn{async _call(e){return new ft(await super._call(e))}}class Nv extends Pn{async _call(e){return new pt(await super._call(e))}}class qa extends Z{}class Uv extends qa{}class Wv extends qa{async _call(e){return new pt(await super._call(e))}}class Lv extends qa{async _call(e){return new Oe(await super._call(e))}}class Fv extends qa{async _call(e){return new ct(await super._call(e))}}class ja extends Z{}class Vv extends ja{}class Hv extends ja{async _call(e){return new pt(await super._call(e))}}class Gv extends ja{async _call(e){return new Oe(await super._call(e))}}class qv extends ja{async _call(e){return new ft(await super._call(e))}}class Nn extends Z{}class jv extends Nn{}class Kv extends Nn{async _call(e){return new pt(await super._call(e))}}class Yv extends Nn{async _call(e){return new Oe(await super._call(e))}}class Xv extends Nn{async _call(e){return new ct(await super._call(e))}}class Qv extends Nn{async _call(e){return new ft(await super._call(e))}}class Ka extends Z{}class Zv extends Ka{}class Jv extends Ka{async _call(e){return new pt(await super._call(e))}}class eb extends Ka{async _call(e){return new Oe(await super._call(e))}}class tb extends Ka{async _call(e){return new ft(await super._call(e))}}class Ya extends Z{}class rb extends Ya{}class nb extends Ya{async _call(e){return new Oe(await super._call(e))}}class ab extends Ya{async _call(e){return new ft(await super._call(e))}}class ib extends Ya{async _call(e){return new pt(await super._call(e))}}class gf extends Z{}class sb extends gf{}class ob extends gf{constructor(e,r,n,a){super(e,r),this.decoder_merged_session=n,this.generation_config=a,this.num_decoder_layers=this.config.num_decoder_layers,this.num_decoder_heads=this.config.num_heads,this.decoder_dim_kv=this.config.d_kv,this.num_encoder_layers=this.config.num_layers,this.num_encoder_heads=this.config.num_heads,this.encoder_dim_kv=this.config.d_kv}}class _f extends Z{}class lb extends _f{}class ub extends _f{constructor(e,r,n,a){super(e,r),this.decoder_merged_session=n,this.generation_config=a,this.num_decoder_layers=this.config.num_decoder_layers,this.num_decoder_heads=this.config.num_heads,this.decoder_dim_kv=this.config.d_kv,this.num_encoder_layers=this.config.num_layers,this.num_encoder_heads=this.config.num_heads,this.encoder_dim_kv=this.config.d_kv}}class yf extends Z{}class db extends yf{}class cb extends yf{constructor(e,r,n,a){super(e,r),this.decoder_merged_session=n,this.generation_config=a,this.num_decoder_layers=this.config.num_decoder_layers,this.num_decoder_heads=this.config.num_heads,this.decoder_dim_kv=this.config.d_kv,this.num_encoder_layers=this.config.num_layers,this.num_encoder_heads=this.config.num_heads,this.encoder_dim_kv=this.config.d_kv}}class Ks extends Z{}class pb extends Ks{}class hb extends Ks{constructor(e,r,n,a){super(e,r),this.decoder_merged_session=n,this.generation_config=a,this.num_decoder_layers=this.config.decoder_layers,this.num_decoder_heads=this.config.decoder_attention_heads,this.decoder_dim_kv=this.config.d_model/this.num_decoder_heads,this.num_encoder_layers=this.config.encoder_layers,this.num_encoder_heads=this.config.encoder_attention_heads,this.encoder_dim_kv=this.config.d_model/this.num_encoder_heads}}class fb extends Ks{async _call(e){return new Oe(await super._call(e))}}class Xa extends Z{}class mb extends Xa{}class gb extends Xa{constructor(e,r,n,a){super(e,r),this.decoder_merged_session=n,this.generation_config=a,this.num_decoder_layers=this.config.decoder_layers,this.num_decoder_heads=this.config.decoder_attention_heads,this.decoder_dim_kv=this.config.d_model/this.num_decoder_heads,this.num_encoder_layers=this.config.encoder_layers,this.num_encoder_heads=this.config.encoder_attention_heads,this.encoder_dim_kv=this.config.d_model/this.num_encoder_heads}}class _b extends Xa{async _call(e){return new Oe(await super._call(e))}}class yb extends Xa{constructor(e,r,n){super(e,r),this.generation_config=n,this.num_decoder_layers=this.config.decoder_layers,this.num_decoder_heads=this.config.decoder_attention_heads,this.decoder_dim_kv=this.config.d_model/this.num_decoder_heads,this.num_encoder_layers=this.config.encoder_layers,this.num_encoder_heads=this.config.encoder_attention_heads,this.encoder_dim_kv=this.config.d_model/this.num_encoder_heads}}class wf extends Z{}class wb extends wf{}class vb extends wf{constructor(e,r,n,a){super(e,r),this.decoder_merged_session=n,this.generation_config=a,this.num_decoder_layers=this.config.decoder_layers,this.num_decoder_heads=this.config.decoder_attention_heads,this.decoder_dim_kv=this.config.d_model/this.num_decoder_heads,this.num_encoder_layers=this.config.encoder_layers,this.num_encoder_heads=this.config.encoder_attention_heads,this.encoder_dim_kv=this.config.d_model/this.num_encoder_heads}}class vf extends Z{}class bb extends vf{}class $b extends vf{constructor(e,r,n,a){super(e,r),this.decoder_merged_session=n,this.generation_config=a,this.num_decoder_layers=this.config.decoder_layers,this.num_decoder_heads=this.config.decoder_attention_heads,this.decoder_dim_kv=this.config.d_model/this.num_decoder_heads,this.num_encoder_layers=this.config.encoder_layers,this.num_encoder_heads=this.config.encoder_attention_heads,this.encoder_dim_kv=this.config.d_model/this.num_encoder_heads}}class Un extends Z{}class xb extends Un{}class Sb extends Un{async _call(e){return new pt(await super._call(e))}}class kb extends Un{async _call(e){return new Oe(await super._call(e))}}class Eb extends Un{async _call(e){return new ct(await super._call(e))}}class Cb extends Un{async _call(e){return new ft(await super._call(e))}}class Wn extends Z{}class Ab extends Wn{}class Ib extends Wn{async _call(e){return new pt(await super._call(e))}}class Tb extends Wn{async _call(e){return new Oe(await super._call(e))}}class Ob extends Wn{async _call(e){return new ct(await super._call(e))}}class Mb extends Wn{async _call(e){return new ft(await super._call(e))}}class Ln extends Z{}class zb extends Ln{}class Bb extends Ln{async _call(e){return new pt(await super._call(e))}}class Rb extends Ln{async _call(e){return new Oe(await super._call(e))}}class Db extends Ln{async _call(e){return new ct(await super._call(e))}}class Pb extends Ln{async _call(e){return new ft(await super._call(e))}}class bf extends Z{}class Nb extends bf{}class Ub extends bf{}class $f extends Z{}class Wb extends $f{}class Lb extends $f{requires_attention_mask=!1;main_input_name="input_features";constructor(e,r,n,a){super(e,r),this.decoder_merged_session=n,this.generation_config=a,this.num_decoder_layers=this.config.decoder_layers,this.num_decoder_heads=this.config.decoder_attention_heads,this.decoder_dim_kv=this.config.d_model/this.num_decoder_heads,this.num_encoder_layers=this.config.encoder_layers,this.num_encoder_heads=this.config.encoder_attention_heads,this.encoder_dim_kv=this.config.d_model/this.num_encoder_heads}async generate(e,r=null,n=null){if(r=this._get_generation_config(r),r.return_timestamps??=!1,r.return_timestamps&&(n=[new Ow(r)]),r.return_token_timestamps&&(r.output_attentions=!0,r.return_dict_in_generate=!0,r.task==="translate"&&console.warn("Token-level timestamps may not be reliable for task 'translate'."),!r.alignment_heads))throw new Error("Model generation config has no `alignment_heads`, token-level timestamps not available. See https://gist.github.com/hollance/42e32852f24243b748ae6bc1f985b13a on how to add this property to the generation config.");const a=await super.generate(e,r,n);return r.return_token_timestamps&&r.alignment_heads&&(a.token_timestamps=this._extract_token_timestamps(a,r.alignment_heads,r.num_frames)),a}_extract_token_timestamps(e,r,n=null,a=.02){if(!e.cross_attentions)throw new Error("Model outputs must contain cross attentions to extract timestamps. This is most likely because the model was not exported with `output_attentions=True`.");let i=this.config.median_filter_width;i===void 0&&(console.warn("Model config has no `median_filter_width`, using default value of 7."),i=7);const s=e.cross_attentions.map(d=>{let c=Array.from({length:this.config.decoder_layers},(y,w)=>Ra(d.map(v=>v[w]),2)),u=Da(r.map(([y,w])=>n?c[y].slice(null,w,null,[0,n]):c[y].slice(null,w)));u=u.transpose(1,0,2,3);let[h,f]=h0(u,-2,0,!0),g=u.clone();for(let y=0;y<g.dims[0];++y){let w=g[y];for(let v=0;v<w.dims[0];++v){let S=w[v];const E=h[y][v][0],x=f[y][v][0];for(let A=0;A<S.dims[0];++A){let T=S[A];for(let B=0;B<T.data.length;++B)T.data[B]=(T.data[B]-x.data[B])/E.data[B];T.data.set(Og(T.data,i))}}}return Lh(g,1)}),o=[e.sequences.length,e.sequences[0].length],l=new re("float32",new Float32Array(o[0]*o[1]),o);for(let d=0;d<o[0];++d){const c=s[d].neg().squeeze_(0);let[u,h]=f0(c),f=Array.from({length:u.length-1},(w,v)=>u[v+1]-u[v]),g=lt([1],f).map(w=>!!w),y=[];for(let w=0;w<g.length;++w)g[w]&&y.push(h[w]*a);l[d].data.set(y,1)}return l}}class xf extends Z{main_input_name="pixel_values";constructor(e,r,n,a){super(e,r),this.decoder_merged_session=n,this.generation_config=a;const i=this.config.encoder,s=this.config.decoder,o=i.model_type;(dm.get(o)??cm.get(o))||console.warn(`Model type for encoder '${o}' not found, assuming encoder-only architecture. Please report this at https://github.com/xenova/transformers.js/issues/new/choose.`);const l=Ja.get(s.model_type);if(!l)throw new Error(`Unable to construct \`VisionEncoderDecoder\` due to unsupported decoder: "${this.config.decoder.model_type}"`);const d=l[1],c=new d(s,n,a);this.add_encoder_pkv="num_decoder_layers"in c,this.add_encoder_pkv?(this.num_decoder_layers=c.num_decoder_layers,this.num_decoder_heads=c.num_decoder_heads,this.decoder_dim_kv=c.decoder_dim_kv,this.num_encoder_layers=c.num_encoder_layers,this.num_encoder_heads=c.num_encoder_heads,this.encoder_dim_kv=c.encoder_dim_kv):(this.num_layers=c.num_layers,this.num_heads=c.num_heads,this.dim_kv=c.dim_kv)}}class Qa extends Z{}class Fb extends Qa{}class Vb extends Qa{static async from_pretrained(e,r={}){return r.model_file_name??="text_model",super.from_pretrained(e,r)}}class Hb extends Qa{static async from_pretrained(e,r={}){return r.model_file_name??="vision_model",super.from_pretrained(e,r)}}class Sf extends Z{}class Gb extends Sf{}class qb extends Sf{static async from_pretrained(e,r={}){return r.model_file_name??="text_model",super.from_pretrained(e,r)}}class jb extends Qa{static async from_pretrained(e,r={}){return r.model_file_name??="vision_model",super.from_pretrained(e,r)}}class Kb extends Z{}class Yb extends Kb{}class kf extends Z{}class Xb extends kf{}class Qb extends kf{}class Ef extends Z{constructor(e,r,n){super(e,r),this.generation_config=n,this.config.pad_token_id=this.config.eos_token_id,this.num_heads=this.config.n_head,this.num_layers=this.config.n_layer,this.dim_kv=this.config.n_embd/this.num_heads}}class Zb extends Ef{}class Jb extends Ef{}class Cf extends Z{constructor(e,r,n){super(e,r),this.generation_config=n,this.config.pad_token_id=this.config.eos_token_id,this.num_heads=this.config.num_heads,this.num_layers=this.config.num_layers,this.dim_kv=this.config.hidden_size/this.num_heads}}class e2 extends Cf{}class t2 extends Cf{}class Af extends Z{constructor(e,r,n){super(e,r),this.generation_config=n,this.config.pad_token_id=this.config.eos_token_id,this.num_heads=this.config.num_attention_heads,this.num_layers=this.config.num_hidden_layers,this.dim_kv=this.config.hidden_size/this.num_heads}}class r2 extends Af{}class n2 extends Af{}class If extends Z{constructor(e,r,n){super(e,r),this.generation_config=n,this.config.pad_token_id=this.config.eos_token_id,this.num_heads=this.config.n_head,this.num_layers=this.config.n_layer,this.dim_kv=this.config.n_embd/this.num_heads}}class a2 extends If{}class i2 extends If{}class Tf extends Z{constructor(e,r,n){super(e,r),this.generation_config=n,this.config.pad_token_id=this.config.eos_token_id,this.num_heads=this.config.n_head,this.num_layers=this.config.n_layer,this.dim_kv=this.config.n_embd/this.num_heads}}class s2 extends Tf{}class o2 extends Tf{}class Of extends Z{constructor(e,r,n){super(e,r),this.generation_config=n,this.config.pad_token_id=this.config.eos_token_id,this.num_heads=this.config.n_head,this.num_layers=this.config.n_layer,this.dim_kv=this.config.n_embd/this.num_heads}}class l2 extends Of{}class u2 extends Of{}class Mf extends Z{constructor(e,r,n){super(e,r),this.generation_config=n,this.config.pad_token_id=this.config.eos_token_id,this.num_heads=this.config.num_key_value_heads??this.config.num_attention_heads,this.num_layers=this.config.num_hidden_layers,this.dim_kv=this.config.hidden_size/this.config.num_attention_heads}}class d2 extends Mf{}class c2 extends Mf{}class zf extends Z{constructor(e,r,n){super(e,r),this.generation_config=n,this.config.pad_token_id=this.config.eos_token_id,this.num_heads=this.config.num_key_value_heads??this.config.num_attention_heads,this.num_layers=this.config.num_hidden_layers,this.dim_kv=this.config.hidden_size/this.config.num_attention_heads}}class p2 extends zf{}class h2 extends zf{}class Bf extends Z{constructor(e,r,n){super(e,r),this.generation_config=n,this.config.pad_token_id=this.config.eos_token_id,this.num_heads=this.config.num_attention_heads,this.num_layers=this.config.num_hidden_layers,this.dim_kv=this.config.hidden_size/this.num_heads}}class f2 extends Bf{}class m2 extends Bf{}class Rf extends Z{constructor(e,r,n){super(e,r),this.generation_config=n,this.config.pad_token_id=this.config.eos_token_id,this.num_heads=this.config.n_head,this.num_layers=this.config.n_layer,this.dim_kv=this.config.hidden_size/this.num_heads}}class g2 extends Rf{}class _2 extends Rf{}class Df extends Z{constructor(e,r,n){super(e,r),this.generation_config=n,this.config.pad_token_id=this.config.eos_token_id,this.num_heads=this.config.n_heads,this.num_layers=this.config.n_layers,this.dim_kv=this.config.d_model/this.num_heads}}class y2 extends Df{}class w2 extends Df{}class Pf extends Z{constructor(e,r,n){super(e,r),this.generation_config=n,this.config.pad_token_id=this.config.eos_token_id,this.num_heads=this.config.num_attention_heads,this.num_layers=this.config.num_hidden_layers,this.dim_kv=this.config.hidden_size/this.num_heads}}class v2 extends Pf{}class b2 extends Pf{}class Nf extends Z{}class $2 extends Nf{}class x2 extends Nf{async _call(e){return new Oe(await super._call(e))}}class S2 extends Z{}class k2 extends S2{async _call(e){return new D1(await super._call(e))}}class Uf extends Z{}class E2 extends Uf{}class C2 extends Uf{async _call(e){return new Oe(await super._call(e))}}class Wf extends Z{}class A2 extends Wf{}class I2 extends Wf{}class Lf extends Z{}class T2 extends Lf{}class O2 extends Lf{}class Ff extends Z{}class M2 extends Ff{}class z2 extends Ff{async _call(e){return new Oe(await super._call(e))}}class Ys extends Z{}class B2 extends Ys{}class R2 extends Ys{async _call(e){return new Vf(await super._call(e))}}class D2 extends Ys{async _call(e){return new P2(await super._call(e))}}class Vf extends xt{constructor({logits:e,pred_boxes:r}){super(),this.logits=e,this.pred_boxes=r}}class P2 extends xt{constructor({logits:e,pred_boxes:r,pred_masks:n}){super(),this.logits=e,this.pred_boxes=r,this.pred_masks=n}}class Hf extends Z{}class N2 extends Hf{}class U2 extends Hf{async _call(e){return new W2(await super._call(e))}}class W2 extends Vf{}class Gf extends Z{}class L2 extends Gf{}class F2 extends Gf{async _call(e){return new Oe(await super._call(e))}}class qf extends Z{}class V2 extends qf{}class H2 extends qf{async _call(e){return new Oe(await super._call(e))}}class jf extends Z{}class G2 extends jf{}class q2 extends jf{async _call(e){return new Oe(await super._call(e))}}class Kf extends Z{}class j2 extends Kf{}class K2 extends Kf{}class Yf extends Z{}class Y2 extends Yf{}class X2 extends Yf{}class Q2 extends Z{}class Z2 extends Q2{}class Xf extends Z{}class J2 extends Xf{}class e$ extends Xf{}class t$ extends Z{}class r$ extends t${}class Qf extends Z{}class n$ extends Qf{}class a$ extends Qf{async _call(e){return new Oe(await super._call(e))}}class Zf extends Z{}class i$ extends Zf{}class s$ extends Zf{async _call(e){return new Oe(await super._call(e))}}class Jf extends Z{}class o$ extends Jf{}class l$ extends Jf{async _call(e){return new Oe(await super._call(e))}}class em extends Z{}class u$ extends em{}class d$ extends em{async _call(e){return new c$(await super._call(e))}}class c$ extends xt{constructor({logits:e,pred_boxes:r}){super(),this.logits=e,this.pred_boxes=r}}class p$ extends Z{}class h$ extends p${constructor(e,r,n){super(e,r),this.prompt_encoder_mask_decoder=n}async get_image_embeddings({pixel_values:e}){return await In(this,{pixel_values:e})}async forward(e){if((!e.image_embeddings||!e.image_positional_embeddings)&&(e={...e,...await this.get_image_embeddings(e)}),!e.input_labels){const r=e.input_points.dims.slice(0,-1),n=r.reduce((a,i)=>a*i,1);e.input_labels=new re("int64",new BigInt64Array(n).fill(1n),r)}return await jr(this.prompt_encoder_mask_decoder,{input_points:e.input_points,input_labels:e.input_labels,image_embeddings:e.image_embeddings,image_positional_embeddings:e.image_positional_embeddings})}async _call(e){return new f$(await super._call(e))}}class f$ extends xt{constructor({iou_scores:e,pred_masks:r}){super(),this.iou_scores=e,this.pred_masks=r}}class tm extends Z{}class m$ extends tm{}class g$ extends tm{constructor(e,r,n,a){super(e,r),this.decoder_merged_session=n,this.generation_config=a,this.num_decoder_layers=this.config.decoder_layers,this.num_decoder_heads=this.config.decoder_attention_heads,this.decoder_dim_kv=this.config.d_model/this.num_decoder_heads,this.num_encoder_layers=this.config.encoder_layers,this.num_encoder_heads=this.config.encoder_attention_heads,this.encoder_dim_kv=this.config.d_model/this.num_encoder_heads}}class rm extends Z{}class _$ extends rm{}class y$ extends rm{constructor(e,r,n,a){super(e,r),this.decoder_merged_session=n,this.generation_config=a,this.num_decoder_layers=this.config.decoder_layers,this.num_decoder_heads=this.config.decoder_attention_heads,this.decoder_dim_kv=this.config.d_model/this.num_decoder_heads,this.num_encoder_layers=this.config.encoder_layers,this.num_encoder_heads=this.config.encoder_attention_heads,this.encoder_dim_kv=this.config.d_model/this.num_encoder_heads}}class kr extends Z{}class w$ extends kr{}class v$ extends kr{async _call(e){return new Kr(await super._call(e))}}class b$ extends kr{async _call(e){return new Oe(await super._call(e))}}class $$ extends kr{async _call(e){return new ct(await super._call(e))}}class Xs extends Z{}class x$ extends Xs{}class S$ extends Xs{async _call(e){return new Kr(await super._call(e))}}class k$ extends Xs{async _call(e){return new Oe(await super._call(e))}}class Za extends Z{}class E$ extends Za{}class C$ extends Za{async _call(e){return new Kr(await super._call(e))}}class A$ extends Za{async _call(e){return new Oe(await super._call(e))}}class I$ extends Za{async _call(e){return new ct(await super._call(e))}}class Qs extends Z{}class T$ extends Qs{}class O$ extends Qs{async _call(e){return new Kr(await super._call(e))}}class M$ extends Qs{async _call(e){return new Oe(await super._call(e))}}class z$ extends kr{}class B$ extends kr{async _call(e){return new Kr(await super._call(e))}}class R$ extends kr{async _call(e){return new Oe(await super._call(e))}}class Fn extends Z{}class D$ extends Fn{}class P$ extends Fn{async _call(e){return new Kr(await super._call(e))}}class N$ extends Fn{async _call(e){return new Oe(await super._call(e))}}class U$ extends Fn{async _call(e){return new R1(await super._call(e))}}class W$ extends Fn{async _call(e){return new ct(await super._call(e))}}class nm extends Z{}class L$ extends nm{}class F$ extends nm{constructor(e,r,n,a){super(e,r),this.decoder_merged_session=n,this.generation_config=a,this.num_decoder_layers=this.config.decoder_layers,this.num_decoder_heads=this.config.decoder_attention_heads,this.decoder_dim_kv=this.config.hidden_size/this.num_decoder_heads,this.num_encoder_layers=this.config.encoder_layers,this.num_encoder_heads=this.config.encoder_attention_heads,this.encoder_dim_kv=this.config.hidden_size/this.num_encoder_heads}async generate_speech(e,r,{threshold:n=.5,minlenratio:a=0,maxlenratio:i=20,vocoder:s=null}={}){const o={input_ids:e},{encoder_outputs:l,encoder_attention_mask:d}=await In(this,o),c=l.dims[1]/this.config.reduction_factor,u=Math.floor(c*i),h=Math.floor(c*a),f=this.config.num_mel_bins;let g=[],y=null,w=null,v=0;for(;;){++v;const x=js(!!w);let A;w?A=w.output_sequence_out:A=new re("float32",new Float32Array(f),[1,1,f]);let T={use_cache_branch:x,output_sequence:A,encoder_attention_mask:d,speaker_embeddings:r,encoder_hidden_states:l};this.addPastKeyValues(T,y),w=await jr(this.decoder_merged_session,T),y=this.getPastKeyValues(w,y);const{prob:B,spectrum:U}=w;if(g.push(U),v>=h&&(Array.from(B.data).filter(H=>H>=n).length>0||v>=u))break}const S=Ra(g),{waveform:E}=await jr(s.session,{spectrogram:S});return{spectrogram:S,waveform:E}}}class V$ extends Z{main_input_name="spectrogram"}class H$ extends Z{constructor(e,r,n){super(e,r),this.generation_config=n,this.config.pad_token_id=this.config.eos_token_id,this.num_encoder_layers=this.num_decoder_layers=this.config.decoder_layers,this.num_encoder_heads=this.num_decoder_heads=this.config.decoder_attention_heads,this.encoder_dim_kv=this.decoder_dim_kv=this.config.d_model/this.num_decoder_heads}}class G$ extends H${}class am extends Z{constructor(e,r,n){super(e,r),this.generation_config=n,this.config.pad_token_id=this.config.eos_token_id,this.num_heads=this.config.num_key_value_heads,this.num_layers=this.config.num_hidden_layers,this.dim_kv=this.config.hidden_size/this.config.num_attention_heads}}class q$ extends am{}class j$ extends am{}class im extends Z{constructor(e,r,n){super(e,r),this.generation_config=n,this.config.pad_token_id=this.config.eos_token_id,this.num_heads=this.config.num_key_value_heads,this.num_layers=this.config.num_hidden_layers,this.dim_kv=this.config.hidden_size/this.config.num_attention_heads}}class K$ extends im{}class Y$ extends im{}class sm extends Z{constructor(e,r,n){super(e,r),this.generation_config=n,this.config.pad_token_id=this.config.eos_token_id,this.num_heads=this.config.num_attention_heads,this.num_layers=this.config.num_hidden_layers,this.dim_kv=this.config.hidden_size/this.config.num_attention_heads}}class X$ extends sm{}class Q$ extends sm{}class Zs extends Z{}class Z$ extends Zs{}class J$ extends Zs{static async from_pretrained(e,r={}){return r.model_file_name??="text_model",super.from_pretrained(e,r)}}class e1 extends Zs{static async from_pretrained(e,r={}){return r.model_file_name??="audio_model",super.from_pretrained(e,r)}}class t1 extends Z{}class om extends t1{async _call(e){return new P1(await super._call(e))}}class lm extends Z{}class r1 extends lm{}class n1 extends lm{}class a1 extends Z{constructor(e,r,n){super(e,r),this.generation_config=n,this.config.pad_token_id=this.config.eos_token_id,this.num_heads=this.config.num_attention_heads,this.num_layers=this.config.num_hidden_layers,this.dim_kv=this.config.hidden_size/this.num_heads}}class i1 extends a1{}class um extends Z{}class s1 extends um{}class o1 extends um{async _call(e){return new Oe(await super._call(e))}}class Qe{static MODEL_CLASS_MAPPINGS=null;static BASE_IF_FAIL=!1;static async from_pretrained(e,{progress_callback:r=null,config:n=null,cache_dir:a=null,local_files_only:i=!1,revision:s="main",model_file_name:o=null,device:l=null,dtype:d=null,session_options:c={}}={}){let u={progress_callback:r,config:n,cache_dir:a,local_files_only:i,revision:s,model_file_name:o,device:l,dtype:d,session_options:c};if(n=await qr.from_pretrained(e,u),u.config||(u.config=n),!this.MODEL_CLASS_MAPPINGS)throw new Error("`MODEL_CLASS_MAPPINGS` not implemented for this type of `AutoClass`: "+this.name);for(let h of this.MODEL_CLASS_MAPPINGS){const f=h.get(n.model_type);if(f)return await f[1].from_pretrained(e,u)}if(this.BASE_IF_FAIL)return console.warn(`Unknown model class "${n.model_type}", attempting to construct from base class.`),await Z.from_pretrained(e,u);throw Error(`Unsupported model type: ${n.model_type}`)}}const dm=new Map([["bert",["BertModel",Qw]],["nomic_bert",["NomicBertModel",nv]],["roformer",["RoFormerModel",av]],["electra",["ElectraModel",fv]],["esm",["EsmModel",Uv]],["convbert",["ConvBertModel",uv]],["camembert",["CamembertModel",wv]],["deberta",["DebertaModel",Sv]],["deberta-v2",["DebertaV2Model",Iv]],["mpnet",["MPNetModel",jv]],["albert",["AlbertModel",rb]],["distilbert",["DistilBertModel",Bv]],["roberta",["RobertaModel",xb]],["xlm",["XLMModel",Ab]],["xlm-roberta",["XLMRobertaModel",zb]],["clap",["ClapModel",Z$]],["clip",["CLIPModel",Fb]],["clipseg",["CLIPSegModel",Xb]],["chinese_clip",["ChineseCLIPModel",Yb]],["siglip",["SiglipModel",Gb]],["mobilebert",["MobileBertModel",Vv]],["squeezebert",["SqueezeBertModel",Zv]],["wav2vec2",["Wav2Vec2Model",w$]],["wav2vec2-bert",["Wav2Vec2BertModel",T$]],["unispeech",["UniSpeechModel",x$]],["unispeech-sat",["UniSpeechSatModel",E$]],["hubert",["HubertModel",z$]],["wavlm",["WavLMModel",D$]],["audio-spectrogram-transformer",["ASTModel",Nb]],["vits",["VitsModel",om]],["detr",["DetrModel",B2]],["table-transformer",["TableTransformerModel",N2]],["vit",["ViTModel",$2]],["mobilevit",["MobileViTModel",E2]],["owlvit",["OwlViTModel",A2]],["owlv2",["Owlv2Model",T2]],["beit",["BeitModel",M2]],["deit",["DeiTModel",L2]],["convnext",["ConvNextModel",n$]],["convnextv2",["ConvNextV2Model",i$]],["dinov2",["Dinov2Model",o$]],["resnet",["ResNetModel",V2]],["swin",["SwinModel",G2]],["swin2sr",["Swin2SRModel",j2]],["donut-swin",["DonutSwinModel",r$]],["yolos",["YolosModel",u$]],["dpt",["DPTModel",Y2]],["glpn",["GLPNModel",J2]],["hifigan",["SpeechT5HifiGan",V$]],["efficientnet",["EfficientNetModel",s1]]]),cm=new Map([["t5",["T5Model",sb]],["longt5",["LongT5Model",lb]],["mt5",["MT5Model",db]],["bart",["BartModel",pb]],["mbart",["MBartModel",mb]],["marian",["MarianModel",m$]],["whisper",["WhisperModel",Wb]],["m2m_100",["M2M100Model",_$]],["blenderbot",["BlenderbotModel",wb]],["blenderbot-small",["BlenderbotSmallModel",bb]]]),l1=new Map([["bloom",["BloomModel",g2]],["gpt2",["GPT2Model",Zb]],["gptj",["GPTJModel",a2]],["gpt_bigcode",["GPTBigCodeModel",s2]],["gpt_neo",["GPTNeoModel",e2]],["gpt_neox",["GPTNeoXModel",r2]],["codegen",["CodeGenModel",l2]],["llama",["LlamaModel",d2]],["qwen2",["Qwen2Model",p2]],["phi",["PhiModel",f2]],["mpt",["MptModel",y2]],["opt",["OPTModel",v2]],["mistral",["MistralModel",q$]],["starcoder2",["Starcoder2Model",K$]],["falcon",["FalconModel",X$]]]),Js=new Map([["speecht5",["SpeechT5ForSpeechToText",L$]],["whisper",["WhisperForConditionalGeneration",Lb]]]),pm=new Map([["speecht5",["SpeechT5ForTextToSpeech",F$]]]),hm=new Map([["vits",["VitsModel",om]]]),fm=new Map([["bert",["BertForSequenceClassification",Jw]],["roformer",["RoFormerForSequenceClassification",sv]],["electra",["ElectraForSequenceClassification",gv]],["esm",["EsmForSequenceClassification",Lv]],["convbert",["ConvBertForSequenceClassification",cv]],["camembert",["CamembertForSequenceClassification",bv]],["deberta",["DebertaForSequenceClassification",Ev]],["deberta-v2",["DebertaV2ForSequenceClassification",Ov]],["mpnet",["MPNetForSequenceClassification",Yv]],["albert",["AlbertForSequenceClassification",nb]],["distilbert",["DistilBertForSequenceClassification",Rv]],["roberta",["RobertaForSequenceClassification",kb]],["xlm",["XLMForSequenceClassification",Tb]],["xlm-roberta",["XLMRobertaForSequenceClassification",Rb]],["bart",["BartForSequenceClassification",fb]],["mbart",["MBartForSequenceClassification",_b]],["mobilebert",["MobileBertForSequenceClassification",Gv]],["squeezebert",["SqueezeBertForSequenceClassification",eb]]]),mm=new Map([["bert",["BertForTokenClassification",ev]],["roformer",["RoFormerForTokenClassification",ov]],["electra",["ElectraForTokenClassification",_v]],["esm",["EsmForTokenClassification",Fv]],["convbert",["ConvBertForTokenClassification",pv]],["camembert",["CamembertForTokenClassification",$v]],["deberta",["DebertaForTokenClassification",Cv]],["deberta-v2",["DebertaV2ForTokenClassification",Mv]],["mpnet",["MPNetForTokenClassification",Xv]],["distilbert",["DistilBertForTokenClassification",Dv]],["roberta",["RobertaForTokenClassification",Eb]],["xlm",["XLMForTokenClassification",Ob]],["xlm-roberta",["XLMRobertaForTokenClassification",Db]]]),eo=new Map([["t5",["T5ForConditionalGeneration",ob]],["longt5",["LongT5ForConditionalGeneration",ub]],["mt5",["MT5ForConditionalGeneration",cb]],["bart",["BartForConditionalGeneration",hb]],["mbart",["MBartForConditionalGeneration",gb]],["marian",["MarianMTModel",g$]],["m2m_100",["M2M100ForConditionalGeneration",y$]],["blenderbot",["BlenderbotForConditionalGeneration",vb]],["blenderbot-small",["BlenderbotSmallForConditionalGeneration",$b]]]),Ja=new Map([["bloom",["BloomForCausalLM",_2]],["gpt2",["GPT2LMHeadModel",Jb]],["gptj",["GPTJForCausalLM",i2]],["gpt_bigcode",["GPTBigCodeForCausalLM",o2]],["gpt_neo",["GPTNeoForCausalLM",t2]],["gpt_neox",["GPTNeoXForCausalLM",n2]],["codegen",["CodeGenForCausalLM",u2]],["llama",["LlamaForCausalLM",c2]],["qwen2",["Qwen2ForCausalLM",h2]],["phi",["PhiForCausalLM",m2]],["mpt",["MptForCausalLM",w2]],["opt",["OPTForCausalLM",b2]],["mbart",["MBartForCausalLM",yb]],["mistral",["MistralForCausalLM",j$]],["starcoder2",["Starcoder2ForCausalLM",Y$]],["falcon",["FalconForCausalLM",Q$]],["trocr",["TrOCRForCausalLM",G$]],["stablelm",["StableLmForCausalLM",i1]]]),gm=new Map([["bert",["BertForMaskedLM",Zw]],["roformer",["RoFormerForMaskedLM",iv]],["electra",["ElectraForMaskedLM",mv]],["esm",["EsmForMaskedLM",Wv]],["convbert",["ConvBertForMaskedLM",dv]],["camembert",["CamembertForMaskedLM",vv]],["deberta",["DebertaForMaskedLM",kv]],["deberta-v2",["DebertaV2ForMaskedLM",Tv]],["mpnet",["MPNetForMaskedLM",Kv]],["albert",["AlbertForMaskedLM",ib]],["distilbert",["DistilBertForMaskedLM",Nv]],["roberta",["RobertaForMaskedLM",Sb]],["xlm",["XLMWithLMHeadModel",Ib]],["xlm-roberta",["XLMRobertaForMaskedLM",Bb]],["mobilebert",["MobileBertForMaskedLM",Hv]],["squeezebert",["SqueezeBertForMaskedLM",Jv]]]),_m=new Map([["bert",["BertForQuestionAnswering",tv]],["roformer",["RoFormerForQuestionAnswering",lv]],["electra",["ElectraForQuestionAnswering",yv]],["convbert",["ConvBertForQuestionAnswering",hv]],["camembert",["CamembertForQuestionAnswering",xv]],["deberta",["DebertaForQuestionAnswering",Av]],["deberta-v2",["DebertaV2ForQuestionAnswering",zv]],["mpnet",["MPNetForQuestionAnswering",Qv]],["albert",["AlbertForQuestionAnswering",ab]],["distilbert",["DistilBertForQuestionAnswering",Pv]],["roberta",["RobertaForQuestionAnswering",Cb]],["xlm",["XLMForQuestionAnswering",Mb]],["xlm-roberta",["XLMRobertaForQuestionAnswering",Pb]],["mobilebert",["MobileBertForQuestionAnswering",qv]],["squeezebert",["SqueezeBertForQuestionAnswering",tb]]]),to=new Map([["vision-encoder-decoder",["VisionEncoderDecoderModel",xf]]]),u1=new Map([["vision-encoder-decoder",["VisionEncoderDecoderModel",xf]]]),ym=new Map([["vit",["ViTForImageClassification",x2]],["mobilevit",["MobileViTForImageClassification",C2]],["beit",["BeitForImageClassification",z2]],["deit",["DeiTForImageClassification",F2]],["convnext",["ConvNextForImageClassification",a$]],["convnextv2",["ConvNextV2ForImageClassification",s$]],["dinov2",["Dinov2ForImageClassification",l$]],["resnet",["ResNetForImageClassification",H2]],["swin",["SwinForImageClassification",q2]],["segformer",["SegformerForImageClassification",r1]],["efficientnet",["EfficientNetForImageClassification",o1]]]),wm=new Map([["detr",["DetrForObjectDetection",R2]],["table-transformer",["TableTransformerForObjectDetection",U2]],["yolos",["YolosForObjectDetection",d$]]]),vm=new Map([["owlvit",["OwlViTForObjectDetection",I2]],["owlv2",["Owlv2ForObjectDetection",O2]]]),bm=new Map([["detr",["DetrForSegmentation",D2]],["clipseg",["CLIPSegForImageSegmentation",Qb]]]),$m=new Map([["segformer",["SegformerForSemanticSegmentation",n1]]]),d1=new Map([["sam",["SamModel",h$]]]),xm=new Map([["wav2vec2",["Wav2Vec2ForCTC",v$]],["wav2vec2-bert",["Wav2Vec2BertForCTC",O$]],["unispeech",["UniSpeechForCTC",S$]],["unispeech-sat",["UniSpeechSatForCTC",C$]],["wavlm",["WavLMForCTC",P$]],["hubert",["HubertForCTC",B$]]]),Sm=new Map([["wav2vec2",["Wav2Vec2ForSequenceClassification",b$]],["wav2vec2-bert",["Wav2Vec2BertForSequenceClassification",M$]],["unispeech",["UniSpeechForSequenceClassification",k$]],["unispeech-sat",["UniSpeechSatForSequenceClassification",A$]],["wavlm",["WavLMForSequenceClassification",N$]],["hubert",["HubertForSequenceClassification",R$]],["audio-spectrogram-transformer",["ASTForAudioClassification",Ub]]]),c1=new Map([["wavlm",["WavLMForXVector",U$]]]),p1=new Map([["unispeech-sat",["UniSpeechSatForAudioFrameClassification",I$]],["wavlm",["WavLMForAudioFrameClassification",W$]],["wav2vec2",["Wav2Vec2ForAudioFrameClassification",$$]]]),h1=new Map([["vitmatte",["VitMatteForImageMatting",k2]]]),km=new Map([["swin2sr",["Swin2SRForImageSuperResolution",K2]]]),Em=new Map([["dpt",["DPTForDepthEstimation",X2]],["depth_anything",["DepthAnythingForDepthEstimation",Z2]],["glpn",["GLPNForDepthEstimation",e$]]]),Cm=new Map([["clip",["CLIPVisionModelWithProjection",Hb]],["siglip",["SiglipVisionModel",jb]]]),Am=[[dm,ke.EncoderOnly],[cm,ke.EncoderDecoder],[l1,ke.DecoderOnly],[fm,ke.EncoderOnly],[mm,ke.EncoderOnly],[eo,ke.Seq2Seq],[Js,ke.Seq2Seq],[Ja,ke.DecoderOnly],[gm,ke.EncoderOnly],[_m,ke.EncoderOnly],[to,ke.Vision2Seq],[ym,ke.EncoderOnly],[bm,ke.EncoderOnly],[$m,ke.EncoderOnly],[h1,ke.EncoderOnly],[km,ke.EncoderOnly],[Em,ke.EncoderOnly],[wm,ke.EncoderOnly],[vm,ke.EncoderOnly],[d1,ke.MaskGeneration],[xm,ke.EncoderOnly],[Sm,ke.EncoderOnly],[pm,ke.Seq2Seq],[hm,ke.EncoderOnly],[c1,ke.EncoderOnly],[p1,ke.EncoderOnly],[Cm,ke.EncoderOnly]];for(const[t,e]of Am)for(const[r,n]of t.values())Ga.set(r,e),An.set(n,r),hf.set(r,n);const f1=[["CLIPTextModelWithProjection",Vb,ke.EncoderOnly],["SiglipTextModel",qb,ke.EncoderOnly],["ClapTextModelWithProjection",J$,ke.EncoderOnly],["ClapAudioModelWithProjection",e1,ke.EncoderOnly]];for(const[t,e,r]of f1)Ga.set(t,r),An.set(e,t),hf.set(t,e);class Vn extends Qe{static MODEL_CLASS_MAPPINGS=Am.map(e=>e[0]);static BASE_IF_FAIL=!0}class Im extends Qe{static MODEL_CLASS_MAPPINGS=[fm]}class m1 extends Qe{static MODEL_CLASS_MAPPINGS=[mm]}class ro extends Qe{static MODEL_CLASS_MAPPINGS=[eo]}class g1 extends Qe{static MODEL_CLASS_MAPPINGS=[Js]}class _1 extends Qe{static MODEL_CLASS_MAPPINGS=[pm]}class y1 extends Qe{static MODEL_CLASS_MAPPINGS=[hm]}class w1 extends Qe{static MODEL_CLASS_MAPPINGS=[Ja]}class v1 extends Qe{static MODEL_CLASS_MAPPINGS=[gm]}class b1 extends Qe{static MODEL_CLASS_MAPPINGS=[_m]}class $1 extends Qe{static MODEL_CLASS_MAPPINGS=[to]}class x1 extends Qe{static MODEL_CLASS_MAPPINGS=[ym]}class S1 extends Qe{static MODEL_CLASS_MAPPINGS=[bm]}class k1 extends Qe{static MODEL_CLASS_MAPPINGS=[$m]}class E1 extends Qe{static MODEL_CLASS_MAPPINGS=[wm]}class C1 extends Qe{static MODEL_CLASS_MAPPINGS=[vm]}class A1 extends Qe{static MODEL_CLASS_MAPPINGS=[xm]}class I1 extends Qe{static MODEL_CLASS_MAPPINGS=[Sm]}class T1 extends Qe{static MODEL_CLASS_MAPPINGS=[u1]}class O1 extends Qe{static MODEL_CLASS_MAPPINGS=[km]}class M1 extends Qe{static MODEL_CLASS_MAPPINGS=[Em]}class z1 extends Qe{static MODEL_CLASS_MAPPINGS=[Cm]}class B1 extends xt{constructor({logits:e,past_key_values:r,encoder_outputs:n,decoder_attentions:a=null,cross_attentions:i=null}){super(),this.logits=e,this.past_key_values=r,this.encoder_outputs=n,this.decoder_attentions=a,this.cross_attentions=i}}class Oe extends xt{constructor({logits:e}){super(),this.logits=e}}class R1 extends xt{constructor({logits:e,embeddings:r}){super(),this.logits=e,this.embeddings=r}}class ct extends xt{constructor({logits:e}){super(),this.logits=e}}class pt extends xt{constructor({logits:e}){super(),this.logits=e}}class ft extends xt{constructor({start_logits:e,end_logits:r}){super(),this.start_logits=e,this.end_logits=r}}class Kr extends xt{constructor({logits:e}){super(),this.logits=e}}class D1 extends xt{constructor({alphas:e}){super(),this.alphas=e}}class P1 extends xt{constructor({waveform:e,spectrogram:r}){super(),this.waveform=e,this.spectrogram=r}}const Tt=typeof self<"u",N1=Tt&&self.constructor.name==="DedicatedWorkerGlobalScope";let Er,Tm,hr;if(Tt)Er=(t,e)=>{if(!self.OffscreenCanvas)throw new Error("OffscreenCanvas not supported by this browser.");return new self.OffscreenCanvas(t,e)},hr=self.createImageBitmap,Tm=self.ImageData;else if(Ke)hr=async t=>{const e=(await t.metadata()).channels,{data:r,info:n}=await t.raw().toBuffer({resolveWithObject:!0}),a=new mt(new Uint8ClampedArray(r),n.width,n.height,n.channels);return e!==void 0&&e!==n.channels&&a.convert(e),a};else throw new Error("Unable to load image processing library.");const U1={0:"nearest",1:"lanczos",2:"bilinear",3:"bicubic",4:"box",5:"hamming"},W1=new Map([["png","image/png"],["jpg","image/jpeg"],["jpeg","image/jpeg"],["gif","image/gif"]]);class mt{constructor(e,r,n,a){this.data=e,this.width=r,this.height=n,this.channels=a}get size(){return[this.width,this.height]}static async read(e){if(e instanceof mt)return e;if(typeof e=="string"||e instanceof URL)return await this.fromURL(e);throw new Error(`Unsupported input type: ${typeof e}`)}static fromCanvas(e){if(!Tt)throw new Error("fromCanvas() is only supported in browser environments.");const r=e.getContext("2d").getImageData(0,0,e.width,e.height).data;return new mt(r,e.width,e.height,4)}static async fromURL(e){const r=await ca(e);if(r.status!==200)throw new Error(`Unable to read image from "${e}" (${r.status} ${r.statusText})`);const n=await r.blob();return this.fromBlob(n)}static async fromBlob(e){if(Tt){const r=await hr(e),n=Er(r.width,r.height).getContext("2d");return n.drawImage(r,0,0),new this(n.getImageData(0,0,r.width,r.height).data,r.width,r.height,4)}else{const r=Ke(await e.arrayBuffer());return await hr(r)}}static fromTensor(e,r="CHW"){if(e.dims.length!==3)throw new Error(`Tensor should have 3 dimensions, but has ${e.dims.length} dimensions.`);if(r==="CHW")e=e.transpose(1,2,0);else if(r!=="HWC")throw new Error(`Unsupported channel format: ${r}`);if(!(e.data instanceof Uint8ClampedArray||e.data instanceof Uint8Array))throw new Error(`Unsupported tensor type: ${e.type}`);switch(e.dims[2]){case 1:case 2:case 3:case 4:return new mt(e.data,e.dims[1],e.dims[0],e.dims[2]);default:throw new Error(`Unsupported number of channels: ${e.dims[2]}`)}}grayscale(){if(this.channels===1)return this;const e=new Uint8ClampedArray(this.width*this.height*1);switch(this.channels){case 3:case 4:for(let r=0,n=0;r<this.data.length;r+=this.channels){const a=this.data[r],i=this.data[r+1],s=this.data[r+2];e[n++]=Math.round(.2989*a+.587*i+.114*s)}break;default:throw new Error(`Conversion failed due to unsupported number of channels: ${this.channels}`)}return this._update(e,this.width,this.height,1)}rgb(){if(this.channels===3)return this;const e=new Uint8ClampedArray(this.width*this.height*3);switch(this.channels){case 1:for(let r=0,n=0;r<this.data.length;++r)e[n++]=this.data[r],e[n++]=this.data[r],e[n++]=this.data[r];break;case 4:for(let r=0,n=0;r<this.data.length;r+=4)e[n++]=this.data[r],e[n++]=this.data[r+1],e[n++]=this.data[r+2];break;default:throw new Error(`Conversion failed due to unsupported number of channels: ${this.channels}`)}return this._update(e,this.width,this.height,3)}rgba(){if(this.channels===4)return this;const e=new Uint8ClampedArray(this.width*this.height*4);switch(this.channels){case 1:for(let r=0,n=0;r<this.data.length;++r)e[n++]=this.data[r],e[n++]=this.data[r],e[n++]=this.data[r],e[n++]=255;break;case 3:for(let r=0,n=0;r<this.data.length;r+=3)e[n++]=this.data[r],e[n++]=this.data[r+1],e[n++]=this.data[r+2],e[n++]=255;break;default:throw new Error(`Conversion failed due to unsupported number of channels: ${this.channels}`)}return this._update(e,this.width,this.height,4)}async resize(e,r,{resample:n=2}={}){let a=U1[n]??n;if(Tt){const i=this.channels,s=this.toCanvas(),o=Er(e,r).getContext("2d");return o.drawImage(s,0,0,e,r),new mt(o.getImageData(0,0,e,r).data,e,r,4).convert(i)}else{let i=this.toSharp();switch(a){case"box":case"hamming":(a==="box"||a==="hamming")&&(console.warn(`Resampling method ${a} is not yet supported. Using bilinear instead.`),a="bilinear");case"nearest":case"bilinear":case"bicubic":i=i.affine([e/this.width,0,0,r/this.height],{interpolator:a});break;case"lanczos":i=i.resize({width:e,height:r,fit:"fill",kernel:"lanczos3"});break;default:throw new Error(`Resampling method ${a} is not supported.`)}return await hr(i)}}async pad([e,r,n,a]){if(e=Math.max(e,0),r=Math.max(r,0),n=Math.max(n,0),a=Math.max(a,0),e===0&&r===0&&n===0&&a===0)return this;if(Tt){const i=this.channels,s=this.toCanvas(),o=this.width+e+r,l=this.height+n+a,d=Er(o,l).getContext("2d");return d.drawImage(s,0,0,this.width,this.height,e,n,o,l),new mt(d.getImageData(0,0,o,l).data,o,l,4).convert(i)}else{const i=this.toSharp().extend({left:e,right:r,top:n,bottom:a});return await hr(i)}}async crop([e,r,n,a]){if(e=Math.max(e,0),r=Math.max(r,0),n=Math.min(n,this.width-1),a=Math.min(a,this.height-1),e===0&&r===0&&n===this.width-1&&a===this.height-1)return this;const i=n-e+1,s=a-r+1;if(Tt){const o=this.channels,l=this.toCanvas(),d=Er(i,s).getContext("2d");return d.drawImage(l,e,r,i,s,0,0,i,s),new mt(d.getImageData(0,0,i,s).data,i,s,4).convert(o)}else{const o=this.toSharp().extract({left:e,top:r,width:i,height:s});return await hr(o)}}async center_crop(e,r){if(this.width===e&&this.height===r)return this;const n=(this.width-e)/2,a=(this.height-r)/2;if(Tt){const i=this.channels,s=this.toCanvas(),o=Er(e,r).getContext("2d");let l=0,d=0,c=0,u=0;return n>=0?l=n:c=-n,a>=0?d=a:u=-a,o.drawImage(s,l,d,e,r,c,u,e,r),new mt(o.getImageData(0,0,e,r).data,e,r,4).convert(i)}else{let i=this.toSharp();if(n>=0&&a>=0)i=i.extract({left:Math.floor(n),top:Math.floor(a),width:e,height:r});else if(n<=0&&a<=0){const s=Math.floor(-a),o=Math.floor(-n);i=i.extend({top:s,left:o,right:e-this.width-o,bottom:r-this.height-s})}else{let s=[0,0],o=0;a<0?(s[0]=Math.floor(-a),s[1]=r-this.height-s[0]):o=Math.floor(a);let l=[0,0],d=0;n<0?(l[0]=Math.floor(-n),l[1]=e-this.width-l[0]):d=Math.floor(n),i=i.extend({top:s[0],bottom:s[1],left:l[0],right:l[1]}).extract({left:d,top:o,width:e,height:r})}return await hr(i)}}async toBlob(e="image/png",r=1){if(!Tt)throw new Error("toBlob() is only supported in browser environments.");return await this.toCanvas().convertToBlob({type:e,quality:r})}toTensor(e="CHW"){let r=new re("uint8",new Uint8Array(this.data),[this.height,this.width,this.channels]);if(e!=="HWC")if(e==="CHW")r=r.permute(2,0,1);else throw new Error(`Unsupported channel format: ${e}`);return r}toCanvas(){if(!Tt)throw new Error("toCanvas() is only supported in browser environments.");const e=this.clone().rgba(),r=Er(e.width,e.height),n=new Tm(e.data,e.width,e.height);return r.getContext("2d").putImageData(n,0,0),r}_update(e,r,n,a=null){return this.data=e,this.width=r,this.height=n,a!==null&&(this.channels=a),this}clone(){return new mt(this.data.slice(),this.width,this.height,this.channels)}convert(e){if(this.channels===e)return this;switch(e){case 1:this.grayscale();break;case 3:this.rgb();break;case 4:this.rgba();break;default:throw new Error(`Conversion failed due to unsupported number of channels: ${this.channels}`)}return this}async save(e){if(Tt){if(N1)throw new Error("Unable to save an image from a Web Worker.");const r=e.split(".").pop().toLowerCase(),n=W1.get(r)??"image/png",a=await this.toBlob(n),i=URL.createObjectURL(a),s=document.createElement("a");s.href=i,s.download=e,s.click(),s.remove()}else{if(tt.useFS)return await this.toSharp().toFile(e);throw new Error("Unable to save the image because filesystem is disabled in this environment.")}}toSharp(){if(Tt)throw new Error("toSharp() is only supported in server-side environments.");return Ke(this.data,{raw:{width:this.width,height:this.height,channels:this.channels}})}}async function L1(t,e){if(typeof AudioContext>"u")throw Error("Unable to load audio from path/URL since `AudioContext` is not available in your environment. Instead, audio data should be passed directly to the pipeline/processor. For more information and some example code, see https://huggingface.co/docs/transformers.js/guides/node-audio-processing.");const r=await(await ca(t)).arrayBuffer(),n=new AudioContext({sampleRate:e});typeof e>"u"&&console.warn(`No sampling rate provided, using default of ${n.sampleRate}Hz.`);const a=await n.decodeAudioData(r);let i;if(a.numberOfChannels===2){const s=Math.sqrt(2),o=a.getChannelData(0),l=a.getChannelData(1);i=new Float32Array(o.length);for(let d=0;d<a.length;++d)i[d]=s*(o[d]+l[d])/2}else i=a.getChannelData(0);return i}function Om(t){if(t<1)return new Float64Array;if(t===1)return new Float64Array([1]);const e=t-1,r=Math.PI/e,n=new Float64Array(t);for(let a=0;a<t;++a){const i=2*a-e;n[a]=.5+.5*Math.cos(r*i)}return n}const F1={htk:t=>2595*Math.log10(1+t/700),kaldi:t=>1127*Math.log(1+t/700),slaney:(t,e=1e3,r=15,n=27/Math.log(6.4))=>t>=e?r+Math.log(t/e)*n:3*t/200};function no(t,e="htk"){const r=F1[e];if(!r)throw new Error('mel_scale should be one of "htk", "slaney" or "kaldi".');return typeof t=="number"?r(t):t.map(n=>r(n))}const V1={htk:t=>700*(10**(t/2595)-1),kaldi:t=>700*(Math.exp(t/1127)-1),slaney:(t,e=1e3,r=15,n=Math.log(6.4)/27)=>t>=r?e*Math.exp(n*(t-r)):200*t/3};function H1(t,e="htk"){const r=V1[e];if(!r)throw new Error('mel_scale should be one of "htk", "slaney" or "kaldi".');return typeof t=="number"?r(t):t.map(n=>r(n))}function G1(t,e){const r=Float64Array.from({length:e.length-1},(s,o)=>e[o+1]-e[o]),n=Array.from({length:t.length},()=>new Array(e.length));for(let s=0;s<t.length;++s){const o=n[s];for(let l=0;l<e.length;++l)o[l]=e[l]-t[s]}const a=e.length-2,i=Array.from({length:a},()=>new Array(t.length));for(let s=0;s<t.length;++s){const o=n[s];for(let l=0;l<a;++l){const d=-o[l]/r[l],c=o[l+2]/r[l+1];i[l][s]=Math.max(0,Math.min(d,c))}}return i}function Mm(t,e,r){const n=(e-t)/(r-1);return Float64Array.from({length:r},(a,i)=>t+n*i)}function Hn(t,e,r,n,a,i=null,s="htk",o=!1){if(i!==null&&i!=="slaney")throw new Error('norm must be one of null or "slaney"');const l=no(r,s),d=no(n,s),c=Mm(l,d,e+2);let u=H1(c,s),h;if(o){const g=a/(t*2);h=no(Float64Array.from({length:t},(y,w)=>w*g),s),u=c}else h=Mm(0,Math.floor(a/2),t);const f=G1(h,u);if(i!==null&&i==="slaney")for(let g=0;g<e;++g){const y=f[g],w=2/(u[g+2]-u[g]);for(let v=0;v<t;++v)y[v]*=w}return f}function q1(t,e,r){const n=new t.constructor(t.length+e+r),a=t.length-1;for(let i=0;i<t.length;++i)n[e+i]=t[i];for(let i=1;i<=e;++i)n[e-i]=t[ua(i,a)];for(let i=1;i<=r;++i)n[a+e+i]=t[ua(a-i,a)];return n}function zm(t,e,r,n,a){if(r<=0)throw new Error("reference must be greater than zero");if(n<=0)throw new Error("min_value must be greater than zero");r=Math.max(n,r);const i=Math.log10(r);for(let s=0;s<t.length;++s)t[s]=e*Math.log10(Math.max(n,t[s])-i);if(a!==null){if(a<=0)throw new Error("db_range must be greater than zero");const s=Et(t)[0]-a;for(let o=0;o<t.length;++o)t[o]=Math.max(t[o],s)}return t}function j1(t,e=1,r=1e-5,n=null){return zm(t,20,e,r,n)}function K1(t,e=1,r=1e-10,n=null){return zm(t,10,e,r,n)}function ei(t,e,r,n,{fft_length:a=null,power:i=1,center:s=!0,pad_mode:o="reflect",onesided:l=!0,preemphasis:d=null,mel_filters:c=null,mel_floor:u=1e-10,log_mel:h=null,reference:f=1,min_value:g=1e-10,db_range:y=null,remove_dc_offset:w=null,max_num_frames:v=null,do_pad:S=!0,transpose:E=!1}={}){const x=e.length;if(a===null&&(a=r),r>a)throw Error(`frame_length (${r}) may not be larger than fft_length (${a})`);if(x!==r)throw new Error(`Length of the window (${x}) must equal frame_length (${r})`);if(n<=0)throw new Error("hop_length must be greater than zero");if(s){if(o!=="reflect")throw new Error(`pad_mode="${o}" not implemented yet.`);const L=Math.floor((a-1)/2)+1;t=q1(t,L,L)}const A=Math.floor(1+Math.floor((t.length-r)/n)),T=l?Math.floor(a/2)+1:a;let B=A,U=A;v!==null&&(v>A?S&&(U=v):U=B=v);const H=new Tg(a),K=new Float64Array(a),O=new Float64Array(H.outputBufferSize),G=new Array(B);for(let L=0;L<B;++L){const V=L*n;for(let X=0;X<r;++X)K[X]=t[V+X];if(w){let X=0;for(let F=0;F<r;++F)X+=K[F];const ue=X/r;for(let F=0;F<r;++F)K[F]-=ue}if(d!==null){for(let X=r-1;X>=1;--X)K[X]-=d*K[X-1];K[0]*=1-d}for(let X=0;X<e.length;++X)K[X]*=e[X];H.realTransform(O,K);const te=new Array(T);for(let X=0;X<te.length;++X){const ue=X<<1;te[X]=O[ue]**2+O[ue+1]**2}G[L]=te}if(i!==null&&i!==2){const L=2/i;for(let V=0;V<G.length;++V){const te=G[V];for(let X=0;X<te.length;++X)te[X]**=L}}const ne=c.length,q=new Float32Array(ne*U),D=E?[U,ne]:[ne,U];for(let L=0;L<ne;++L){const V=c[L];for(let te=0;te<B;++te){const X=G[te];let ue=0;for(let F=0;F<T;++F)ue+=V[F]*X[F];q[E?te*ne+L:L*B+te]=Math.max(u,ue)}}if(i!==null&&h!==null){const L=Math.min(q.length,B*ne);switch(h){case"log":for(let V=0;V<L;++V)q[V]=Math.log(q[V]);break;case"log10":for(let V=0;V<L;++V)q[V]=Math.log10(q[V]);break;case"dB":if(i===1)j1(q,f,g,y);else if(i===2)K1(q,f,g,y);else throw new Error(`Cannot use log_mel option '${h}' with power ${i}`);break;default:throw new Error(`log_mel must be one of null, 'log', 'log10' or 'dB'. Got '${h}'`)}}return{data:q,dims:D}}function ti(t,e,{periodic:r=!0,frame_length:n=null,center:a=!0}={}){const i=r?t+1:t;let s;switch(e){case"boxcar":s=new Float64Array(i).fill(1);break;case"hann":case"hann_window":s=Om(i);break;case"povey":s=Om(i).map(o=>Math.pow(o,.85));break;default:throw new Error(`Unknown window type ${e}.`)}if(r&&(s=s.subarray(0,t)),n===null)return s;if(t>n)throw new Error(`Length of the window (${t}) may not be larger than frame_length (${n})`);return s}function Y1([t,e,r,n]){return[t-r/2,e-n/2,t+r/2,e+n/2]}function ao(t,e=.5,r=null,n=!1){const a=t.logits,i=t.pred_boxes,[s,o,l]=a.dims;if(r!==null&&r.length!==s)throw Error("Make sure that you pass in as many target sizes as the batch dimension of the logits");let d=[];for(let c=0;c<s;++c){let u=r!==null?r[c]:null,h={boxes:[],classes:[],scores:[]},f=a[c],g=i[c];for(let y=0;y<o;++y){let w=f[y],v=[],S;if(n){S=w.sigmoid().data;for(let E=0;E<S.length;++E)S[E]>e&&v.push(E)}else{let E=Et(w.data)[1];if(E===l-1||(S=dt(w.data),S[E]<e))continue;v.push(E)}for(const E of v){let x=g[y].data;x=Y1(x),u!==null&&(x=x.map((A,T)=>A*u[(T+1)%2])),h.boxes.push(x),h.classes.push(E),h.scores.push(S[E])}}d.push(h)}return d}function Gn(t,e){if(!(t instanceof Float32Array||t instanceof Float64Array))throw new Error(`${e} expects input to be a Float32Array or a Float64Array, but got ${t?.constructor?.name??typeof t} instead. If using the feature extractor directly, remember to use \`read_audio(url, sampling_rate)\` to obtain the raw audio data of the file/url.`)}function Bm(t,e,r=0,n=null){const a=t/e;let i=Mg(a)*e;return n!==null&&i>n&&(i=Math.floor(a)*e),i<r&&(i=Math.ceil(a)*e),i}function io([t,e],r){return[Math.max(Math.floor(t/r),1)*r,Math.max(Math.floor(e/r),1)*r]}class Cr extends yt{constructor(e){super(),this.config=e}}class je extends Cr{constructor(e){super(e),this.image_mean=this.config.image_mean??this.config.mean,this.image_std=this.config.image_std??this.config.std,this.resample=this.config.resample??2,this.do_rescale=this.config.do_rescale??!0,this.rescale_factor=this.config.rescale_factor??1/255,this.do_normalize=this.config.do_normalize,this.do_resize=this.config.do_resize,this.do_thumbnail=this.config.do_thumbnail,this.size=this.config.size,this.size_divisibility=this.config.size_divisibility??this.config.size_divisor,this.do_center_crop=this.config.do_center_crop,this.crop_size=this.config.crop_size,this.do_convert_rgb=this.config.do_convert_rgb??!0,this.do_crop_margin=this.config.do_crop_margin,this.pad_size=this.config.pad_size,this.do_pad=this.config.do_pad,this.do_pad&&!this.pad_size&&this.size&&this.size.width!==void 0&&this.size.height!==void 0&&(this.pad_size=this.size)}async thumbnail(e,r,n=2){const a=e.height,i=e.width,s=r.height,o=r.width;let l=Math.min(a,s),d=Math.min(i,o);return l===a&&d===i?e:(a>i?d=Math.floor(i*l/a):i>a&&(l=Math.floor(a*d/i)),await e.resize(d,l,{resample:n}))}async crop_margin(e,r=200){const n=e.clone().grayscale(),a=So(n.data)[0],i=Et(n.data)[0]-a;if(i===0)return e;const s=r/255;let o=n.width,l=n.height,d=0,c=0;for(let u=0;u<n.height;++u){const h=u*n.width;for(let f=0;f<n.width;++f)(n.data[h+f]-a)/i<s&&(o=Math.min(o,f),l=Math.min(l,u),d=Math.max(d,f),c=Math.max(c,u))}return e=await e.crop([o,l,d,c]),e}pad_image(e,r,n,{mode:a="constant",center:i=!1,constant_values:s=0}={}){const[o,l,d]=r;let c,u;if(typeof n=="number"?(c=n,u=n):(c=n.width,u=n.height),c!==l||u!==o){const h=new Float32Array(c*u*d);if(Array.isArray(s))for(let y=0;y<h.length;++y)h[y]=s[y%d];else s!==0&&h.fill(s);const[f,g]=i?[Math.floor((c-l)/2),Math.floor((u-o)/2)]:[0,0];for(let y=0;y<o;++y){const w=(y+g)*c,v=y*l;for(let S=0;S<l;++S){const E=(w+S+f)*d,x=(v+S)*d;for(let A=0;A<d;++A)h[E+A]=e[x+A]}}if(a==="symmetric"){if(i)throw new Error("`center` padding is not supported when `mode` is set to `symmetric`.");const y=o-1,w=l-1;for(let v=0;v<u;++v){const S=v*c,E=ua(v,y)*l;for(let x=0;x<c;++x){if(v<o&&x<l)continue;const A=(S+x)*d,T=(E+ua(x,w))*d;for(let B=0;B<d;++B)h[A+B]=e[T+B]}}}e=h,r=[u,c,d]}return[e,r]}rescale(e){for(let r=0;r<e.length;++r)e[r]=this.rescale_factor*e[r]}get_resize_output_image_size(e,r){const[n,a]=e.size;let i,s;if(this.do_thumbnail){const{height:o,width:l}=r;i=Math.min(o,l)}else Number.isInteger(r)?(i=r,s=this.config.max_size??i):r!==void 0&&(i=r.shortest_edge,s=r.longest_edge);if(i!==void 0||s!==void 0){const o=i===void 0?1:Math.max(i/n,i/a),l=n*o,d=a*o,c=s===void 0?1:Math.min(s/l,s/d);let u=Math.floor(Number((l*c).toFixed(2))),h=Math.floor(Number((d*c).toFixed(2)));return this.size_divisibility!==void 0&&([u,h]=io([u,h],this.size_divisibility)),[u,h]}else if(r!==void 0&&r.width!==void 0&&r.height!==void 0){let o=r.width,l=r.height;if(this.config.keep_aspect_ratio&&this.config.ensure_multiple_of){let d=l/a,c=o/n;Math.abs(1-c)<Math.abs(1-d)?d=c:c=d,l=Bm(d*a,this.config.ensure_multiple_of),o=Bm(c*n,this.config.ensure_multiple_of)}return[o,l]}else{if(this.size_divisibility!==void 0)return io([n,a],this.size_divisibility);throw new Error(`Could not resize image due to unsupported \`this.size\` option in config: ${JSON.stringify(r)}`)}}async resize(e){const[r,n]=this.get_resize_output_image_size(e,this.size);return await e.resize(r,n,{resample:this.resample})}async preprocess(e,{do_normalize:r=null,do_pad:n=null,do_convert_rgb:a=null,do_convert_grayscale:i=null}={}){this.do_crop_margin&&(e=await this.crop_margin(e));const[s,o]=e.size;if(a??this.do_convert_rgb?e=e.rgb():i&&(e=e.grayscale()),this.do_resize&&(e=await this.resize(e)),this.do_thumbnail&&(e=await this.thumbnail(e,this.size,this.resample)),this.do_center_crop){let h,f;Number.isInteger(this.crop_size)?(h=this.crop_size,f=this.crop_size):(h=this.crop_size.width,f=this.crop_size.height),e=await e.center_crop(h,f)}const l=[e.height,e.width];let d=Float32Array.from(e.data),c=[e.height,e.width,e.channels];if(this.do_rescale&&this.rescale(d),r??this.do_normalize){let h=this.image_mean;Array.isArray(this.image_mean)||(h=new Array(e.channels).fill(h));let f=this.image_std;if(Array.isArray(this.image_std)||(f=new Array(e.channels).fill(h)),h.length!==e.channels||f.length!==e.channels)throw new Error(`When set to arrays, the length of \`image_mean\` (${h.length}) and \`image_std\` (${f.length}) must match the number of channels in the image (${e.channels}).`);for(let g=0;g<d.length;g+=e.channels)for(let y=0;y<e.channels;++y)d[g+y]=(d[g+y]-h[y])/f[y]}if(n??this.do_pad){if(this.pad_size)[d,c]=this.pad_image(d,[e.height,e.width,e.channels],this.pad_size);else if(this.size_divisibility){const[h,f]=io([c[1],c[0]],this.size_divisibility);[d,c]=this.pad_image(d,c,{width:h,height:f})}}const u=new re("float32",d,c).permute(2,0,1);return{original_size:[o,s],reshaped_input_size:l,pixel_values:u}}async _call(e,...r){Array.isArray(e)||(e=[e]);const n=await Promise.all(e.map(a=>this.preprocess(a)));return{pixel_values:Da(n.map(a=>a.pixel_values),0),original_sizes:n.map(a=>a.original_size),reshaped_input_sizes:n.map(a=>a.reshaped_input_size)}}}class X1 extends je{post_process_semantic_segmentation(e,r=null){const n=e.logits,a=n.dims[0];if(r!==null&&r.length!==a)throw Error("Make sure that you pass in as many target sizes as the batch dimension of the logits");const i=[];for(let s=0;s<a;++s){const o=r!==null?r[s]:null;let l=n[s];o!==null&&(l=bn(l,o,"bilinear",!1));const[d,c]=o??l.dims.slice(-2),u=new re("int32",new Int32Array(d*c),[d,c]),h=l[0].data;for(let w=1;w<l.dims[0];++w){const v=l[w].data;for(let S=0;S<v.length;++S)v[S]>h[S]&&(h[S]=v[S],u.data[S]=w)}const f=new Array(l.dims[0]),g=u.data;for(let w=0;w<g.length;++w){const v=g[w];f[v]=v}const y=f.filter(w=>w!==void 0);i.push({segmentation:u,labels:y})}return i}}class Rm extends je{}class Q1 extends Rm{}class Z1 extends je{}class J1 extends je{}class ex extends je{}class tx extends je{}class rx extends je{}class Dm extends je{constructor(e){super(e),this.crop_pct=this.config.crop_pct??224/256}async resize(e){const r=this.size?.shortest_edge;if(r===void 0)throw new Error("Size dictionary must contain 'shortest_edge' key.");if(r<384){const n=Math.floor(r/this.crop_pct),[a,i]=this.get_resize_output_image_size(e,{shortest_edge:n});e=await e.resize(a,i,{resample:this.resample}),e=await e.center_crop(r,r)}else e=await e.resize(r,r,{resample:this.resample});return e}}class nx extends Dm{}class ax extends je{}class ix extends je{}class sx extends je{constructor(e){super(e),this.include_top=this.config.include_top??!0,this.include_top&&(this.image_std=this.image_std.map(r=>r*r))}}class ox extends je{}class Pm extends je{post_process_object_detection(...e){return ao(...e)}}class lx extends Pm{}class ux extends je{}class dx extends je{}class Nm extends je{pad_image(e,r,n,a={}){const[i,s,o]=r;let l=this.image_mean;Array.isArray(this.image_mean)||(l=new Array(o).fill(l));let d=this.image_std;Array.isArray(d)||(d=new Array(o).fill(l));const c=l.map((u,h)=>-u/d[h]);return super.pad_image(e,r,n,{center:!0,constant_values:c,...a})}}class cx extends Nm{}class px extends je{async _call(e){const r=await super._call(e),n=[r.pixel_values.dims[0],64,64],a=new re("int64",new BigInt64Array(n.reduce((i,s)=>i*s)).fill(1n),n);return{...r,pixel_mask:a}}post_process_object_detection(...e){return ao(...e)}remove_low_and_no_objects(e,r,n,a){let i=[],s=[],o=[];for(let l=0;l<e.dims[0];++l){let d=e[l],c=r[l],u=Et(d.data)[1];if(u===a)continue;let h=dt(d.data)[u];h>n&&(i.push(c),s.push(h),o.push(u))}return[i,s,o]}check_segment_validity(e,r,n,a=.5,i=.8){let s=[],o=0,l=0;for(let c=0;c<e.length;++c)e[c]===n&&(s.push(c),++o),r[n].data[c]>=a&&++l;let d=o>0&&l>0;return d&&(d=o/l>i),[d,s]}compute_segments(e,r,n,a,i,s=null,o=null){let[l,d]=o??e[0].dims,c=new re("int32",new Int32Array(l*d),[l,d]),u=[];if(o!==null)for(let y=0;y<e.length;++y)e[y]=bn(e[y],o,"bilinear",!1);let h=new Int32Array(e[0].data.length),f=new Float32Array(e[0].data.length);for(let y=0;y<e.length;++y){let w=r[y];for(let v=0;v<e[y].data.length;++v)e[y].data[v]*=w,e[y].data[v]>f[v]&&(h[v]=y,f[v]=e[y].data[v])}let g=0;for(let y=0;y<n.length;++y){let w=n[y],[v,S]=this.check_segment_validity(h,e,y,a,i);if(v){++g;for(let E of S)c.data[E]=g;u.push({id:g,label_id:w,score:r[y]})}}return[c,u]}post_process_panoptic_segmentation(e,r=.5,n=.5,a=.8,i=null,s=null){i===null&&(console.warn("`label_ids_to_fuse` unset. No instance will be fused."),i=new Set);const o=e.logits,l=e.pred_masks.sigmoid();let[d,c,u]=o.dims;if(u-=1,s!==null&&s.length!==d)throw Error("Make sure that you pass in as many target sizes as the batch dimension of the logits");let h=[];for(let f=0;f<d;++f){let g=s!==null?s[f]:null,y=o[f],w=l[f],[v,S,E]=this.remove_low_and_no_objects(y,w,r,u);if(E.length===0){let[T,B]=g??w.dims.slice(-2),U=new re("int32",new Int32Array(T*B).fill(-1),[T,B]);h.push({segmentation:U,segments_info:[]});continue}let[x,A]=this.compute_segments(v,S,E,n,a,i,g);h.push({segmentation:x,segments_info:A})}return h}post_process_instance_segmentation(){throw Error("Not implemented yet")}}class hx extends je{post_process_object_detection(...e){return ao(...e)}}class fx extends je{reshape_input_points(e,r,n){e=structuredClone(e);let a=yo(e);if(a.length===3)a=[1,...a],e=[e];else if(a.length!==4)throw Error("The input_points must be a 4D tensor of shape `batch_size`, `point_batch_size`, `nb_points_per_image`, `2`.");for(let i=0;i<e.length;++i){let s=r[i],o=n[i],l=[o[0]/s[0],o[1]/s[1]];for(let d=0;d<e[i].length;++d)for(let c=0;c<e[i][d].length;++c)for(let u=0;u<e[i][d][c].length;++u)e[i][d][c][u]*=l[u]}return new re("float32",Float32Array.from(e.flat(1/0)),a)}add_input_labels(e,r){let n=yo(e);if(n.length===2)n=[1,...n],e=[e];else if(n.length!==3)throw Error("The input_points must be a 4D tensor of shape `batch_size`, `point_batch_size`, `nb_points_per_image`, `2`.");if(n.some((a,i)=>a!==r.dims[i]))throw Error(`The first ${n.length} dimensions of 'input_points' and 'input_labels' must be the same.`);return new re("int64",e.flat(1/0).map(BigInt),n)}async _call(e,r=null,n=null){const a=await super._call(e);if(r&&(a.input_points=this.reshape_input_points(r,a.original_sizes,a.reshaped_input_sizes)),n){if(!a.input_points)throw Error("`input_points` must be provided if `input_labels` are provided.");a.input_labels=this.add_input_labels(n,a.input_points)}return a}post_process_masks(e,r,n,{mask_threshold:a=0,binarize:i=!0,pad_size:s=null}={}){const o=[];s=s??this.pad_size;const l=[s.height,s.width];for(let d=0;d<r.length;++d){const c=r[d],u=n[d],h=e[d],f=[];for(let g=0;g<h.dims[0];++g){const y=h[g];let w=bn(y,l,"bilinear",!1);if(w=w.slice(null,[0,u[0]],[0,u[1]]),w=bn(w,c,"bilinear",!1),i){const v=new Uint8Array(w.data.length);for(let S=0;S<w.data.length;++S)w.data[S]>a&&(v[S]=1);w=new re("bool",v,w.dims)}f.push(w)}o.push(Da(f))}return o}generate_crop_boxes(e,r,{crop_n_layers:n=0,overlap_ratio:a=512/1500,points_per_crop:i=32,crop_n_points_downscale_factor:s=1}={}){}}class mx extends je{pad_image(e,r,n,a={}){const[i,s,o]=r;return super.pad_image(e,r,{width:s+(n-s%n)%n,height:i+(n-i%n)%n},{mode:"symmetric",center:!1,constant_values:-1,...a})}}class gx extends je{async _call(e,r){Array.isArray(e)||(e=[e]),Array.isArray(r)||(r=[r]);const n=await Promise.all(e.map(i=>this.preprocess(i))),a=await Promise.all(r.map(i=>this.preprocess(i,{do_normalize:!1,do_convert_rgb:!1,do_convert_grayscale:!0})));return{pixel_values:Da(n.map((i,s)=>Ra([i.pixel_values,a[s].pixel_values],0)),0),original_sizes:n.map(i=>i.original_size),reshaped_input_sizes:n.map(i=>i.reshaped_input_size)}}}class _x extends Cr{constructor(e){super(e),this.config.mel_filters??=Hn(Math.floor(1+this.config.n_fft/2),this.config.feature_size,0,8e3,this.config.sampling_rate,"slaney","slaney"),this.window=ti(this.config.n_fft,"hann")}_extract_fbank_features(e){const{data:r,dims:n}=ei(e,this.window,this.config.n_fft,this.config.hop_length,{power:2,mel_filters:this.config.mel_filters,log_mel:"log10",max_num_frames:this.config.nb_max_frames}),a=Et(r)[0];for(let i=0;i<r.length;++i)r[i]=(Math.max(r[i],a-8)+4)/4;return{data:r,dims:n}}async _call(e){Gn(e,"WhisperFeatureExtractor");let r;e.length>this.config.n_samples?(console.warn("Attempting to extract features for audio longer than 30 seconds. If using a pipeline to extract transcript from a long audio clip, remember to specify `chunk_length_s` and/or `stride_length_s`."),r=e.slice(0,this.config.n_samples)):(r=new Float32Array(this.config.n_samples),r.set(e));const{data:n,dims:a}=this._extract_fbank_features(r);return{input_features:new re("float32",n,[1,...a])}}}class yx extends Cr{_zero_mean_unit_var_norm(e){const r=e.reduce((a,i)=>a+i,0)/e.length,n=e.reduce((a,i)=>a+(i-r)**2,0)/e.length;return e.map(a=>(a-r)/Math.sqrt(n+1e-7))}async _call(e){Gn(e,"Wav2Vec2FeatureExtractor"),e instanceof Float64Array&&(e=new Float32Array(e));let r=e;this.config.do_normalize&&(r=this._zero_mean_unit_var_norm(r));const n=[1,r.length];return{input_values:new re("float32",r,n),attention_mask:new re("int64",new BigInt64Array(r.length).fill(1n),n)}}}class wx extends Cr{constructor(e){super(e);const r=this.config.sampling_rate,n=Hn(256,this.config.num_mel_bins,20,Math.floor(r/2),r,null,"kaldi",!0);for(let a=0;a<n.length;++a)n[a].push(0);this.mel_filters=n,this.window=ti(400,"povey",{periodic:!1})}_extract_fbank_features(e,r){return e=e.map(n=>n*32768),ei(e,this.window,400,160,{fft_length:512,power:2,center:!1,preemphasis:.97,mel_filters:this.mel_filters,log_mel:"log",mel_floor:1192092955078125e-22,remove_dc_offset:!0,max_num_frames:r,transpose:!0})}async _call(e,{padding:r=!0,pad_to_multiple_of:n=2,do_normalize_per_mel_bins:a=!0,return_attention_mask:i=!0}={}){Gn(e,"SeamlessM4TFeatureExtractor");let s=this._extract_fbank_features(e,this.config.max_length);if(a){const[f,g]=s.dims;for(let y=0;y<g;++y){let w=0;for(let x=0;x<f;++x)w+=s.data[x*g+y];const v=w/f;let S=0;for(let x=0;x<f;++x)S+=(s.data[x*g+y]-v)**2;S/=f-1;const E=Math.sqrt(S+1e-7);for(let x=0;x<f;++x){const A=x*g+y;s.data[A]=(s.data[A]-v)/E}}}let o;if(r){const[f,g]=s.dims,y=f%n;if(y>0){const w=new Float32Array(g*(f+y));w.set(s.data),w.fill(this.config.padding_value,s.data.length);const v=f+y;s={data:w,dims:[v,g]},i&&(o=new re("int64",new BigInt64Array(v),[1,v]),o.data.fill(1n,0,f))}}const[l,d]=s.dims,c=this.config.stride;if(l%c!==0)throw new Error(`The number of frames (${l}) must be a multiple of the stride (${c}).`);const u=new re("float32",s.data,s.dims).view(1,Math.floor(l/c),d*c),h={input_features:u};if(i){const f=u.dims[1],g=new re("int64",new BigInt64Array(f),[1,f]);if(o)for(let y=1,w=0;y<l;y+=c,++w)g.data[w]=o.data[y];else g.data.fill(1n);h.attention_mask=g}return h}}class vx extends Cr{constructor(e){super(e);const r=this.config.sampling_rate,n=Hn(256,this.config.num_mel_bins,20,Math.floor(r/2),r,null,"kaldi",!0);for(let a=0;a<n.length;++a)n[a].push(0);this.mel_filters=n,this.window=ti(400,"hann",{periodic:!1}),this.mean=this.config.mean,this.std=this.config.std}_extract_fbank_features(e,r){return ei(e,this.window,400,160,{fft_length:512,power:2,center:!1,preemphasis:.97,mel_filters:this.mel_filters,log_mel:"log",mel_floor:1192092955078125e-22,remove_dc_offset:!0,max_num_frames:r,transpose:!0})}async _call(e){Gn(e,"ASTFeatureExtractor");const r=this._extract_fbank_features(e,this.config.max_length);if(this.config.do_normalize){const n=this.std*2;for(let a=0;a<r.data.length;++a)r.data[a]=(r.data[a]-this.mean)/n}return{input_values:new re("float32",r.data,[1,...r.dims])}}}class bx extends Cr{constructor(e){super(e),this.mel_filters=Hn(this.config.nb_frequency_bins,this.config.feature_size,this.config.frequency_min,this.config.frequency_max,this.config.sampling_rate,null,"htk"),this.mel_filters_slaney=Hn(this.config.nb_frequency_bins,this.config.feature_size,this.config.frequency_min,this.config.frequency_max,this.config.sampling_rate,"slaney","slaney"),this.window=ti(this.config.fft_window_size,"hann")}_get_input_mel(e,r,n,a){let i,s=!1;const o=e.length-r;if(o>0)if(n==="rand_trunc"){s=!0;const l=Math.floor(Math.random()*(o+1));e=e.subarray(l,l+r),i=this._extract_fbank_features(e,this.mel_filters_slaney,this.config.nb_max_samples),i.dims=[1,...i.dims]}else throw new Error(`Truncation strategy "${n}" not implemented`);else{if(o<0){let l=new Float64Array(r);if(l.set(e),a==="repeat")for(let d=e.length;d<r;d+=e.length)l.set(e.subarray(0,Math.min(e.length,r-d)),d);else if(a==="repeatpad")for(let d=e.length;d<-o;d+=e.length)l.set(e,d);e=l}if(n==="fusion")throw new Error(`Truncation strategy "${n}" not implemented`);i=this._extract_fbank_features(e,this.mel_filters_slaney,this.config.nb_max_samples),i.dims=[1,...i.dims]}return{...i,longer:s}}_extract_fbank_features(e,r,n=null){return ei(e,this.window,this.config.fft_window_size,this.config.hop_length,{power:2,mel_filters:r,log_mel:"dB",max_num_frames:n,do_pad:!1,transpose:!0})}async _call(e,{max_length:r=null}={}){Gn(e,"ClapFeatureExtractor");const n=this._get_input_mel(e,r??this.config.nb_max_samples,this.config.truncation,this.config.padding);return{input_features:new re("float32",n.data,[1,...n.dims])}}}class $x extends Cr{}class Yr extends yt{constructor(e){super(),this.feature_extractor=e}async _call(e,...r){return await this.feature_extractor(e,...r)}}class xx extends Yr{async _call(...e){return await this.feature_extractor(...e)}post_process_masks(...e){return this.feature_extractor.post_process_masks(...e)}reshape_input_points(...e){return this.feature_extractor.reshape_input_points(...e)}}class Sx extends Yr{async _call(e){return await this.feature_extractor(e)}}class kx extends Yr{async _call(e){return await this.feature_extractor(e)}}class Ex extends Yr{async _call(e){return await this.feature_extractor(e)}}class Cx extends Yr{}class _t{static FEATURE_EXTRACTOR_CLASS_MAPPING={ImageFeatureExtractor:je,WhisperFeatureExtractor:_x,ViTFeatureExtractor:ax,MobileViTFeatureExtractor:ox,OwlViTFeatureExtractor:Pm,Owlv2ImageProcessor:lx,CLIPFeatureExtractor:ex,ChineseCLIPFeatureExtractor:tx,SiglipImageProcessor:rx,ConvNextFeatureExtractor:Dm,ConvNextImageProcessor:nx,SegformerFeatureExtractor:X1,BitImageProcessor:Z1,DPTImageProcessor:Q1,DPTFeatureExtractor:Rm,GLPNFeatureExtractor:J1,BeitFeatureExtractor:dx,DeiTFeatureExtractor:ux,DetrFeatureExtractor:px,YolosFeatureExtractor:hx,DonutFeatureExtractor:Nm,NougatImageProcessor:cx,EfficientNetImageProcessor:sx,ViTImageProcessor:ix,VitMatteImageProcessor:gx,SamImageProcessor:fx,Swin2SRImageProcessor:mx,Wav2Vec2FeatureExtractor:yx,SeamlessM4TFeatureExtractor:wx,SpeechT5FeatureExtractor:$x,ASTFeatureExtractor:vx,ClapFeatureExtractor:bx};static PROCESSOR_CLASS_MAPPING={WhisperProcessor:Sx,Wav2Vec2ProcessorWithLM:kx,SamProcessor:xx,SpeechT5Processor:Ex,OwlViTProcessor:Cx};static async from_pretrained(e,{progress_callback:r=null,config:n=null,cache_dir:a=null,local_files_only:i=!1,revision:s="main"}={}){let o=n??await Br(e,"preprocessor_config.json",!0,{progress_callback:r,config:n,cache_dir:a,local_files_only:i,revision:s}),l=o.feature_extractor_type??o.image_processor_type,d=this.FEATURE_EXTRACTOR_CLASS_MAPPING[l];if(!d)if(o.size!==void 0)console.warn(`Feature extractor type "${l}" not found, assuming ImageFeatureExtractor due to size parameter in config.`),d=je;else throw new Error(`Unknown Feature Extractor type: ${l}`);let c=this.PROCESSOR_CLASS_MAPPING[o.processor_class]??Yr,u=new d(o);return new c(u)}}async function Qt(t){return Array.isArray(t)||(t=[t]),await Promise.all(t.map(e=>mt.read(e)))}async function ri(t,e){return Array.isArray(t)||(t=[t]),await Promise.all(t.map(r=>typeof r=="string"||r instanceof URL?L1(r,e):r instanceof Float64Array?new Float32Array(r):r))}function Um(t,e){e&&(t=t.map(s=>s|0));const[r,n,a,i]=t;return{xmin:r,ymin:n,xmax:a,ymax:i}}class Ze extends yt{constructor({task:e,model:r,tokenizer:n=null,processor:a=null}){super(),this.task=e,this.model=r,this.tokenizer=n,this.processor=a}async dispose(){await this.model.dispose()}}class Ax extends Ze{constructor(e){super(e)}async _call(e,{topk:r=1}={}){const n=this.tokenizer(e,{padding:!0,truncation:!0}),a=await this.model(n),i=this.model.config.problem_type==="multi_label_classification"?l=>l.sigmoid().data:l=>dt(l.data),s=this.model.config.id2label,o=[];for(const l of a.logits){const d=i(l),c=Rr(d,r).map(u=>({label:s[u[0]],score:u[1]}));r===1?o.push(...c):o.push(c)}return Array.isArray(e)||r===1?o:o[0]}}class Ix extends Ze{constructor(e){super(e)}async _call(e,{ignore_labels:r=["O"]}={}){const n=Array.isArray(e),a=this.tokenizer(n?e:[e],{padding:!0,truncation:!0}),i=(await this.model(a)).logits,s=this.model.config.id2label,o=[];for(let l=0;l<i.dims[0];++l){const d=a.input_ids[l],c=i[l],u=[];for(let h=0;h<c.dims[0];++h){const f=c[h],g=Et(f.data)[1],y=s?s[g]:`LABEL_${g}`;if(r.includes(y))continue;const w=this.tokenizer.decode([d[h].item()],{skip_special_tokens:!0});if(w==="")continue;const v=dt(f.data);u.push({entity:y,score:v[g],index:h,word:w,start:null,end:null})}o.push(u)}return n?o:o[0]}}class Tx extends Ze{constructor(e){super(e)}async _call(e,r,{topk:n=1}={}){const a=this.tokenizer(e,{text_pair:r,padding:!0,truncation:!0}),i=await this.model(a),s=[];for(let o=0;o<i.start_logits.dims[0];++o){const l=a.input_ids[o],d=l.indexOf(this.tokenizer.sep_token_id),c=Array.from(dt(i.start_logits[o].data)).map((f,g)=>[f,g]).filter(f=>f[1]>d),u=Array.from(dt(i.end_logits[o].data)).map((f,g)=>[f,g]).filter(f=>f[1]>d),h=mg(c,u).filter(f=>f[0][1]<=f[1][1]).map(f=>[f[0][1],f[1][1],f[0][0]*f[1][0]]).sort((f,g)=>g[2]-f[2]);for(let f=0;f<Math.min(h.length,n);++f){const[g,y,w]=h[f],v=[...l].slice(g,y+1),S=this.tokenizer.decode(v,{skip_special_tokens:!0});s.push({answer:S,score:w})}}return n===1?s[0]:s}}class Ox extends Ze{constructor(e){super(e)}async _call(e,{topk:r=5}={}){const n=this.tokenizer(e,{padding:!0,truncation:!0}),a=await this.model(n),i=[];for(let s=0;s<n.input_ids.dims[0];++s){const o=n.input_ids[s],l=o.indexOf(this.tokenizer.mask_token_id);if(l===-1)throw Error(`Mask token (${this.tokenizer.mask_token}) not found in text.`);const d=a.logits[s][l],c=Rr(dt(d.data),r);i.push(c.map(u=>{const h=[...o];return h[l]=u[0],{score:u[1],token:u[0],token_str:this.tokenizer.model.vocab[u[0]],sequence:this.tokenizer.decode(h,{skip_special_tokens:!0})}}))}return Array.isArray(e)?i:i[0]}}class so extends Ze{_key="generated_text";constructor(e){super(e)}async _call(e,r={}){Array.isArray(e)||(e=[e]),this.model.config.prefix&&(e=e.map(l=>this.model.config.prefix+l));const n=this.model.config.task_specific_params;n&&n[this.task]&&n[this.task].prefix&&(e=e.map(l=>n[this.task].prefix+l));const a=this.tokenizer,i={padding:!0,truncation:!0};let s;this instanceof Wm&&"_build_translation_inputs"in a?s=a._build_translation_inputs(e,i,r).input_ids:s=a(e,i).input_ids;const o=await this.model.generate(s,r);return a.batch_decode(o,{skip_special_tokens:!0}).map(l=>({[this._key]:l}))}}class Mx extends so{_key="summary_text";constructor(e){super(e)}}class Wm extends so{_key="translation_text";constructor(e){super(e)}}class zx extends Ze{constructor(e){super(e)}async _call(e,r={}){const n=Array.isArray(e);n||(e=[e]);const a=r.add_special_tokens??!1;this.tokenizer.padding_side="left";const{input_ids:i,attention_mask:s}=this.tokenizer(e,{add_special_tokens:a,padding:!0,truncation:!0}),o=await this.model.generate(i,r,null,{inputs_attention_mask:s}),l=this.tokenizer.batch_decode(o,{skip_special_tokens:!0}),d=Array.from({length:e.length},c=>[]);for(let c=0;c<l.length;++c){const u=Math.floor(c/o.length*e.length);d[u].push({generated_text:l[c]})}return!n&&d.length===1?d[0]:d}}class Bx extends Ze{constructor(e){super(e),this.label2id=Object.fromEntries(Object.entries(this.model.config.label2id).map(([r,n])=>[r.toLowerCase(),n])),this.entailment_id=this.label2id.entailment,this.entailment_id===void 0&&(console.warn("Could not find 'entailment' in label2id mapping. Using 2 as entailment_id."),this.entailment_id=2),this.contradiction_id=this.label2id.contradiction??this.label2id.not_entailment,this.contradiction_id===void 0&&(console.warn("Could not find 'contradiction' in label2id mapping. Using 0 as contradiction_id."),this.contradiction_id=0)}async _call(e,r,{hypothesis_template:n="This example is {}.",multi_label:a=!1}={}){const i=Array.isArray(e);i||(e=[e]),Array.isArray(r)||(r=[r]);const s=r.map(d=>n.replace("{}",d)),o=a||r.length===1,l=[];for(const d of e){const c=[];for(const h of s){const f=this.tokenizer(d,{text_pair:h,padding:!0,truncation:!0}),g=await this.model(f);o?c.push([g.logits.data[this.contradiction_id],g.logits.data[this.entailment_id]]):c.push(g.logits.data[this.entailment_id])}const u=(o?c.map(h=>dt(h)[1]):dt(c)).map((h,f)=>[h,f]).sort((h,f)=>f[0]-h[0]);l.push({sequence:d,labels:u.map(h=>r[h[1]]),scores:u.map(h=>h[0])})}return i?l:l[0]}}class Rx extends Ze{constructor(e){super(e)}async _call(e,{pooling:r="none",normalize:n=!1}={}){const a=this.tokenizer(e,{padding:!0,truncation:!0}),i=await this.model(a);let s=i.last_hidden_state??i.logits;if(r!=="none")if(r==="mean")s=p0(s,a.attention_mask);else if(r==="cls")s=s.slice(null,0);else throw Error(`Pooling method '${r}' not supported.`);return n&&(s=s.normalize(2,-1)),s}}class Dx extends Ze{constructor(e){super(e)}async _call(e,{pool:r=null}={}){const n=await Qt(e),{pixel_values:a}=await this.processor(n),i=await this.model({pixel_values:a});let s;if(r){if(!("pooler_output"in i))throw Error("No pooled output was returned. Make sure the model has a 'pooler' layer when using the 'pool' option.");s=i.pooler_output}else s=i.last_hidden_state??i.logits??i.image_embeds;return s}}class Px extends Ze{constructor(e){super(e)}async _call(e,{topk:r=null}={}){const n=!Array.isArray(e),a=this.processor.feature_extractor.config.sampling_rate,i=await ri(e,a),s=this.model.config.id2label,o=[];for(const l of i){const d=await this.processor(l),c=(await this.model(d)).logits[0],u=Rr(dt(c.data),r).map(h=>({label:s[h[0]],score:h[1]}));r===1?o.push(...u):o.push(u)}return!n||r===1?o:o[0]}}class Nx extends Ze{constructor(e){super(e)}async _call(e,r,{hypothesis_template:n="This is a sound of {}."}={}){const a=!Array.isArray(e);a&&(e=[e]);const i=r.map(c=>n.replace("{}",c)),s=this.tokenizer(i,{padding:!0,truncation:!0}),o=this.processor.feature_extractor.config.sampling_rate,l=await ri(e,o),d=[];for(const c of l){const u=await this.processor(c),h=await this.model({...s,...u}),f=dt(h.logits_per_audio.data);d.push([...f].map((g,y)=>({score:g,label:r[y]})))}return a?d[0]:d}}class Ux extends Ze{constructor(e){super(e)}async _call(e,r={}){switch(this.model.config.model_type){case"whisper":return this._call_whisper(e,r);case"wav2vec2":case"wav2vec2-bert":case"unispeech":case"unispeech-sat":case"hubert":return this._call_wav2vec2(e,r);default:throw new Error(`AutomaticSpeechRecognitionPipeline does not support model type '${this.model.config.model_type}'.`)}}async _call_wav2vec2(e,r={}){r.language&&console.warn('`language` parameter is not yet supported for `wav2vec2` models, defaulting to "English".'),r.task&&console.warn('`task` parameter is not yet supported for `wav2vec2` models, defaulting to "transcribe".');const n=!Array.isArray(e);n&&(e=[e]);const a=this.processor.feature_extractor.config.sampling_rate,i=await ri(e,a),s=[];for(const o of i){const l=await this.processor(o),d=(await this.model(l)).logits[0],c=[];for(const h of d)c.push(Et(h.data)[1]);const u=this.tokenizer.decode(c);s.push({text:u})}return n?s[0]:s}async _call_whisper(e,r={}){const n=r.return_timestamps??!1,a=r.chunk_length_s??0,i=r.chunk_callback??null,s=r.force_full_sequences??!1;let o=r.stride_length_s??null;n==="word"&&(r.return_token_timestamps=!0);const l=wo(r,"language",null),d=wo(r,"task",null);if(l||d||n){if(r.forced_decoder_ids)throw new Error("Cannot specify `language`/`task`/`return_timestamps` and `forced_decoder_ids` at the same time.");const w=this.tokenizer.get_decoder_prompt_ids({language:l,task:d,no_timestamps:!n});w.length>0&&(r.forced_decoder_ids=w)}const c=!Array.isArray(e);c&&(e=[e]);const u=this.processor.feature_extractor.config.chunk_length/this.model.config.max_source_positions,h=this.processor.feature_extractor.config.hop_length,f=this.processor.feature_extractor.config.sampling_rate,g=await ri(e,f),y=[];for(const w of g){let v=[];if(a>0){if(o===null)o=a/6;else if(a<=o)throw Error("`chunk_length_s` must be larger than `stride_length_s`.");const x=f*a,A=f*o,T=x-2*A;let B=0;for(;B<w.length;){const U=w.subarray(B,B+x),H=await this.processor(U),K=B===0,O=B+T>=w.length;v.push({stride:[U.length,K?0:A,O?0:A],input_features:H.input_features,is_last:O}),B+=T}}else v=[{stride:[w.length,0,0],input_features:(await this.processor(w)).input_features,is_last:!0}];for(const x of v){r.num_frames=Math.floor(x.stride[0]/h);const A=await this.model.generate(x.input_features,r);n==="word"?(x.tokens=A.sequences[0],x.token_timestamps=A.token_timestamps.tolist()[0].map(T=>nn(T,2))):x.tokens=A[0],x.stride=x.stride.map(T=>T/f),i!==null&&i(x)}const[S,E]=this.tokenizer._decode_asr(v,{time_precision:u,return_timestamps:n,force_full_sequences:s});y.push({text:S,...E})}return c?y[0]:y}}class Wx extends Ze{constructor(e){super(e)}async _call(e,r={}){const n=Array.isArray(e),a=await Qt(e),{pixel_values:i}=await this.processor(a),s=[];for(const o of i){o.dims=[1,...o.dims];const l=await this.model.generate(o,r),d=this.tokenizer.batch_decode(l,{skip_special_tokens:!0}).map(c=>({generated_text:c.trim()}));s.push(d)}return n?s:s[0]}}class Lx extends Ze{constructor(e){super(e)}async _call(e,{topk:r=1}={}){const n=Array.isArray(e),a=await Qt(e),{pixel_values:i}=await this.processor(a),s=await this.model({pixel_values:i}),o=this.model.config.id2label,l=[];for(const d of s.logits){const c=Rr(dt(d.data),r).map(u=>({label:o[u[0]],score:u[1]}));r===1?l.push(...c):l.push(c)}return n||r===1?l:l[0]}}class Fx extends Ze{constructor(e){super(e),this.subtasks_mapping={panoptic:"post_process_panoptic_segmentation",instance:"post_process_instance_segmentation",semantic:"post_process_semantic_segmentation"}}async _call(e,{threshold:r=.5,mask_threshold:n=.5,overlap_mask_area_threshold:a=.8,label_ids_to_fuse:i=null,target_sizes:s=null,subtask:o=null}={}){if(Array.isArray(e)&&e.length!==1)throw Error("Image segmentation pipeline currently only supports a batch size of 1.");const l=await Qt(e),d=l.map(w=>[w.height,w.width]),{pixel_values:c,pixel_mask:u}=await this.processor(l),h=await this.model({pixel_values:c,pixel_mask:u});let f=null;if(o!==null)f=this.subtasks_mapping[o];else for(let[w,v]of Object.entries(this.subtasks_mapping))if(v in this.processor.feature_extractor){f=this.processor.feature_extractor[v].bind(this.processor.feature_extractor),o=w;break}const g=this.model.config.id2label,y=[];if(o==="panoptic"||o==="instance"){const w=f(h,r,n,a,i,s??d)[0],v=w.segmentation;for(const S of w.segments_info){const E=new Uint8ClampedArray(v.data.length);for(let A=0;A<v.data.length;++A)v.data[A]===S.id&&(E[A]=255);const x=new mt(E,v.dims[1],v.dims[0],1);y.push({score:S.score,label:g[S.label_id],mask:x})}}else if(o==="semantic"){const{segmentation:w,labels:v}=f(h,s??d)[0];for(const S of v){const E=new Uint8ClampedArray(w.data.length);for(let A=0;A<w.data.length;++A)w.data[A]===S&&(E[A]=255);const x=new mt(E,w.dims[1],w.dims[0],1);y.push({score:null,label:g[S],mask:x})}}else throw Error(`Subtask ${o} not supported.`);return y}}class Vx extends Ze{constructor(e){super(e)}async _call(e,r,{hypothesis_template:n="This is a photo of {}"}={}){const a=Array.isArray(e),i=await Qt(e),s=r.map(h=>n.replace("{}",h)),o=this.tokenizer(s,{padding:this.model.config.model_type==="siglip"?"max_length":!0,truncation:!0}),{pixel_values:l}=await this.processor(i),d=await this.model({...o,pixel_values:l}),c=this.model.config.model_type==="siglip"?h=>h.sigmoid().data:h=>dt(h.data),u=[];for(const h of d.logits_per_image){const f=[...c(h)].map((g,y)=>({score:g,label:r[y]}));f.sort((g,y)=>y.score-g.score),u.push(f)}return a?u:u[0]}}class Hx extends Ze{constructor(e){super(e)}async _call(e,{threshold:r=.9,percentage:n=!1}={}){const a=Array.isArray(e);if(a&&e.length!==1)throw Error("Object detection pipeline currently only supports a batch size of 1.");const i=await Qt(e),s=n?null:i.map(f=>[f.height,f.width]),{pixel_values:o,pixel_mask:l}=await this.processor(i),d=await this.model({pixel_values:o,pixel_mask:l}),c=this.processor.feature_extractor.post_process_object_detection(d,r,s),u=this.model.config.id2label,h=c.map(f=>f.boxes.map((g,y)=>({score:f.scores[y],label:u[f.classes[y]],box:Um(g,!n)})));return a?h:h[0]}}class Gx extends Ze{constructor(e){super(e)}async _call(e,r,{threshold:n=.1,topk:a=null,percentage:i=!1}={}){const s=Array.isArray(e),o=await Qt(e),l=this.tokenizer(r,{padding:!0,truncation:!0}),d=await this.processor(o),c=[];for(let u=0;u<o.length;++u){const h=o[u],f=i?null:[[h.height,h.width]],g=d.pixel_values[u].unsqueeze_(0),y=await this.model({...l,pixel_values:g}),w=this.processor.feature_extractor.post_process_object_detection(y,n,f,!0)[0];let v=w.boxes.map((S,E)=>({score:w.scores[E],label:r[w.classes[E]],box:Um(S,!i)})).sort((S,E)=>E.score-S.score);a!==null&&(v=v.slice(0,a)),c.push(v)}return s?c:c[0]}}class qx extends Ze{constructor(e){super(e)}async _call(e,r,n={}){const a=(await Qt(e))[0],{pixel_values:i}=await this.processor(a),s=`<s_docvqa><s_question>${r}</s_question><s_answer>`,o=this.tokenizer(s,{add_special_tokens:!1,padding:!0,truncation:!0}).input_ids,l=await this.model.generate(i,{...n,decoder_input_ids:o,max_length:this.model.config.decoder.max_position_embeddings}),d=this.tokenizer.batch_decode(l)[0].match(/<s_answer>(.*?)<\/s_answer>/);let c=null;return d&&d.length>=2&&(c=d[1].trim()),[{answer:c}]}}class jx extends Ze{DEFAULT_VOCODER_ID="Xenova/speecht5_hifigan";constructor(e){super(e),this.vocoder=e.vocoder??null}async _call(e,{speaker_embeddings:r=null}={}){return this.processor?this._call_text_to_spectrogram(e,{speaker_embeddings:r}):this._call_text_to_waveform(e)}async _call_text_to_waveform(e){const r=this.tokenizer(e,{padding:!0,truncation:!0}),{waveform:n}=await this.model(r),a=this.model.config.sampling_rate;return{audio:n.data,sampling_rate:a}}async _call_text_to_spectrogram(e,{speaker_embeddings:r}){if(this.vocoder||(console.log("No vocoder specified, using default HifiGan vocoder."),this.vocoder=await Vn.from_pretrained(this.DEFAULT_VOCODER_ID,{dtype:"fp32"})),(typeof r=="string"||r instanceof URL)&&(r=new Float32Array(await(await fetch(r)).arrayBuffer())),r instanceof Float32Array)r=new re("float32",r,[1,r.length]);else if(!(r instanceof re))throw new Error("Speaker embeddings must be a `Tensor`, `Float32Array`, `string`, or `URL`.");const{input_ids:n}=this.tokenizer(e,{padding:!0,truncation:!0}),{waveform:a}=await this.model.generate_speech(n,r,{vocoder:this.vocoder}),i=this.processor.feature_extractor.config.sampling_rate;return{audio:a.data,sampling_rate:i}}}class Kx extends Ze{constructor(e){super(e)}async _call(e){const r=await Qt(e),n=await this.processor(r),a=await this.model(n),i=[];for(const s of a.reconstruction){const o=s.squeeze().clamp_(0,1).mul_(255).round_().to("uint8");i.push(mt.fromTensor(o))}return i.length>1?i:i[0]}}class Yx extends Ze{constructor(e){super(e)}async _call(e){const r=await Qt(e),n=await this.processor(r),{predicted_depth:a}=await this.model(n),i=[];for(let s=0;s<r.length;++s){const o=bn(a[s],r[s].size.reverse(),"bilinear",!1),l=o.mul_(255/Et(o.data)[0]).to("uint8");i.push({predicted_depth:a[s],depth:mt.fromTensor(l)})}return i.length>1?i:i[0]}}const Lm=Object.freeze({"text-classification":{tokenizer:ut,pipeline:Ax,model:Im,default:{model:"Xenova/distilbert-base-uncased-finetuned-sst-2-english"},type:"text"},"token-classification":{tokenizer:ut,pipeline:Ix,model:m1,default:{model:"Xenova/bert-base-multilingual-cased-ner-hrl"},type:"text"},"question-answering":{tokenizer:ut,pipeline:Tx,model:b1,default:{model:"Xenova/distilbert-base-cased-distilled-squad"},type:"text"},"fill-mask":{tokenizer:ut,pipeline:Ox,model:v1,default:{model:"Xenova/bert-base-uncased"},type:"text"},summarization:{tokenizer:ut,pipeline:Mx,model:ro,default:{model:"Xenova/distilbart-cnn-6-6"},type:"text"},translation:{tokenizer:ut,pipeline:Wm,model:ro,default:{model:"Xenova/t5-small"},type:"text"},"text2text-generation":{tokenizer:ut,pipeline:so,model:ro,default:{model:"Xenova/flan-t5-small"},type:"text"},"text-generation":{tokenizer:ut,pipeline:zx,model:w1,default:{model:"Xenova/gpt2"},type:"text"},"zero-shot-classification":{tokenizer:ut,pipeline:Bx,model:Im,default:{model:"Xenova/distilbert-base-uncased-mnli"},type:"text"},"audio-classification":{pipeline:Px,model:I1,processor:_t,default:{model:"Xenova/wav2vec2-base-superb-ks"},type:"audio"},"zero-shot-audio-classification":{tokenizer:ut,pipeline:Nx,model:Vn,processor:_t,default:{model:"Xenova/clap-htsat-unfused"},type:"multimodal"},"automatic-speech-recognition":{tokenizer:ut,pipeline:Ux,model:[g1,A1],processor:_t,default:{model:"Xenova/whisper-tiny.en"},type:"multimodal"},"text-to-audio":{tokenizer:ut,pipeline:jx,model:[y1,_1],processor:[_t,null],default:{model:"Xenova/speecht5_tts"},type:"text"},"image-to-text":{tokenizer:ut,pipeline:Wx,model:$1,processor:_t,default:{model:"Xenova/vit-gpt2-image-captioning"},type:"multimodal"},"image-classification":{pipeline:Lx,model:x1,processor:_t,default:{model:"Xenova/vit-base-patch16-224"},type:"multimodal"},"image-segmentation":{pipeline:Fx,model:[S1,k1],processor:_t,default:{model:"Xenova/detr-resnet-50-panoptic"},type:"multimodal"},"zero-shot-image-classification":{tokenizer:ut,pipeline:Vx,model:Vn,processor:_t,default:{model:"Xenova/clip-vit-base-patch32"},type:"multimodal"},"object-detection":{pipeline:Hx,model:E1,processor:_t,default:{model:"Xenova/detr-resnet-50"},type:"multimodal"},"zero-shot-object-detection":{tokenizer:ut,pipeline:Gx,model:C1,processor:_t,default:{model:"Xenova/owlvit-base-patch32"},type:"multimodal"},"document-question-answering":{tokenizer:ut,pipeline:qx,model:T1,processor:_t,default:{model:"Xenova/donut-base-finetuned-docvqa"},type:"multimodal"},"image-to-image":{pipeline:Kx,model:O1,processor:_t,default:{model:"Xenova/swin2SR-classical-sr-x2-64"},type:"image"},"depth-estimation":{pipeline:Yx,model:M1,processor:_t,default:{model:"Xenova/dpt-large"},type:"image"},"feature-extraction":{tokenizer:ut,pipeline:Rx,model:Vn,default:{model:"Xenova/all-MiniLM-L6-v2"},type:"text"},"image-feature-extraction":{processor:_t,pipeline:Dx,model:[z1,Vn],default:{model:"Xenova/vit-base-patch16-224-in21k"},type:"image"}}),Xx=Object.freeze({"sentiment-analysis":"text-classification",ner:"token-classification",asr:"automatic-speech-recognition","text-to-speech":"text-to-audio",embeddings:"feature-extraction"});async function Qx(t,e=null,{progress_callback:r=null,config:n=null,cache_dir:a=null,local_files_only:i=!1,revision:s="main",device:o=null,dtype:l=null,session_options:d={}}={}){t=Xx[t]??t;const c=Lm[t.split("_",1)[0]];if(!c)throw Error(`Unsupported pipeline: ${t}. Must be one of [${Object.keys(Lm)}]`);e||(e=c.default.model,console.log(`No model specified. Using default model: "${e}".`));const u={progress_callback:r,config:n,cache_dir:a,local_files_only:i,revision:s,device:o,dtype:l,session_options:d},h=new Map([["tokenizer",c.tokenizer],["model",c.model],["processor",c.processor]]),f=await Zx(h,e,u);f.task=t,zr(r,{status:"ready",task:t,model:e});const g=c.pipeline;return new g(f)}async function Zx(t,e,r){const n=Object.create(null),a=[];for(let[i,s]of t.entries()){if(!s)continue;let o;Array.isArray(s)?o=new Promise(async(l,d)=>{let c;for(let u of s){if(u===null){l(null);return}try{l(await u.from_pretrained(e,r));return}catch(h){if(h.message?.includes("Unsupported model type"))c=h;else{d(h);return}}}d(c)}):o=s.from_pretrained(e,r),n[i]=o,a.push(o)}await Promise.all(a);for(let[i,s]of Object.entries(n))n[i]=await s;return n}const Jx="/models/";tt.allowLocalModels=!1,tt.allowRemoteModels=!0;const e3={"question-answering":a3,summarization:i3,"image-to-text":s3};self.addEventListener("message",async t=>{const{baseURI:e}=t.data;e&&(tt.localModelPath=new URL(e).origin+Jx);const r=t.data;let n=e3[r.task];if(!n)return;let a=await n(r);self.postMessage({task:r.task,type:"result",data:a})});class oo{static task=null;static model=null;static instance=null;constructor(e,r){this.tokenizer=e,this.model=r}static getInstance(e=null){if(this.task===null||this.model===null)throw Error("Must set task and model");return this.instance===null&&(this.instance=Qx(this.task,this.model,{progress_callback:e})),this.instance}}class t3 extends oo{static task="question-answering";static model="Xenova/distilbert-base-cased-distilled-squad"}class r3 extends oo{static task="summarization";static model="Xenova/distilbart-cnn-6-6"}class n3 extends oo{static task="image-to-text";static model="Xenova/vit-gpt2-image-captioning"}async function a3(t){let e=await(await t3.getInstance(r=>{self.postMessage({type:"download",task:"question-answering",data:r})}))(t.question,t.context);return self.postMessage({type:"complete",target:t.elementIdToUpdate,data:e.answer}),e}async function i3(t){let e=await r3.getInstance(r=>{self.postMessage({type:"download",task:"summarization",data:r})});return await e(t.text,{...t.generation,callback_function:function(r){const n=e.tokenizer.decode(r[0].output_token_ids,{skip_special_tokens:!0});self.postMessage({type:"update",target:t.elementIdToUpdate,data:n.trim()})}})}async function s3(t){let e=await n3.getInstance(r=>{self.postMessage({type:"download",task:"image-to-text",data:r})});return await e(t.image,{...t.generation,callback_function:function(r){const n=e.tokenizer.decode(r[0].output_token_ids,{skip_special_tokens:!0});self.postMessage({type:"update",target:t.elementIdToUpdate,data:n.trim()})}})}})()}();
",X=l=>Uint8Array.from(atob(l),Z=>Z.charCodeAt(0)),b=typeof self<"u"&&self.Blob&&new Blob([X(d)],{type:"text/javascript;charset=utf-8"});function G(l){let Z;try{if(Z=b&&(self.URL||self.webkitURL).createObjectURL(b),!Z)throw"";const I=new Worker(Z,{name:l?.name});return I.addEventListener("error",()=>{(self.URL||self.webkitURL).revokeObjectURL(Z)}),I}catch{return new Worker("data:text/javascript;base64,"+d,{name:l?.name})}finally{Z&&(self.URL||self.webkitURL).revokeObjectURL(Z)}}export{G as W};
